
tp-rtos-02/ejercicio3/out/ejercicio3.elf:     file format elf32-littlearm
tp-rtos-02/ejercicio3/out/ejercicio3.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000411

Program Header:
0x70000001 off    0x00015150 vaddr 0x1a005150 paddr 0x1a005150 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x000000a0 vaddr 0x100000a0 paddr 0x100000a0 align 2**16
         filesz 0x00000000 memsz 0x00002b6c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00005158 memsz 0x00005158 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a005158 align 2**16
         filesz 0x000000a0 memsz 0x000000a0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000514c  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a0  10000000  1a005158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200a0  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200a0  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200a0  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200a0  2**2
                  CONTENTS
  6 .bss          00002b6c  100000a0  100000a0  000100a0  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200a0  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200a0  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200a0  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200a0  2**2
                  CONTENTS
 11 .init_array   00000004  1a00514c  1a00514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a005150  1a005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200a0  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200a0  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200a0  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200a0  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200a0  2**2
                  CONTENTS
 18 .noinit       00000000  10002c0c  10002c0c  000200a0  2**2
                  CONTENTS
 19 .debug_info   00032c98  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00007d0b  00000000  00000000  00052d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000fc11  00000000  00000000  0005aa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 000010c0  00000000  00000000  0006a658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000013c8  00000000  00000000  0006b718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  0000bb83  00000000  00000000  0006cae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   0001805e  00000000  00000000  00078663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0002e88c  00000000  00000000  000906c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      000000a7  00000000  00000000  000bef4d  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  000beff4  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002a94  00000000  00000000  000bf028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000a0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00514c l    d  .init_array	00000000 .init_array
1a005150 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10002c0c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 main.c
1a000300 l     F .text	0000000c initHardware
00000000 l    df *ABS*	00000000 system.c
100000a0 l     O .bss	00000004 heap_end.5849
00000000 l    df *ABS*	00000000 heap_4.c
1a000564 l     F .text	00000064 prvHeapInit
100000a8 l     O .bss	00002000 ucHeap
1a0005c8 l     F .text	00000058 prvInsertBlockIntoFreeList
100000a4 l     O .bss	00000004 pxEnd
100020a8 l     O .bss	00000004 xBlockAllocatedBit
100020ac l     O .bss	00000004 xFreeBytesRemaining
100020b0 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
100020b4 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a000794 l     F .text	00000010 prvGetDisinheritPriorityAfterTimeout
1a0007a4 l     F .text	0000001e prvIsQueueFull
1a0007c2 l     F .text	0000001a prvIsQueueEmpty
1a0007dc l     F .text	00000076 prvCopyDataToQueue
1a000852 l     F .text	00000024 prvCopyDataFromQueue
1a000876 l     F .text	0000006e prvUnlockQueue
1a000968 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100020bc l     O .bss	00000190 uxIdleTaskStack.10798
1000224c l     O .bss	00000640 uxTimerTaskStack.10805
1000288c l     O .bss	00000060 xIdleTaskTCB.10797
100028ec l     O .bss	00000060 xTimerTaskTCB.10804
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001154 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001180 l     F .text	00000092 prvInitialiseNewTask
1a001214 l     F .text	00000068 prvInitialiseTaskLists
1a00127c l     F .text	000000ac prvAddNewTaskToReadyList
1a001328 l     F .text	00000038 prvDeleteTCB
1a001360 l     F .text	0000004c prvCheckTasksWaitingTermination
1a0013ac l     F .text	00000028 prvIdleTask
1a0013d4 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002950 l     O .bss	00000004 pxDelayedTaskList
10002954 l     O .bss	00000004 pxOverflowDelayedTaskList
10002958 l     O .bss	0000008c pxReadyTasksLists
100029e4 l     O .bss	00000004 uxCurrentNumberOfTasks
100029e8 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
100029ec l     O .bss	00000004 uxPendedTicks
100029f0 l     O .bss	00000004 uxSchedulerSuspended
100029f4 l     O .bss	00000004 uxTaskNumber
100029f8 l     O .bss	00000004 uxTopReadyPriority
100029fc l     O .bss	00000014 xDelayedTaskList1
10002a10 l     O .bss	00000014 xDelayedTaskList2
10002a24 l     O .bss	00000004 xNextTaskUnblockTime
10002a28 l     O .bss	00000004 xNumOfOverflows
10002a2c l     O .bss	00000014 xPendingReadyList
10002a40 l     O .bss	00000004 xSchedulerRunning
10002a44 l     O .bss	00000014 xSuspendedTaskList
10002a58 l     O .bss	00000014 xTasksWaitingTermination
10002a6c l     O .bss	00000004 xTickCount
10002a70 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001d28 l     F .text	00000020 prvGetNextExpireTime
1a001d48 l     F .text	00000048 prvInsertTimerInActiveList
1a001d90 l     F .text	00000070 prvCheckForValidListAndQueue
1a002140 l     F .text	00000016 prvTimerTask
1a001ed0 l     F .text	00000078 prvSwitchTimerLists
1a001f48 l     F .text	0000002c prvSampleTimeNow
1a001f74 l     F .text	00000060 prvProcessExpiredTimer
1a001fd4 l     F .text	00000074 prvProcessTimerOrBlockTask
1a002048 l     F .text	000000f8 prvProcessReceivedCommands
10002a74 l     O .bss	00000004 pxCurrentTimerList
10002a78 l     O .bss	00000004 pxOverflowTimerList
10002a7c l     O .bss	000000a0 ucStaticTimerQueueStorage.11899
10002b1c l     O .bss	00000014 xActiveTimerList1
10002b30 l     O .bss	00000014 xActiveTimerList2
10002b44 l     O .bss	00000004 xLastTime.11848
10002b48 l     O .bss	00000050 xStaticTimerQueue.11898
10002b98 l     O .bss	00000004 xTimerQueue
10002b9c l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002158 l     F .text	00000040 prvTaskExitError
1a002198 l     F .text	00000022 prvPortStartFirstTask
1a0021c0 l     F .text	0000000e vPortEnableVFP
1a002220 l       .text	00000000 pxCurrentTCBConst2
1a002300 l       .text	00000000 pxCurrentTCBConst
10002ba0 l     O .bss	00000001 ucMaxSysCallPriority
10002ba4 l     O .bss	00000004 ulMaxPRIGROUPValue
10000000 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 board.c
1a0024f4 l     F .text	00000044 Board_LED_Init
1a002538 l     F .text	00000040 Board_TEC_Init
1a002578 l     F .text	00000040 Board_GPIO_Init
1a0025b8 l     F .text	00000030 Board_ADC_Init
1a0025e8 l     F .text	00000038 Board_SPI_Init
1a002620 l     F .text	00000024 Board_I2C_Init
1a004f3c l     O .text	00000008 GpioButtons
1a004f44 l     O .text	0000000c GpioLeds
1a004f50 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a004f68 l     O .text	00000004 InitClkStates
1a004f6c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002880 l     F .text	0000002c Chip_UART_GetIndex
1a004fe0 l     O .text	00000008 UART_BClock
1a004fe8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0029dc l     F .text	00000014 Chip_ADC_GetClockIndex
1a0029f0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002aa4 l     F .text	000000a0 pll_calc_divs
1a002b44 l     F .text	0000010c pll_get_frac
1a002c50 l     F .text	00000048 Chip_Clock_FindBaseClock
1a002ebc l     F .text	00000022 Chip_Clock_GetDivRate
10002bac l     O .bss	00000008 audio_usb_pll_freq
1a004ff8 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a005064 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003198 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0031ac l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002bb4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a003748 l     F .text	00000004 __fp_lock
1a003758 l     F .text	00000004 __fp_unlock
1a003810 l     F .text	000000f4 __sinit.part.0
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a003d88 l     F .text	0000003a __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 impure.c
10000040 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a005150 l       .init_array	00000000 __init_array_end
1a00514c l       .bss_RAM5	00000000 __preinit_array_end
1a00514c l       .init_array	00000000 __init_array_start
1a00514c l       .bss_RAM5	00000000 __preinit_array_start
1a004e14 g     F .text	00000010 _malloc_usable_size_r
1a002ce4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0004b0 g     F .text	00000012 _isatty_r
1a004518 g     F .text	000000d8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a0004c2 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a00033c g     F .text	00000030 vTarea3
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002268 g     F .text	0000002c vPortExitCritical
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0044e0 g     F .text	00000038 printf
1a002742 g     F .text	00000008 __stdio_init
1a004668 g     F .text	00000020 __sseek
1a003918 g     F .text	00000008 __sinit
1a004690 g     F .text	000000b0 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000fe4 g     F .text	00000052 vQueueWaitForMessageRestricted
1a00375c g     F .text	0000002e __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a002a96 g     F .text	0000000c Chip_ADC_SetResolution
1a004dc4 g     F .text	00000002 __malloc_unlock
1a002304 g     F .text	0000002c SysTick_Handler
1a00040c  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a00267c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a004cf0 g     F .text	000000ce memmove
1a003904 g     F .text	00000014 _cleanup
1a0022a0 g     F .text	00000064 PendSV_Handler
1a000bec g     F .text	000000ce xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a005158 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1000294c g     O .bss	00000004 pxCurrentTCB
1a00030c g     F .text	00000030 vTarea1
1a0004a6 g     F .text	0000000a _fstat_r
53ff747e g       *ABS*	00000000 __valid_user_code_checksum
1a004624 g     F .text	00000004 __seofread
1a005158 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001a10 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a002f60 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a002368 g     F .text	00000110 xPortStartScheduler
1a003a40 g     F .text	00000134 memcpy
1a00191c g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00374c g     F .text	0000000c _cleanup_r
1a002330  w    F .text	00000038 vPortSetupTimerInterrupt
1a0032a0 g     F .text	00000000 .hidden __aeabi_uldivmod
10002c0c g       .noinit	00000000 _noinit
1a0045f0 g     F .text	00000010 puts
1a000724 g     F .text	00000070 vPortFree
10002c04 g     O .bss	00000004 SystemCoreClock
1a0028ac g     F .text	00000054 Chip_UART_Init
1a000e18 g     F .text	000001a4 xQueueSemaphoreTake
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002478 g     F .text	0000005c vPortValidateInterruptPriority
1a0044b0 g     F .text	0000002e _printf_r
1a000180  w    F .text	00000002 UsageFault_Handler
1a002fdc g     F .text	0000004c Chip_Clock_GetRate
1a001052 g     F .text	00000016 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002784 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a004850 g     F .text	00000308 __sfvwrite_r
1a0032d0 g     F .text	000002c2 .hidden __udivmoddi4
1a000544 g     F .text	00000020 _sbrk_r
1a004f38 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0004cc g     F .text	0000004e _read_r
1a00104c g     F .text	00000006 vListInitialiseItem
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a000cbc g     F .text	0000015c xQueueReceive
10002bc4 g     O .bss	00000040 xQueueRegistry
1a003724 g     F .text	00000024 fflush
1a0010d8 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a005150 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00510c g     O .text	00000004 _global_impure_ptr
1a004dc8 g     F .text	0000004c _realloc_r
1a0039f8 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000620 g     F .text	00000104 pvPortMalloc
1a003930 g     F .text	00000014 __fp_lock_all
1a002700 g     F .text	00000030 Board_Init
1a00049a  w    F .text	00000002 _init
1a001036 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a0015ec g     F .text	0000000c xTaskGetTickCount
1a000a6c g     F .text	00000180 xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10002c0c g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000410 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a002844 g     F .text	0000003c Chip_I2C_SetClockRate
1a001b94 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a002c98 g     F .text	0000004c Chip_Clock_EnableCrystal
1a00036c g     F .text	00000016 vTarea2
10008000 g       *ABS*	00000000 __top_RamLoc32
1a001984 g     F .text	0000008c xTaskRemoveFromEventList
1a00111c  w    F .text	0000001c vApplicationMallocFailedHook
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a0050ac g     O .text	00000020 __sf_fake_stderr
1a00281c g     F .text	00000028 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a002e54 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0010f0  w    F .text	0000002c vAssertCalled
1a001d0c g     F .text	0000001c pvTaskIncrementMutexHeldCount
1a0031c4 g     F .text	00000012 Chip_SSP_SetClockRate
1a003dc4 g     F .text	0000002e __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a003920 g     F .text	00000002 __sfp_lock_acquire
1a004c50 g     F .text	00000000 memchr
1a001a28 g     F .text	00000084 xTaskCheckForTimeOut
1a003c14 g     F .text	000000ac _free_r
1a002f38 g     F .text	00000028 Chip_Clock_GetBaseClock
1a001ad8 g     F .text	000000bc xTaskPriorityInherit
100000a0 g       .bss	00000000 _bss
1a002a64 g     F .text	00000032 Chip_ADC_SetSampleRate
10002ba8 g     O .bss	00000004 freeRtosInterruptCallback
1a0015dc g     F .text	00000010 vTaskSuspendAll
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0031d6 g     F .text	0000003e Chip_SSP_SetBitRate
1a00109a g     F .text	00000026 uxListRemove
1a003194 g     F .text	00000002 Chip_GPIO_Init
1a004f64 g     O .text	00000004 OscRateIn
1a00146c g     F .text	00000072 xTaskCreateStatic
10002c0c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001854 g     F .text	000000c8 vTaskSwitchContext
1a0044b0 g     F .text	0000002e _iprintf_r
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00098a g     F .text	00000092 xQueueGenericCreateStatic
1a00194c g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00049c g     F .text	0000000a _close_r
1a0010c0 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a001e64 g     F .text	0000006c xTimerGenericCommand
1a004750 g     F .text	00000100 __swsetup_r
1a001138  w    F .text	0000001c vApplicationStackOverflowHook
1a003594  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00378c g     F .text	00000084 __sfp
1a00392c g     F .text	00000002 __sinit_lock_release
1a004600 g     F .text	00000022 __sread
1a003284 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a004dc0 g     F .text	00000002 __malloc_lock
1a002668 g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a0036c4 g     F .text	00000060 _fflush_r
1a0050ec g     O .text	00000020 __sf_fake_stdin
1a002d00 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003b74 g     F .text	000000a0 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000384 g     F .text	00000088 main
1a004740 g     F .text	00000010 __swbuf
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001068 g     F .text	00000032 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002200 g     F .text	00000024 SVC_Handler
1a004688 g     F .text	00000008 __sclose
1a001e00 g     F .text	00000064 xTimerCreateTimerTask
1a0026e8 g     F .text	00000016 Board_LED_Toggle
1a003cc0 g     F .text	000000c8 _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a002f6c g     F .text	0000003c Chip_Clock_EnableOpts
1a00273a g     F .text	00000008 __stdio_getchar
1a003958 g     F .text	0000004a _fwalk
1a000a1c g     F .text	0000004e xQueueGenericCreate
1a002d1c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0026bc g     F .text	0000002c Board_LED_Test
10002bc0 g     O .bss	00000004 xSem_puerto_serie
1a002dd4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0040d4 g     F .text	00000018 vfiprintf
1a00324c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000498  w    F .text	00000002 _fini
1a0044e0 g     F .text	00000038 iprintf
1a001710 g     F .text	000000f8 xTaskResumeAll
1a001548 g     F .text	00000094 vTaskStartScheduler
1a002a24 g     F .text	00000040 Chip_ADC_Init
10002c08 g     O .bss	00000004 g_pUsbApi
1a00274c g     F .text	00000038 Board_SetupMuxing
1a002900 g     F .text	000000dc Chip_UART_SetBaudFDR
1a00051a g     F .text	00000028 _write_r
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a0040ec g     F .text	0000012a _printf_common
1000003c g     O .data	00000004 _impure_ptr
1a003598 g     F .text	0000012a __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a003944 g     F .text	00000014 __fp_unlock_all
1a001aac g     F .text	0000000c vTaskMissedYield
10002c0c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003214 g     F .text	00000038 Chip_SSP_Init
1a000fbc g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0015f8 g     F .text	00000118 xTaskIncrementTick
1a004b58 g     F .text	0000005a __swhatbuf_r
1a0024d4 g     F .text	00000020 DAC_IRQHandler
1a002644 g     F .text	00000024 Board_Debug_Init
1a002730 g     F .text	0000000a __stdio_putchar
1a0008e4 g     F .text	00000084 xQueueGenericReset
100000a0 g       .data	00000000 _edata
1a0027fc g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0014de g     F .text	00000068 xTaskCreate
1a00303c g     F .text	00000158 Chip_SetupCoreClock
1a004628 g     F .text	0000003e __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a003e10 g     F .text	000002c4 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a0039a4 g     F .text	00000052 _fwalk_reent
1a003028 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a001808 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003924 g     F .text	00000002 __sfp_lock_release
1a0050cc g     O .text	00000020 __sf_fake_stdout
1a001ab8 g     F .text	00000020 xTaskGetSchedulerState
1a001c48 g     F .text	000000c4 vTaskPriorityDisinheritAfterTimeout
1a003594  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a004bb4 g     F .text	00000094 __smakebuf_r
1a0021d4 g     F .text	0000002c pxPortInitialiseStack
1a004218 g     F .text	00000298 _printf_i
1a002fa8 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
10002bbc g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a003df4 g     F .text	0000001a __sprint_r
1a002698 g     F .text	00000024 Board_LED_Set
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002224 g     F .text	00000044 vPortEnterCritical
10002bb8 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a003e10 g     F .text	000002c4 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a002ee0 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0040d4 g     F .text	00000018 vfprintf
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a003928 g     F .text	00000002 __sinit_lock_acquire
1a0027f0 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 11 04 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 7e 74 ff 53     }...........~t.S
	...
1a00002c:	01 22 00 1a 85 01 00 1a 00 00 00 00 a1 22 00 1a     ."..........."..
1a00003c:	05 23 00 1a                                         .#..

1a000040 <g_pfnVendorVectors>:
1a000040:	d5 24 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     .$..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	85 32 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .2..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a005158 	.word	0x1a005158
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000a0 	.word	0x000000a0
1a000120:	1a005158 	.word	0x1a005158
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a005158 	.word	0x1a005158
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a005158 	.word	0x1a005158
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a005158 	.word	0x1a005158
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000a0 	.word	0x100000a0
1a000154:	00002b6c 	.word	0x00002b6c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:

}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <initHardware>:
	// Nunca llega aca
	return 0;
}

static void initHardware(void)
{
1a000300:	b508      	push	{r3, lr}
	SystemCoreClockUpdate();
1a000302:	f002 fe91 	bl	1a003028 <SystemCoreClockUpdate>
	Board_Init();
1a000306:	f002 f9fb 	bl	1a002700 <Board_Init>
}
1a00030a:	bd08      	pop	{r3, pc}

1a00030c <vTarea1>:

void vTarea1(void *pvParameters)
{
1a00030c:	b508      	push	{r3, lr}
	while (1)
	{
		xSemaphoreTake(xSem_puerto_serie, portMAX_DELAY);
1a00030e:	4c09      	ldr	r4, [pc, #36]	; (1a000334 <vTarea1+0x28>)
1a000310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000314:	6820      	ldr	r0, [r4, #0]
1a000316:	f000 fd7f 	bl	1a000e18 <xQueueSemaphoreTake>
		printf("Tarea 1\r\n");
1a00031a:	4807      	ldr	r0, [pc, #28]	; (1a000338 <vTarea1+0x2c>)
1a00031c:	f004 f968 	bl	1a0045f0 <puts>
		xSemaphoreGive(xSem_puerto_serie);
1a000320:	2300      	movs	r3, #0
1a000322:	461a      	mov	r2, r3
1a000324:	4619      	mov	r1, r3
1a000326:	6820      	ldr	r0, [r4, #0]
1a000328:	f000 fba0 	bl	1a000a6c <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(PERIOD_TAREA1Y3));
1a00032c:	2050      	movs	r0, #80	; 0x50
1a00032e:	f001 fa6b 	bl	1a001808 <vTaskDelay>
	while (1)
1a000332:	e7ec      	b.n	1a00030e <vTarea1+0x2>
1a000334:	10002bc0 	.word	0x10002bc0
1a000338:	1a004e24 	.word	0x1a004e24

1a00033c <vTarea3>:
		vTaskDelay(pdMS_TO_TICKS(DELAY_TAREA2_BUSY));
	}
}

void vTarea3(void *pvParameters)
{
1a00033c:	b508      	push	{r3, lr}
	while (1)
	{
		xSemaphoreTake(xSem_puerto_serie, portMAX_DELAY);
1a00033e:	4c09      	ldr	r4, [pc, #36]	; (1a000364 <vTarea3+0x28>)
1a000340:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000344:	6820      	ldr	r0, [r4, #0]
1a000346:	f000 fd67 	bl	1a000e18 <xQueueSemaphoreTake>
		printf("Tarea 3\r\n");
1a00034a:	4807      	ldr	r0, [pc, #28]	; (1a000368 <vTarea3+0x2c>)
1a00034c:	f004 f950 	bl	1a0045f0 <puts>
		xSemaphoreGive(xSem_puerto_serie);
1a000350:	2300      	movs	r3, #0
1a000352:	461a      	mov	r2, r3
1a000354:	4619      	mov	r1, r3
1a000356:	6820      	ldr	r0, [r4, #0]
1a000358:	f000 fb88 	bl	1a000a6c <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(PERIOD_TAREA1Y3));
1a00035c:	2050      	movs	r0, #80	; 0x50
1a00035e:	f001 fa53 	bl	1a001808 <vTaskDelay>
	while (1)
1a000362:	e7ec      	b.n	1a00033e <vTarea3+0x2>
1a000364:	10002bc0 	.word	0x10002bc0
1a000368:	1a004e30 	.word	0x1a004e30

1a00036c <vTarea2>:
{
1a00036c:	b508      	push	{r3, lr}
		vTaskDelay(pdMS_TO_TICKS(DELAY_TAREA2));
1a00036e:	2014      	movs	r0, #20
1a000370:	f001 fa4a 	bl	1a001808 <vTaskDelay>
		Board_LED_Toggle(LED_ROJO);
1a000374:	2003      	movs	r0, #3
1a000376:	f002 f9b7 	bl	1a0026e8 <Board_LED_Toggle>
		vTaskDelay(pdMS_TO_TICKS(DELAY_TAREA2_BUSY));
1a00037a:	2064      	movs	r0, #100	; 0x64
1a00037c:	f001 fa44 	bl	1a001808 <vTaskDelay>
	while (1)
1a000380:	e7f5      	b.n	1a00036e <vTarea2+0x2>
1a000382:	Address 0x000000001a000382 is out of bounds.


1a000384 <main>:
{
1a000384:	b510      	push	{r4, lr}
1a000386:	b082      	sub	sp, #8
	initHardware();
1a000388:	f7ff ffba 	bl	1a000300 <initHardware>
	printf("Ejercicio 3 - RTOS 2\r\n");
1a00038c:	4817      	ldr	r0, [pc, #92]	; (1a0003ec <main+0x68>)
1a00038e:	f004 f92f 	bl	1a0045f0 <puts>
	xSem_puerto_serie = xSemaphoreCreateBinary();
1a000392:	2203      	movs	r2, #3
1a000394:	2100      	movs	r1, #0
1a000396:	2001      	movs	r0, #1
1a000398:	f000 fb40 	bl	1a000a1c <xQueueGenericCreate>
1a00039c:	4b14      	ldr	r3, [pc, #80]	; (1a0003f0 <main+0x6c>)
1a00039e:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(xSem_puerto_serie);
1a0003a0:	2300      	movs	r3, #0
1a0003a2:	461a      	mov	r2, r3
1a0003a4:	4619      	mov	r1, r3
1a0003a6:	f000 fb61 	bl	1a000a6c <xQueueGenericSend>
	xTaskCreate(vTarea1, (const char *)"tarea1", configMINIMAL_STACK_SIZE, NULL, PRIO_TAREA1, NULL);
1a0003aa:	2400      	movs	r4, #0
1a0003ac:	9401      	str	r4, [sp, #4]
1a0003ae:	2303      	movs	r3, #3
1a0003b0:	9300      	str	r3, [sp, #0]
1a0003b2:	4623      	mov	r3, r4
1a0003b4:	2264      	movs	r2, #100	; 0x64
1a0003b6:	490f      	ldr	r1, [pc, #60]	; (1a0003f4 <main+0x70>)
1a0003b8:	480f      	ldr	r0, [pc, #60]	; (1a0003f8 <main+0x74>)
1a0003ba:	f001 f890 	bl	1a0014de <xTaskCreate>
	xTaskCreate(vTarea2, (const char *)"tarea2", configMINIMAL_STACK_SIZE, NULL, PRIO_TAREA2, NULL);
1a0003be:	9401      	str	r4, [sp, #4]
1a0003c0:	2302      	movs	r3, #2
1a0003c2:	9300      	str	r3, [sp, #0]
1a0003c4:	4623      	mov	r3, r4
1a0003c6:	2264      	movs	r2, #100	; 0x64
1a0003c8:	490c      	ldr	r1, [pc, #48]	; (1a0003fc <main+0x78>)
1a0003ca:	480d      	ldr	r0, [pc, #52]	; (1a000400 <main+0x7c>)
1a0003cc:	f001 f887 	bl	1a0014de <xTaskCreate>
	xTaskCreate(vTarea3, (const char *)"tarea3", configMINIMAL_STACK_SIZE, NULL, PRIO_TAREA3, NULL);
1a0003d0:	9401      	str	r4, [sp, #4]
1a0003d2:	2301      	movs	r3, #1
1a0003d4:	9300      	str	r3, [sp, #0]
1a0003d6:	4623      	mov	r3, r4
1a0003d8:	2264      	movs	r2, #100	; 0x64
1a0003da:	490a      	ldr	r1, [pc, #40]	; (1a000404 <main+0x80>)
1a0003dc:	480a      	ldr	r0, [pc, #40]	; (1a000408 <main+0x84>)
1a0003de:	f001 f87e 	bl	1a0014de <xTaskCreate>
	vTaskStartScheduler();
1a0003e2:	f001 f8b1 	bl	1a001548 <vTaskStartScheduler>
}
1a0003e6:	4620      	mov	r0, r4
1a0003e8:	b002      	add	sp, #8
1a0003ea:	bd10      	pop	{r4, pc}
1a0003ec:	1a004e3c 	.word	0x1a004e3c
1a0003f0:	10002bc0 	.word	0x10002bc0
1a0003f4:	1a004e54 	.word	0x1a004e54
1a0003f8:	1a00030d 	.word	0x1a00030d
1a0003fc:	1a004e5c 	.word	0x1a004e5c
1a000400:	1a00036d 	.word	0x1a00036d
1a000404:	1a004e64 	.word	0x1a004e64
1a000408:	1a00033d 	.word	0x1a00033d

1a00040c <initialise_monitor_handles>:
}
1a00040c:	4770      	bx	lr
1a00040e:	Address 0x000000001a00040e is out of bounds.


1a000410 <Reset_Handler>:
void Reset_Handler(void) {
1a000410:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000412:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000414:	4b19      	ldr	r3, [pc, #100]	; (1a00047c <Reset_Handler+0x6c>)
1a000416:	4a1a      	ldr	r2, [pc, #104]	; (1a000480 <Reset_Handler+0x70>)
1a000418:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00041a:	3304      	adds	r3, #4
1a00041c:	4a19      	ldr	r2, [pc, #100]	; (1a000484 <Reset_Handler+0x74>)
1a00041e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000420:	2300      	movs	r3, #0
1a000422:	e005      	b.n	1a000430 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000424:	4a18      	ldr	r2, [pc, #96]	; (1a000488 <Reset_Handler+0x78>)
1a000426:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00042a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00042e:	3301      	adds	r3, #1
1a000430:	2b07      	cmp	r3, #7
1a000432:	d9f7      	bls.n	1a000424 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000434:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000436:	4b15      	ldr	r3, [pc, #84]	; (1a00048c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000438:	e007      	b.n	1a00044a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00043a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00043e:	689a      	ldr	r2, [r3, #8]
1a000440:	6859      	ldr	r1, [r3, #4]
1a000442:	6818      	ldr	r0, [r3, #0]
1a000444:	f7ff fea1 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000448:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00044a:	4a11      	ldr	r2, [pc, #68]	; (1a000490 <Reset_Handler+0x80>)
1a00044c:	4293      	cmp	r3, r2
1a00044e:	d3f4      	bcc.n	1a00043a <Reset_Handler+0x2a>
1a000450:	e006      	b.n	1a000460 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000452:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000454:	6859      	ldr	r1, [r3, #4]
1a000456:	f854 0b08 	ldr.w	r0, [r4], #8
1a00045a:	f7ff fea5 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00045e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000460:	4a0c      	ldr	r2, [pc, #48]	; (1a000494 <Reset_Handler+0x84>)
1a000462:	4293      	cmp	r3, r2
1a000464:	d3f5      	bcc.n	1a000452 <Reset_Handler+0x42>
    SystemInit();
1a000466:	f002 fef1 	bl	1a00324c <SystemInit>
    __libc_init_array();
1a00046a:	f003 fac5 	bl	1a0039f8 <__libc_init_array>
    initialise_monitor_handles();
1a00046e:	f7ff ffcd 	bl	1a00040c <initialise_monitor_handles>
    main();
1a000472:	f7ff ff87 	bl	1a000384 <main>
        __asm__ volatile("wfi");
1a000476:	bf30      	wfi
    while (1) {
1a000478:	e7fd      	b.n	1a000476 <Reset_Handler+0x66>
1a00047a:	bf00      	nop
1a00047c:	40053100 	.word	0x40053100
1a000480:	10df1000 	.word	0x10df1000
1a000484:	01dff7ff 	.word	0x01dff7ff
1a000488:	e000e280 	.word	0xe000e280
1a00048c:	1a000114 	.word	0x1a000114
1a000490:	1a000150 	.word	0x1a000150
1a000494:	1a000178 	.word	0x1a000178

1a000498 <_fini>:
void _fini(void) {}
1a000498:	4770      	bx	lr

1a00049a <_init>:
void _init(void) {}
1a00049a:	4770      	bx	lr

1a00049c <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00049c:	2309      	movs	r3, #9
1a00049e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0004a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004a4:	4770      	bx	lr

1a0004a6 <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0004a6:	2358      	movs	r3, #88	; 0x58
1a0004a8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0004aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004ae:	4770      	bx	lr

1a0004b0 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0004b0:	2902      	cmp	r1, #2
1a0004b2:	d904      	bls.n	1a0004be <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a0004b4:	2309      	movs	r3, #9
1a0004b6:	6003      	str	r3, [r0, #0]
       return -1;
1a0004b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004bc:	4770      	bx	lr
       return 1;
1a0004be:	2001      	movs	r0, #1
   }
}
1a0004c0:	4770      	bx	lr

1a0004c2 <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0004c2:	2358      	movs	r3, #88	; 0x58
1a0004c4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0004c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0004ca:	4770      	bx	lr

1a0004cc <_read_r>:
       SET_ERR(ENODEV);
       return -1;
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0004cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0004d0:	4606      	mov	r6, r0
  size_t i = 0;
  switch (fd) {
1a0004d2:	2902      	cmp	r1, #2
1a0004d4:	d81c      	bhi.n	1a000510 <_read_r+0x44>
1a0004d6:	4617      	mov	r7, r2
1a0004d8:	461d      	mov	r5, r3
  size_t i = 0;
1a0004da:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0004dc:	42ac      	cmp	r4, r5
1a0004de:	d211      	bcs.n	1a000504 <_read_r+0x38>
         int c = __stdio_getchar();
1a0004e0:	f002 f92b 	bl	1a00273a <__stdio_getchar>
         if( c != -1 ){
1a0004e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0004e8:	d0f8      	beq.n	1a0004dc <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0004ea:	f104 0801 	add.w	r8, r4, #1
1a0004ee:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a0004f0:	280d      	cmp	r0, #13
1a0004f2:	d003      	beq.n	1a0004fc <_read_r+0x30>
1a0004f4:	280a      	cmp	r0, #10
1a0004f6:	d001      	beq.n	1a0004fc <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a0004f8:	4644      	mov	r4, r8
1a0004fa:	e7ef      	b.n	1a0004dc <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a0004fc:	f002 f91d 	bl	1a00273a <__stdio_getchar>
               return i;
1a000500:	4640      	mov	r0, r8
1a000502:	e003      	b.n	1a00050c <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000504:	2313      	movs	r3, #19
1a000506:	6033      	str	r3, [r6, #0]
      return -1;
1a000508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a00050c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000510:	2313      	movs	r3, #19
1a000512:	6003      	str	r3, [r0, #0]
      return -1;
1a000514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000518:	e7f8      	b.n	1a00050c <_read_r+0x40>

1a00051a <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00051a:	2902      	cmp	r1, #2
1a00051c:	d80c      	bhi.n	1a000538 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a00051e:	b570      	push	{r4, r5, r6, lr}
1a000520:	4616      	mov	r6, r2
1a000522:	461d      	mov	r5, r3
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000524:	2400      	movs	r4, #0
1a000526:	42ac      	cmp	r4, r5
1a000528:	d204      	bcs.n	1a000534 <_write_r+0x1a>
           __stdio_putchar(((char*) b)[i]);
1a00052a:	5d30      	ldrb	r0, [r6, r4]
1a00052c:	f002 f900 	bl	1a002730 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000530:	3401      	adds	r4, #1
1a000532:	e7f8      	b.n	1a000526 <_write_r+0xc>
       return n;
1a000534:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000536:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000538:	2313      	movs	r3, #19
1a00053a:	6003      	str	r3, [r0, #0]
       return -1;
1a00053c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000540:	4770      	bx	lr
1a000542:	Address 0x000000001a000542 is out of bounds.


1a000544 <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000544:	4b05      	ldr	r3, [pc, #20]	; (1a00055c <_sbrk_r+0x18>)
1a000546:	681b      	ldr	r3, [r3, #0]
1a000548:	b123      	cbz	r3, 1a000554 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00054a:	4b04      	ldr	r3, [pc, #16]	; (1a00055c <_sbrk_r+0x18>)
1a00054c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00054e:	4401      	add	r1, r0
1a000550:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000552:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000554:	4b01      	ldr	r3, [pc, #4]	; (1a00055c <_sbrk_r+0x18>)
1a000556:	4a02      	ldr	r2, [pc, #8]	; (1a000560 <_sbrk_r+0x1c>)
1a000558:	601a      	str	r2, [r3, #0]
1a00055a:	e7f6      	b.n	1a00054a <_sbrk_r+0x6>
1a00055c:	100000a0 	.word	0x100000a0
1a000560:	10002c0c 	.word	0x10002c0c

1a000564 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000564:	4a12      	ldr	r2, [pc, #72]	; (1a0005b0 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000566:	f012 0f07 	tst.w	r2, #7
1a00056a:	d01e      	beq.n	1a0005aa <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a00056c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a00056e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000572:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000576:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000578:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a00057a:	480e      	ldr	r0, [pc, #56]	; (1a0005b4 <prvHeapInit+0x50>)
1a00057c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a00057e:	2100      	movs	r1, #0
1a000580:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000582:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000584:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000586:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a00058a:	480b      	ldr	r0, [pc, #44]	; (1a0005b8 <prvHeapInit+0x54>)
1a00058c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a00058e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000590:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000592:	1a99      	subs	r1, r3, r2
1a000594:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000596:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000598:	4b08      	ldr	r3, [pc, #32]	; (1a0005bc <prvHeapInit+0x58>)
1a00059a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a00059c:	4b08      	ldr	r3, [pc, #32]	; (1a0005c0 <prvHeapInit+0x5c>)
1a00059e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a0005a0:	4b08      	ldr	r3, [pc, #32]	; (1a0005c4 <prvHeapInit+0x60>)
1a0005a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a0005a6:	601a      	str	r2, [r3, #0]
}
1a0005a8:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a0005aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a0005ae:	e7e4      	b.n	1a00057a <prvHeapInit+0x16>
1a0005b0:	100000a8 	.word	0x100000a8
1a0005b4:	100020b4 	.word	0x100020b4
1a0005b8:	100000a4 	.word	0x100000a4
1a0005bc:	100020b0 	.word	0x100020b0
1a0005c0:	100020ac 	.word	0x100020ac
1a0005c4:	100020a8 	.word	0x100020a8

1a0005c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a0005c8:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a0005ca:	4b13      	ldr	r3, [pc, #76]	; (1a000618 <prvInsertBlockIntoFreeList+0x50>)
1a0005cc:	461a      	mov	r2, r3
1a0005ce:	681b      	ldr	r3, [r3, #0]
1a0005d0:	4283      	cmp	r3, r0
1a0005d2:	d3fb      	bcc.n	1a0005cc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a0005d4:	6851      	ldr	r1, [r2, #4]
1a0005d6:	1854      	adds	r4, r2, r1
1a0005d8:	4284      	cmp	r4, r0
1a0005da:	d00a      	beq.n	1a0005f2 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a0005dc:	6841      	ldr	r1, [r0, #4]
1a0005de:	1844      	adds	r4, r0, r1
1a0005e0:	42a3      	cmp	r3, r4
1a0005e2:	d00b      	beq.n	1a0005fc <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a0005e4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a0005e6:	4290      	cmp	r0, r2
1a0005e8:	d000      	beq.n	1a0005ec <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a0005ea:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a0005ec:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0005f0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a0005f2:	6840      	ldr	r0, [r0, #4]
1a0005f4:	4401      	add	r1, r0
1a0005f6:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
1a0005f8:	4610      	mov	r0, r2
1a0005fa:	e7ef      	b.n	1a0005dc <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a0005fc:	4c07      	ldr	r4, [pc, #28]	; (1a00061c <prvInsertBlockIntoFreeList+0x54>)
1a0005fe:	6824      	ldr	r4, [r4, #0]
1a000600:	42a3      	cmp	r3, r4
1a000602:	d006      	beq.n	1a000612 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a000604:	685b      	ldr	r3, [r3, #4]
1a000606:	4419      	add	r1, r3
1a000608:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a00060a:	6813      	ldr	r3, [r2, #0]
1a00060c:	681b      	ldr	r3, [r3, #0]
1a00060e:	6003      	str	r3, [r0, #0]
1a000610:	e7e9      	b.n	1a0005e6 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a000612:	6004      	str	r4, [r0, #0]
1a000614:	e7e7      	b.n	1a0005e6 <prvInsertBlockIntoFreeList+0x1e>
1a000616:	bf00      	nop
1a000618:	100020b4 	.word	0x100020b4
1a00061c:	100000a4 	.word	0x100000a4

1a000620 <pvPortMalloc>:
{
1a000620:	b570      	push	{r4, r5, r6, lr}
1a000622:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a000624:	f000 ffda 	bl	1a0015dc <vTaskSuspendAll>
		if( pxEnd == NULL )
1a000628:	4b39      	ldr	r3, [pc, #228]	; (1a000710 <pvPortMalloc+0xf0>)
1a00062a:	681b      	ldr	r3, [r3, #0]
1a00062c:	b19b      	cbz	r3, 1a000656 <pvPortMalloc+0x36>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a00062e:	4b39      	ldr	r3, [pc, #228]	; (1a000714 <pvPortMalloc+0xf4>)
1a000630:	681b      	ldr	r3, [r3, #0]
1a000632:	421c      	tst	r4, r3
1a000634:	d112      	bne.n	1a00065c <pvPortMalloc+0x3c>
			if( xWantedSize > 0 )
1a000636:	b134      	cbz	r4, 1a000646 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
1a000638:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a00063a:	f014 0f07 	tst.w	r4, #7
1a00063e:	d002      	beq.n	1a000646 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000640:	f024 0407 	bic.w	r4, r4, #7
1a000644:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a000646:	b1d4      	cbz	r4, 1a00067e <pvPortMalloc+0x5e>
1a000648:	4b33      	ldr	r3, [pc, #204]	; (1a000718 <pvPortMalloc+0xf8>)
1a00064a:	681b      	ldr	r3, [r3, #0]
1a00064c:	42a3      	cmp	r3, r4
1a00064e:	d31a      	bcc.n	1a000686 <pvPortMalloc+0x66>
				pxBlock = xStart.pxNextFreeBlock;
1a000650:	4b32      	ldr	r3, [pc, #200]	; (1a00071c <pvPortMalloc+0xfc>)
1a000652:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000654:	e01d      	b.n	1a000692 <pvPortMalloc+0x72>
			prvHeapInit();
1a000656:	f7ff ff85 	bl	1a000564 <prvHeapInit>
1a00065a:	e7e8      	b.n	1a00062e <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
1a00065c:	f001 f858 	bl	1a001710 <xTaskResumeAll>
void *pvReturn = NULL;
1a000660:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a000662:	f000 fd5b 	bl	1a00111c <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a000666:	f016 0f07 	tst.w	r6, #7
1a00066a:	d04f      	beq.n	1a00070c <pvPortMalloc+0xec>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00066c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000670:	f383 8811 	msr	BASEPRI, r3
1a000674:	f3bf 8f6f 	isb	sy
1a000678:	f3bf 8f4f 	dsb	sy
1a00067c:	e7fe      	b.n	1a00067c <pvPortMalloc+0x5c>
	( void ) xTaskResumeAll();
1a00067e:	f001 f847 	bl	1a001710 <xTaskResumeAll>
void *pvReturn = NULL;
1a000682:	2600      	movs	r6, #0
1a000684:	e7ed      	b.n	1a000662 <pvPortMalloc+0x42>
	( void ) xTaskResumeAll();
1a000686:	f001 f843 	bl	1a001710 <xTaskResumeAll>
void *pvReturn = NULL;
1a00068a:	2600      	movs	r6, #0
1a00068c:	e7e9      	b.n	1a000662 <pvPortMalloc+0x42>
					pxPreviousBlock = pxBlock;
1a00068e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a000690:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a000692:	686a      	ldr	r2, [r5, #4]
1a000694:	42a2      	cmp	r2, r4
1a000696:	d202      	bcs.n	1a00069e <pvPortMalloc+0x7e>
1a000698:	682a      	ldr	r2, [r5, #0]
1a00069a:	2a00      	cmp	r2, #0
1a00069c:	d1f7      	bne.n	1a00068e <pvPortMalloc+0x6e>
				if( pxBlock != pxEnd )
1a00069e:	4a1c      	ldr	r2, [pc, #112]	; (1a000710 <pvPortMalloc+0xf0>)
1a0006a0:	6812      	ldr	r2, [r2, #0]
1a0006a2:	42aa      	cmp	r2, r5
1a0006a4:	d014      	beq.n	1a0006d0 <pvPortMalloc+0xb0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a0006a6:	681e      	ldr	r6, [r3, #0]
1a0006a8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a0006aa:	682a      	ldr	r2, [r5, #0]
1a0006ac:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a0006ae:	686b      	ldr	r3, [r5, #4]
1a0006b0:	1b1b      	subs	r3, r3, r4
1a0006b2:	2b10      	cmp	r3, #16
1a0006b4:	d914      	bls.n	1a0006e0 <pvPortMalloc+0xc0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a0006b6:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0006b8:	f010 0f07 	tst.w	r0, #7
1a0006bc:	d00c      	beq.n	1a0006d8 <pvPortMalloc+0xb8>
1a0006be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0006c2:	f383 8811 	msr	BASEPRI, r3
1a0006c6:	f3bf 8f6f 	isb	sy
1a0006ca:	f3bf 8f4f 	dsb	sy
1a0006ce:	e7fe      	b.n	1a0006ce <pvPortMalloc+0xae>
	( void ) xTaskResumeAll();
1a0006d0:	f001 f81e 	bl	1a001710 <xTaskResumeAll>
void *pvReturn = NULL;
1a0006d4:	2600      	movs	r6, #0
1a0006d6:	e7c4      	b.n	1a000662 <pvPortMalloc+0x42>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a0006d8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a0006da:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a0006dc:	f7ff ff74 	bl	1a0005c8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a0006e0:	686a      	ldr	r2, [r5, #4]
1a0006e2:	490d      	ldr	r1, [pc, #52]	; (1a000718 <pvPortMalloc+0xf8>)
1a0006e4:	680b      	ldr	r3, [r1, #0]
1a0006e6:	1a9b      	subs	r3, r3, r2
1a0006e8:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a0006ea:	490d      	ldr	r1, [pc, #52]	; (1a000720 <pvPortMalloc+0x100>)
1a0006ec:	6809      	ldr	r1, [r1, #0]
1a0006ee:	428b      	cmp	r3, r1
1a0006f0:	d201      	bcs.n	1a0006f6 <pvPortMalloc+0xd6>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a0006f2:	490b      	ldr	r1, [pc, #44]	; (1a000720 <pvPortMalloc+0x100>)
1a0006f4:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a0006f6:	4b07      	ldr	r3, [pc, #28]	; (1a000714 <pvPortMalloc+0xf4>)
1a0006f8:	681b      	ldr	r3, [r3, #0]
1a0006fa:	4313      	orrs	r3, r2
1a0006fc:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a0006fe:	2300      	movs	r3, #0
1a000700:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a000702:	f001 f805 	bl	1a001710 <xTaskResumeAll>
		if( pvReturn == NULL )
1a000706:	2e00      	cmp	r6, #0
1a000708:	d1ad      	bne.n	1a000666 <pvPortMalloc+0x46>
1a00070a:	e7aa      	b.n	1a000662 <pvPortMalloc+0x42>
}
1a00070c:	4630      	mov	r0, r6
1a00070e:	bd70      	pop	{r4, r5, r6, pc}
1a000710:	100000a4 	.word	0x100000a4
1a000714:	100020a8 	.word	0x100020a8
1a000718:	100020ac 	.word	0x100020ac
1a00071c:	100020b4 	.word	0x100020b4
1a000720:	100020b0 	.word	0x100020b0

1a000724 <vPortFree>:
	if( pv != NULL )
1a000724:	b380      	cbz	r0, 1a000788 <vPortFree+0x64>
{
1a000726:	b538      	push	{r3, r4, r5, lr}
1a000728:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a00072a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a00072e:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a000732:	4a16      	ldr	r2, [pc, #88]	; (1a00078c <vPortFree+0x68>)
1a000734:	6812      	ldr	r2, [r2, #0]
1a000736:	4213      	tst	r3, r2
1a000738:	d108      	bne.n	1a00074c <vPortFree+0x28>
1a00073a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00073e:	f383 8811 	msr	BASEPRI, r3
1a000742:	f3bf 8f6f 	isb	sy
1a000746:	f3bf 8f4f 	dsb	sy
1a00074a:	e7fe      	b.n	1a00074a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a00074c:	f850 1c08 	ldr.w	r1, [r0, #-8]
1a000750:	b141      	cbz	r1, 1a000764 <vPortFree+0x40>
1a000752:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000756:	f383 8811 	msr	BASEPRI, r3
1a00075a:	f3bf 8f6f 	isb	sy
1a00075e:	f3bf 8f4f 	dsb	sy
1a000762:	e7fe      	b.n	1a000762 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a000764:	ea23 0302 	bic.w	r3, r3, r2
1a000768:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
1a00076c:	f000 ff36 	bl	1a0015dc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a000770:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a000774:	4a06      	ldr	r2, [pc, #24]	; (1a000790 <vPortFree+0x6c>)
1a000776:	6813      	ldr	r3, [r2, #0]
1a000778:	440b      	add	r3, r1
1a00077a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a00077c:	4628      	mov	r0, r5
1a00077e:	f7ff ff23 	bl	1a0005c8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a000782:	f000 ffc5 	bl	1a001710 <xTaskResumeAll>
}
1a000786:	bd38      	pop	{r3, r4, r5, pc}
1a000788:	4770      	bx	lr
1a00078a:	bf00      	nop
1a00078c:	100020a8 	.word	0x100020a8
1a000790:	100020ac 	.word	0x100020ac

1a000794 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
1a000794:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
1a000796:	6a40      	ldr	r0, [r0, #36]	; 0x24
1a000798:	b118      	cbz	r0, 1a0007a2 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
1a00079a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a00079c:	6818      	ldr	r0, [r3, #0]
1a00079e:	f1c0 0007 	rsb	r0, r0, #7
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
1a0007a2:	4770      	bx	lr

1a0007a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0007a4:	b510      	push	{r4, lr}
1a0007a6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0007a8:	f001 fd3c 	bl	1a002224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0007ac:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0007ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0007b0:	429a      	cmp	r2, r3
1a0007b2:	d004      	beq.n	1a0007be <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0007b4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0007b6:	f001 fd57 	bl	1a002268 <vPortExitCritical>

	return xReturn;
}
1a0007ba:	4620      	mov	r0, r4
1a0007bc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0007be:	2401      	movs	r4, #1
1a0007c0:	e7f9      	b.n	1a0007b6 <prvIsQueueFull+0x12>

1a0007c2 <prvIsQueueEmpty>:
{
1a0007c2:	b510      	push	{r4, lr}
1a0007c4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0007c6:	f001 fd2d 	bl	1a002224 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0007ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0007cc:	b923      	cbnz	r3, 1a0007d8 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
1a0007ce:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
1a0007d0:	f001 fd4a 	bl	1a002268 <vPortExitCritical>
}
1a0007d4:	4620      	mov	r0, r4
1a0007d6:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
1a0007d8:	2400      	movs	r4, #0
1a0007da:	e7f9      	b.n	1a0007d0 <prvIsQueueEmpty+0xe>

1a0007dc <prvCopyDataToQueue>:
{
1a0007dc:	b570      	push	{r4, r5, r6, lr}
1a0007de:	4604      	mov	r4, r0
1a0007e0:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0007e2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0007e4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0007e6:	b95a      	cbnz	r2, 1a000800 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0007e8:	6803      	ldr	r3, [r0, #0]
1a0007ea:	b11b      	cbz	r3, 1a0007f4 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0007ec:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0007ee:	3601      	adds	r6, #1
1a0007f0:	63a6      	str	r6, [r4, #56]	; 0x38
}
1a0007f2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a0007f4:	6840      	ldr	r0, [r0, #4]
1a0007f6:	f001 f9cd 	bl	1a001b94 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a0007fa:	2300      	movs	r3, #0
1a0007fc:	6063      	str	r3, [r4, #4]
1a0007fe:	e7f6      	b.n	1a0007ee <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a000800:	b96d      	cbnz	r5, 1a00081e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000802:	6880      	ldr	r0, [r0, #8]
1a000804:	f003 f91c 	bl	1a003a40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000808:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00080a:	68a3      	ldr	r3, [r4, #8]
1a00080c:	4413      	add	r3, r2
1a00080e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000810:	6862      	ldr	r2, [r4, #4]
1a000812:	4293      	cmp	r3, r2
1a000814:	d319      	bcc.n	1a00084a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000816:	6823      	ldr	r3, [r4, #0]
1a000818:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a00081a:	4628      	mov	r0, r5
1a00081c:	e7e7      	b.n	1a0007ee <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00081e:	68c0      	ldr	r0, [r0, #12]
1a000820:	f003 f90e 	bl	1a003a40 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000824:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a000826:	4251      	negs	r1, r2
1a000828:	68e3      	ldr	r3, [r4, #12]
1a00082a:	1a9b      	subs	r3, r3, r2
1a00082c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00082e:	6822      	ldr	r2, [r4, #0]
1a000830:	4293      	cmp	r3, r2
1a000832:	d202      	bcs.n	1a00083a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000834:	6863      	ldr	r3, [r4, #4]
1a000836:	440b      	add	r3, r1
1a000838:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a00083a:	2d02      	cmp	r5, #2
1a00083c:	d001      	beq.n	1a000842 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00083e:	2000      	movs	r0, #0
1a000840:	e7d5      	b.n	1a0007ee <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000842:	b126      	cbz	r6, 1a00084e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a000844:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
1a000846:	2000      	movs	r0, #0
1a000848:	e7d1      	b.n	1a0007ee <prvCopyDataToQueue+0x12>
1a00084a:	4628      	mov	r0, r5
1a00084c:	e7cf      	b.n	1a0007ee <prvCopyDataToQueue+0x12>
1a00084e:	2000      	movs	r0, #0
1a000850:	e7cd      	b.n	1a0007ee <prvCopyDataToQueue+0x12>

1a000852 <prvCopyDataFromQueue>:
{
1a000852:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000854:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000856:	b16a      	cbz	r2, 1a000874 <prvCopyDataFromQueue+0x22>
{
1a000858:	b510      	push	{r4, lr}
1a00085a:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a00085c:	68d9      	ldr	r1, [r3, #12]
1a00085e:	4411      	add	r1, r2
1a000860:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000862:	685c      	ldr	r4, [r3, #4]
1a000864:	42a1      	cmp	r1, r4
1a000866:	d301      	bcc.n	1a00086c <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000868:	6819      	ldr	r1, [r3, #0]
1a00086a:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a00086c:	68d9      	ldr	r1, [r3, #12]
1a00086e:	f003 f8e7 	bl	1a003a40 <memcpy>
}
1a000872:	bd10      	pop	{r4, pc}
1a000874:	4770      	bx	lr

1a000876 <prvUnlockQueue>:
{
1a000876:	b538      	push	{r3, r4, r5, lr}
1a000878:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a00087a:	f001 fcd3 	bl	1a002224 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00087e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000882:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000884:	e003      	b.n	1a00088e <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a000886:	f001 f911 	bl	1a001aac <vTaskMissedYield>
			--cTxLock;
1a00088a:	3c01      	subs	r4, #1
1a00088c:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00088e:	2c00      	cmp	r4, #0
1a000890:	dd08      	ble.n	1a0008a4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000892:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000894:	b133      	cbz	r3, 1a0008a4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000896:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a00089a:	f001 f873 	bl	1a001984 <xTaskRemoveFromEventList>
1a00089e:	2800      	cmp	r0, #0
1a0008a0:	d0f3      	beq.n	1a00088a <prvUnlockQueue+0x14>
1a0008a2:	e7f0      	b.n	1a000886 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0008a4:	23ff      	movs	r3, #255	; 0xff
1a0008a6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0008aa:	f001 fcdd 	bl	1a002268 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0008ae:	f001 fcb9 	bl	1a002224 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0008b2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0008b6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0008b8:	e003      	b.n	1a0008c2 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0008ba:	f001 f8f7 	bl	1a001aac <vTaskMissedYield>
				--cRxLock;
1a0008be:	3c01      	subs	r4, #1
1a0008c0:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0008c2:	2c00      	cmp	r4, #0
1a0008c4:	dd08      	ble.n	1a0008d8 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0008c6:	692b      	ldr	r3, [r5, #16]
1a0008c8:	b133      	cbz	r3, 1a0008d8 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0008ca:	f105 0010 	add.w	r0, r5, #16
1a0008ce:	f001 f859 	bl	1a001984 <xTaskRemoveFromEventList>
1a0008d2:	2800      	cmp	r0, #0
1a0008d4:	d0f3      	beq.n	1a0008be <prvUnlockQueue+0x48>
1a0008d6:	e7f0      	b.n	1a0008ba <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0008d8:	23ff      	movs	r3, #255	; 0xff
1a0008da:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0008de:	f001 fcc3 	bl	1a002268 <vPortExitCritical>
}
1a0008e2:	bd38      	pop	{r3, r4, r5, pc}

1a0008e4 <xQueueGenericReset>:
{
1a0008e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0008e6:	b1e0      	cbz	r0, 1a000922 <xQueueGenericReset+0x3e>
1a0008e8:	460d      	mov	r5, r1
1a0008ea:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0008ec:	f001 fc9a 	bl	1a002224 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a0008f0:	6821      	ldr	r1, [r4, #0]
1a0008f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0008f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0008f6:	fb03 1002 	mla	r0, r3, r2, r1
1a0008fa:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a0008fc:	2000      	movs	r0, #0
1a0008fe:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000900:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000902:	3a01      	subs	r2, #1
1a000904:	fb02 1303 	mla	r3, r2, r3, r1
1a000908:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a00090a:	23ff      	movs	r3, #255	; 0xff
1a00090c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000910:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a000914:	b9ed      	cbnz	r5, 1a000952 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000916:	6923      	ldr	r3, [r4, #16]
1a000918:	b963      	cbnz	r3, 1a000934 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a00091a:	f001 fca5 	bl	1a002268 <vPortExitCritical>
}
1a00091e:	2001      	movs	r0, #1
1a000920:	bd38      	pop	{r3, r4, r5, pc}
1a000922:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000926:	f383 8811 	msr	BASEPRI, r3
1a00092a:	f3bf 8f6f 	isb	sy
1a00092e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000932:	e7fe      	b.n	1a000932 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000934:	f104 0010 	add.w	r0, r4, #16
1a000938:	f001 f824 	bl	1a001984 <xTaskRemoveFromEventList>
1a00093c:	2800      	cmp	r0, #0
1a00093e:	d0ec      	beq.n	1a00091a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
1a000940:	4b08      	ldr	r3, [pc, #32]	; (1a000964 <xQueueGenericReset+0x80>)
1a000942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000946:	601a      	str	r2, [r3, #0]
1a000948:	f3bf 8f4f 	dsb	sy
1a00094c:	f3bf 8f6f 	isb	sy
1a000950:	e7e3      	b.n	1a00091a <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000952:	f104 0010 	add.w	r0, r4, #16
1a000956:	f000 fb6e 	bl	1a001036 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00095a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00095e:	f000 fb6a 	bl	1a001036 <vListInitialise>
1a000962:	e7da      	b.n	1a00091a <xQueueGenericReset+0x36>
1a000964:	e000ed04 	.word	0xe000ed04

1a000968 <prvInitialiseNewQueue>:
{
1a000968:	b538      	push	{r3, r4, r5, lr}
1a00096a:	461d      	mov	r5, r3
1a00096c:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00096e:	460b      	mov	r3, r1
1a000970:	b949      	cbnz	r1, 1a000986 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000972:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a000974:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000976:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000978:	2101      	movs	r1, #1
1a00097a:	4620      	mov	r0, r4
1a00097c:	f7ff ffb2 	bl	1a0008e4 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a000980:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a000984:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000986:	6022      	str	r2, [r4, #0]
1a000988:	e7f4      	b.n	1a000974 <prvInitialiseNewQueue+0xc>

1a00098a <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00098a:	b940      	cbnz	r0, 1a00099e <xQueueGenericCreateStatic+0x14>
1a00098c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000990:	f383 8811 	msr	BASEPRI, r3
1a000994:	f3bf 8f6f 	isb	sy
1a000998:	f3bf 8f4f 	dsb	sy
1a00099c:	e7fe      	b.n	1a00099c <xQueueGenericCreateStatic+0x12>
	{
1a00099e:	b530      	push	{r4, r5, lr}
1a0009a0:	b085      	sub	sp, #20
1a0009a2:	461c      	mov	r4, r3
1a0009a4:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
1a0009a6:	b153      	cbz	r3, 1a0009be <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a0009a8:	b192      	cbz	r2, 1a0009d0 <xQueueGenericCreateStatic+0x46>
1a0009aa:	b989      	cbnz	r1, 1a0009d0 <xQueueGenericCreateStatic+0x46>
1a0009ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009b0:	f383 8811 	msr	BASEPRI, r3
1a0009b4:	f3bf 8f6f 	isb	sy
1a0009b8:	f3bf 8f4f 	dsb	sy
1a0009bc:	e7fe      	b.n	1a0009bc <xQueueGenericCreateStatic+0x32>
1a0009be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009c2:	f383 8811 	msr	BASEPRI, r3
1a0009c6:	f3bf 8f6f 	isb	sy
1a0009ca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
1a0009ce:	e7fe      	b.n	1a0009ce <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0009d0:	b16a      	cbz	r2, 1a0009ee <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0009d2:	2350      	movs	r3, #80	; 0x50
1a0009d4:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0009d6:	9b03      	ldr	r3, [sp, #12]
1a0009d8:	2b50      	cmp	r3, #80	; 0x50
1a0009da:	d013      	beq.n	1a000a04 <xQueueGenericCreateStatic+0x7a>
1a0009dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009e0:	f383 8811 	msr	BASEPRI, r3
1a0009e4:	f3bf 8f6f 	isb	sy
1a0009e8:	f3bf 8f4f 	dsb	sy
1a0009ec:	e7fe      	b.n	1a0009ec <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0009ee:	2900      	cmp	r1, #0
1a0009f0:	d0ef      	beq.n	1a0009d2 <xQueueGenericCreateStatic+0x48>
1a0009f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0009f6:	f383 8811 	msr	BASEPRI, r3
1a0009fa:	f3bf 8f6f 	isb	sy
1a0009fe:	f3bf 8f4f 	dsb	sy
1a000a02:	e7fe      	b.n	1a000a02 <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000a04:	2301      	movs	r3, #1
1a000a06:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000a0a:	9400      	str	r4, [sp, #0]
1a000a0c:	f89d 3020 	ldrb.w	r3, [sp, #32]
1a000a10:	4628      	mov	r0, r5
1a000a12:	f7ff ffa9 	bl	1a000968 <prvInitialiseNewQueue>
	}
1a000a16:	4620      	mov	r0, r4
1a000a18:	b005      	add	sp, #20
1a000a1a:	bd30      	pop	{r4, r5, pc}

1a000a1c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000a1c:	b940      	cbnz	r0, 1a000a30 <xQueueGenericCreate+0x14>
1a000a1e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a22:	f383 8811 	msr	BASEPRI, r3
1a000a26:	f3bf 8f6f 	isb	sy
1a000a2a:	f3bf 8f4f 	dsb	sy
1a000a2e:	e7fe      	b.n	1a000a2e <xQueueGenericCreate+0x12>
	{
1a000a30:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a32:	b083      	sub	sp, #12
1a000a34:	460c      	mov	r4, r1
1a000a36:	4616      	mov	r6, r2
1a000a38:	4607      	mov	r7, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a000a3a:	b1a1      	cbz	r1, 1a000a66 <xQueueGenericCreate+0x4a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000a3c:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a000a40:	3050      	adds	r0, #80	; 0x50
1a000a42:	f7ff fded 	bl	1a000620 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a000a46:	4605      	mov	r5, r0
1a000a48:	b150      	cbz	r0, 1a000a60 <xQueueGenericCreate+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a000a4a:	2300      	movs	r3, #0
1a000a4c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000a50:	9000      	str	r0, [sp, #0]
1a000a52:	4633      	mov	r3, r6
1a000a54:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a000a58:	4621      	mov	r1, r4
1a000a5a:	4638      	mov	r0, r7
1a000a5c:	f7ff ff84 	bl	1a000968 <prvInitialiseNewQueue>
	}
1a000a60:	4628      	mov	r0, r5
1a000a62:	b003      	add	sp, #12
1a000a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xQueueSizeInBytes = ( size_t ) 0;
1a000a66:	4608      	mov	r0, r1
1a000a68:	e7ea      	b.n	1a000a40 <xQueueGenericCreate+0x24>
1a000a6a:	Address 0x000000001a000a6a is out of bounds.


1a000a6c <xQueueGenericSend>:
{
1a000a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000a6e:	b085      	sub	sp, #20
1a000a70:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a000a72:	b188      	cbz	r0, 1a000a98 <xQueueGenericSend+0x2c>
1a000a74:	460e      	mov	r6, r1
1a000a76:	461d      	mov	r5, r3
1a000a78:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000a7a:	b1b1      	cbz	r1, 1a000aaa <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000a7c:	2d02      	cmp	r5, #2
1a000a7e:	d120      	bne.n	1a000ac2 <xQueueGenericSend+0x56>
1a000a80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000a82:	2b01      	cmp	r3, #1
1a000a84:	d01d      	beq.n	1a000ac2 <xQueueGenericSend+0x56>
1a000a86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a8a:	f383 8811 	msr	BASEPRI, r3
1a000a8e:	f3bf 8f6f 	isb	sy
1a000a92:	f3bf 8f4f 	dsb	sy
1a000a96:	e7fe      	b.n	1a000a96 <xQueueGenericSend+0x2a>
1a000a98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000a9c:	f383 8811 	msr	BASEPRI, r3
1a000aa0:	f3bf 8f6f 	isb	sy
1a000aa4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000aa8:	e7fe      	b.n	1a000aa8 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000aaa:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000aac:	2b00      	cmp	r3, #0
1a000aae:	d0e5      	beq.n	1a000a7c <xQueueGenericSend+0x10>
1a000ab0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ab4:	f383 8811 	msr	BASEPRI, r3
1a000ab8:	f3bf 8f6f 	isb	sy
1a000abc:	f3bf 8f4f 	dsb	sy
1a000ac0:	e7fe      	b.n	1a000ac0 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000ac2:	f000 fff9 	bl	1a001ab8 <xTaskGetSchedulerState>
1a000ac6:	4607      	mov	r7, r0
1a000ac8:	b958      	cbnz	r0, 1a000ae2 <xQueueGenericSend+0x76>
1a000aca:	9b01      	ldr	r3, [sp, #4]
1a000acc:	2b00      	cmp	r3, #0
1a000ace:	d044      	beq.n	1a000b5a <xQueueGenericSend+0xee>
1a000ad0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ad4:	f383 8811 	msr	BASEPRI, r3
1a000ad8:	f3bf 8f6f 	isb	sy
1a000adc:	f3bf 8f4f 	dsb	sy
1a000ae0:	e7fe      	b.n	1a000ae0 <xQueueGenericSend+0x74>
1a000ae2:	2700      	movs	r7, #0
1a000ae4:	e039      	b.n	1a000b5a <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000ae6:	462a      	mov	r2, r5
1a000ae8:	4631      	mov	r1, r6
1a000aea:	4620      	mov	r0, r4
1a000aec:	f7ff fe76 	bl	1a0007dc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000af0:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a000af2:	b96a      	cbnz	r2, 1a000b10 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
1a000af4:	b138      	cbz	r0, 1a000b06 <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
1a000af6:	4b3c      	ldr	r3, [pc, #240]	; (1a000be8 <xQueueGenericSend+0x17c>)
1a000af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000afc:	601a      	str	r2, [r3, #0]
1a000afe:	f3bf 8f4f 	dsb	sy
1a000b02:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a000b06:	f001 fbaf 	bl	1a002268 <vPortExitCritical>
				return pdPASS;
1a000b0a:	2001      	movs	r0, #1
}
1a000b0c:	b005      	add	sp, #20
1a000b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000b10:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000b14:	f000 ff36 	bl	1a001984 <xTaskRemoveFromEventList>
1a000b18:	2800      	cmp	r0, #0
1a000b1a:	d0f4      	beq.n	1a000b06 <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
1a000b1c:	4b32      	ldr	r3, [pc, #200]	; (1a000be8 <xQueueGenericSend+0x17c>)
1a000b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000b22:	601a      	str	r2, [r3, #0]
1a000b24:	f3bf 8f4f 	dsb	sy
1a000b28:	f3bf 8f6f 	isb	sy
1a000b2c:	e7eb      	b.n	1a000b06 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
1a000b2e:	f001 fb9b 	bl	1a002268 <vPortExitCritical>
					return errQUEUE_FULL;
1a000b32:	2000      	movs	r0, #0
1a000b34:	e7ea      	b.n	1a000b0c <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000b36:	a802      	add	r0, sp, #8
1a000b38:	f000 ff6a 	bl	1a001a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000b3c:	2701      	movs	r7, #1
1a000b3e:	e019      	b.n	1a000b74 <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
1a000b40:	2300      	movs	r3, #0
1a000b42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000b46:	e021      	b.n	1a000b8c <xQueueGenericSend+0x120>
1a000b48:	2300      	movs	r3, #0
1a000b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000b4e:	e023      	b.n	1a000b98 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
1a000b50:	4620      	mov	r0, r4
1a000b52:	f7ff fe90 	bl	1a000876 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000b56:	f000 fddb 	bl	1a001710 <xTaskResumeAll>
		taskENTER_CRITICAL();
1a000b5a:	f001 fb63 	bl	1a002224 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000b5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000b60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000b62:	429a      	cmp	r2, r3
1a000b64:	d3bf      	bcc.n	1a000ae6 <xQueueGenericSend+0x7a>
1a000b66:	2d02      	cmp	r5, #2
1a000b68:	d0bd      	beq.n	1a000ae6 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000b6a:	9b01      	ldr	r3, [sp, #4]
1a000b6c:	2b00      	cmp	r3, #0
1a000b6e:	d0de      	beq.n	1a000b2e <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
1a000b70:	2f00      	cmp	r7, #0
1a000b72:	d0e0      	beq.n	1a000b36 <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
1a000b74:	f001 fb78 	bl	1a002268 <vPortExitCritical>
		vTaskSuspendAll();
1a000b78:	f000 fd30 	bl	1a0015dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000b7c:	f001 fb52 	bl	1a002224 <vPortEnterCritical>
1a000b80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000b84:	b25b      	sxtb	r3, r3
1a000b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000b8a:	d0d9      	beq.n	1a000b40 <xQueueGenericSend+0xd4>
1a000b8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000b90:	b25b      	sxtb	r3, r3
1a000b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000b96:	d0d7      	beq.n	1a000b48 <xQueueGenericSend+0xdc>
1a000b98:	f001 fb66 	bl	1a002268 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000b9c:	a901      	add	r1, sp, #4
1a000b9e:	a802      	add	r0, sp, #8
1a000ba0:	f000 ff42 	bl	1a001a28 <xTaskCheckForTimeOut>
1a000ba4:	b9c8      	cbnz	r0, 1a000bda <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a000ba6:	4620      	mov	r0, r4
1a000ba8:	f7ff fdfc 	bl	1a0007a4 <prvIsQueueFull>
1a000bac:	2800      	cmp	r0, #0
1a000bae:	d0cf      	beq.n	1a000b50 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a000bb0:	9901      	ldr	r1, [sp, #4]
1a000bb2:	f104 0010 	add.w	r0, r4, #16
1a000bb6:	f000 feb1 	bl	1a00191c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000bba:	4620      	mov	r0, r4
1a000bbc:	f7ff fe5b 	bl	1a000876 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000bc0:	f000 fda6 	bl	1a001710 <xTaskResumeAll>
1a000bc4:	2800      	cmp	r0, #0
1a000bc6:	d1c8      	bne.n	1a000b5a <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
1a000bc8:	4b07      	ldr	r3, [pc, #28]	; (1a000be8 <xQueueGenericSend+0x17c>)
1a000bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000bce:	601a      	str	r2, [r3, #0]
1a000bd0:	f3bf 8f4f 	dsb	sy
1a000bd4:	f3bf 8f6f 	isb	sy
1a000bd8:	e7bf      	b.n	1a000b5a <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
1a000bda:	4620      	mov	r0, r4
1a000bdc:	f7ff fe4b 	bl	1a000876 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000be0:	f000 fd96 	bl	1a001710 <xTaskResumeAll>
			return errQUEUE_FULL;
1a000be4:	2000      	movs	r0, #0
1a000be6:	e791      	b.n	1a000b0c <xQueueGenericSend+0xa0>
1a000be8:	e000ed04 	.word	0xe000ed04

1a000bec <xQueueGenericSendFromISR>:
{
1a000bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a000bf0:	b190      	cbz	r0, 1a000c18 <xQueueGenericSendFromISR+0x2c>
1a000bf2:	4689      	mov	r9, r1
1a000bf4:	4690      	mov	r8, r2
1a000bf6:	461f      	mov	r7, r3
1a000bf8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000bfa:	b1b1      	cbz	r1, 1a000c2a <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a000bfc:	2f02      	cmp	r7, #2
1a000bfe:	d120      	bne.n	1a000c42 <xQueueGenericSendFromISR+0x56>
1a000c00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c02:	2b01      	cmp	r3, #1
1a000c04:	d01d      	beq.n	1a000c42 <xQueueGenericSendFromISR+0x56>
1a000c06:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c0a:	f383 8811 	msr	BASEPRI, r3
1a000c0e:	f3bf 8f6f 	isb	sy
1a000c12:	f3bf 8f4f 	dsb	sy
1a000c16:	e7fe      	b.n	1a000c16 <xQueueGenericSendFromISR+0x2a>
1a000c18:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c1c:	f383 8811 	msr	BASEPRI, r3
1a000c20:	f3bf 8f6f 	isb	sy
1a000c24:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
1a000c28:	e7fe      	b.n	1a000c28 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000c2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000c2c:	2b00      	cmp	r3, #0
1a000c2e:	d0e5      	beq.n	1a000bfc <xQueueGenericSendFromISR+0x10>
1a000c30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c34:	f383 8811 	msr	BASEPRI, r3
1a000c38:	f3bf 8f6f 	isb	sy
1a000c3c:	f3bf 8f4f 	dsb	sy
1a000c40:	e7fe      	b.n	1a000c40 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a000c42:	f001 fc19 	bl	1a002478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a000c46:	f3ef 8611 	mrs	r6, BASEPRI
1a000c4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000c4e:	f383 8811 	msr	BASEPRI, r3
1a000c52:	f3bf 8f6f 	isb	sy
1a000c56:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a000c5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000c5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000c5e:	429a      	cmp	r2, r3
1a000c60:	d306      	bcc.n	1a000c70 <xQueueGenericSendFromISR+0x84>
1a000c62:	2f02      	cmp	r7, #2
1a000c64:	d004      	beq.n	1a000c70 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
1a000c66:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a000c68:	f386 8811 	msr	BASEPRI, r6
}
1a000c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
1a000c70:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a000c74:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a000c76:	463a      	mov	r2, r7
1a000c78:	4649      	mov	r1, r9
1a000c7a:	4620      	mov	r0, r4
1a000c7c:	f7ff fdae 	bl	1a0007dc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a000c80:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a000c84:	d005      	beq.n	1a000c92 <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a000c86:	1c6b      	adds	r3, r5, #1
1a000c88:	b25b      	sxtb	r3, r3
1a000c8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a000c8e:	2001      	movs	r0, #1
1a000c90:	e7ea      	b.n	1a000c68 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a000c94:	b90b      	cbnz	r3, 1a000c9a <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
1a000c96:	2001      	movs	r0, #1
1a000c98:	e7e6      	b.n	1a000c68 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000c9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000c9e:	f000 fe71 	bl	1a001984 <xTaskRemoveFromEventList>
1a000ca2:	b130      	cbz	r0, 1a000cb2 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
1a000ca4:	f1b8 0f00 	cmp.w	r8, #0
1a000ca8:	d005      	beq.n	1a000cb6 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a000caa:	2001      	movs	r0, #1
1a000cac:	f8c8 0000 	str.w	r0, [r8]
1a000cb0:	e7da      	b.n	1a000c68 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
1a000cb2:	2001      	movs	r0, #1
1a000cb4:	e7d8      	b.n	1a000c68 <xQueueGenericSendFromISR+0x7c>
1a000cb6:	2001      	movs	r0, #1
1a000cb8:	e7d6      	b.n	1a000c68 <xQueueGenericSendFromISR+0x7c>
1a000cba:	Address 0x000000001a000cba is out of bounds.


1a000cbc <xQueueReceive>:
{
1a000cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000cbe:	b085      	sub	sp, #20
1a000cc0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000cc2:	b190      	cbz	r0, 1a000cea <xQueueReceive+0x2e>
1a000cc4:	460e      	mov	r6, r1
1a000cc6:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000cc8:	b1c1      	cbz	r1, 1a000cfc <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000cca:	f000 fef5 	bl	1a001ab8 <xTaskGetSchedulerState>
1a000cce:	4607      	mov	r7, r0
1a000cd0:	bb00      	cbnz	r0, 1a000d14 <xQueueReceive+0x58>
1a000cd2:	9b01      	ldr	r3, [sp, #4]
1a000cd4:	2b00      	cmp	r3, #0
1a000cd6:	d05c      	beq.n	1a000d92 <xQueueReceive+0xd6>
	__asm volatile
1a000cd8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cdc:	f383 8811 	msr	BASEPRI, r3
1a000ce0:	f3bf 8f6f 	isb	sy
1a000ce4:	f3bf 8f4f 	dsb	sy
1a000ce8:	e7fe      	b.n	1a000ce8 <xQueueReceive+0x2c>
1a000cea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000cee:	f383 8811 	msr	BASEPRI, r3
1a000cf2:	f3bf 8f6f 	isb	sy
1a000cf6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a000cfa:	e7fe      	b.n	1a000cfa <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a000cfc:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000cfe:	2b00      	cmp	r3, #0
1a000d00:	d0e3      	beq.n	1a000cca <xQueueReceive+0xe>
1a000d02:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d06:	f383 8811 	msr	BASEPRI, r3
1a000d0a:	f3bf 8f6f 	isb	sy
1a000d0e:	f3bf 8f4f 	dsb	sy
1a000d12:	e7fe      	b.n	1a000d12 <xQueueReceive+0x56>
1a000d14:	2700      	movs	r7, #0
1a000d16:	e03c      	b.n	1a000d92 <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a000d18:	4631      	mov	r1, r6
1a000d1a:	4620      	mov	r0, r4
1a000d1c:	f7ff fd99 	bl	1a000852 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a000d20:	3d01      	subs	r5, #1
1a000d22:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000d24:	6923      	ldr	r3, [r4, #16]
1a000d26:	b923      	cbnz	r3, 1a000d32 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
1a000d28:	f001 fa9e 	bl	1a002268 <vPortExitCritical>
				return pdPASS;
1a000d2c:	2001      	movs	r0, #1
}
1a000d2e:	b005      	add	sp, #20
1a000d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000d32:	f104 0010 	add.w	r0, r4, #16
1a000d36:	f000 fe25 	bl	1a001984 <xTaskRemoveFromEventList>
1a000d3a:	2800      	cmp	r0, #0
1a000d3c:	d0f4      	beq.n	1a000d28 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
1a000d3e:	4b35      	ldr	r3, [pc, #212]	; (1a000e14 <xQueueReceive+0x158>)
1a000d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000d44:	601a      	str	r2, [r3, #0]
1a000d46:	f3bf 8f4f 	dsb	sy
1a000d4a:	f3bf 8f6f 	isb	sy
1a000d4e:	e7eb      	b.n	1a000d28 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
1a000d50:	f001 fa8a 	bl	1a002268 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000d54:	2000      	movs	r0, #0
1a000d56:	e7ea      	b.n	1a000d2e <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000d58:	a802      	add	r0, sp, #8
1a000d5a:	f000 fe59 	bl	1a001a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000d5e:	2701      	movs	r7, #1
1a000d60:	e021      	b.n	1a000da6 <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
1a000d62:	2300      	movs	r3, #0
1a000d64:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000d68:	e029      	b.n	1a000dbe <xQueueReceive+0x102>
1a000d6a:	2300      	movs	r3, #0
1a000d6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000d70:	e02b      	b.n	1a000dca <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
1a000d72:	4620      	mov	r0, r4
1a000d74:	f7ff fd7f 	bl	1a000876 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000d78:	f000 fcca 	bl	1a001710 <xTaskResumeAll>
1a000d7c:	e009      	b.n	1a000d92 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
1a000d7e:	4620      	mov	r0, r4
1a000d80:	f7ff fd79 	bl	1a000876 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000d84:	f000 fcc4 	bl	1a001710 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000d88:	4620      	mov	r0, r4
1a000d8a:	f7ff fd1a 	bl	1a0007c2 <prvIsQueueEmpty>
1a000d8e:	2800      	cmp	r0, #0
1a000d90:	d13d      	bne.n	1a000e0e <xQueueReceive+0x152>
		taskENTER_CRITICAL();
1a000d92:	f001 fa47 	bl	1a002224 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000d96:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000d98:	2d00      	cmp	r5, #0
1a000d9a:	d1bd      	bne.n	1a000d18 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000d9c:	9b01      	ldr	r3, [sp, #4]
1a000d9e:	2b00      	cmp	r3, #0
1a000da0:	d0d6      	beq.n	1a000d50 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
1a000da2:	2f00      	cmp	r7, #0
1a000da4:	d0d8      	beq.n	1a000d58 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
1a000da6:	f001 fa5f 	bl	1a002268 <vPortExitCritical>
		vTaskSuspendAll();
1a000daa:	f000 fc17 	bl	1a0015dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000dae:	f001 fa39 	bl	1a002224 <vPortEnterCritical>
1a000db2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000db6:	b25b      	sxtb	r3, r3
1a000db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000dbc:	d0d1      	beq.n	1a000d62 <xQueueReceive+0xa6>
1a000dbe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000dc2:	b25b      	sxtb	r3, r3
1a000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000dc8:	d0cf      	beq.n	1a000d6a <xQueueReceive+0xae>
1a000dca:	f001 fa4d 	bl	1a002268 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000dce:	a901      	add	r1, sp, #4
1a000dd0:	a802      	add	r0, sp, #8
1a000dd2:	f000 fe29 	bl	1a001a28 <xTaskCheckForTimeOut>
1a000dd6:	2800      	cmp	r0, #0
1a000dd8:	d1d1      	bne.n	1a000d7e <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000dda:	4620      	mov	r0, r4
1a000ddc:	f7ff fcf1 	bl	1a0007c2 <prvIsQueueEmpty>
1a000de0:	2800      	cmp	r0, #0
1a000de2:	d0c6      	beq.n	1a000d72 <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000de4:	9901      	ldr	r1, [sp, #4]
1a000de6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000dea:	f000 fd97 	bl	1a00191c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000dee:	4620      	mov	r0, r4
1a000df0:	f7ff fd41 	bl	1a000876 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000df4:	f000 fc8c 	bl	1a001710 <xTaskResumeAll>
1a000df8:	2800      	cmp	r0, #0
1a000dfa:	d1ca      	bne.n	1a000d92 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
1a000dfc:	4b05      	ldr	r3, [pc, #20]	; (1a000e14 <xQueueReceive+0x158>)
1a000dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000e02:	601a      	str	r2, [r3, #0]
1a000e04:	f3bf 8f4f 	dsb	sy
1a000e08:	f3bf 8f6f 	isb	sy
1a000e0c:	e7c1      	b.n	1a000d92 <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
1a000e0e:	2000      	movs	r0, #0
1a000e10:	e78d      	b.n	1a000d2e <xQueueReceive+0x72>
1a000e12:	bf00      	nop
1a000e14:	e000ed04 	.word	0xe000ed04

1a000e18 <xQueueSemaphoreTake>:
{
1a000e18:	b570      	push	{r4, r5, r6, lr}
1a000e1a:	b084      	sub	sp, #16
1a000e1c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
1a000e1e:	b158      	cbz	r0, 1a000e38 <xQueueSemaphoreTake+0x20>
1a000e20:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
1a000e22:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a000e24:	b18b      	cbz	r3, 1a000e4a <xQueueSemaphoreTake+0x32>
1a000e26:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e2a:	f383 8811 	msr	BASEPRI, r3
1a000e2e:	f3bf 8f6f 	isb	sy
1a000e32:	f3bf 8f4f 	dsb	sy
1a000e36:	e7fe      	b.n	1a000e36 <xQueueSemaphoreTake+0x1e>
1a000e38:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e3c:	f383 8811 	msr	BASEPRI, r3
1a000e40:	f3bf 8f6f 	isb	sy
1a000e44:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
1a000e48:	e7fe      	b.n	1a000e48 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a000e4a:	f000 fe35 	bl	1a001ab8 <xTaskGetSchedulerState>
1a000e4e:	4606      	mov	r6, r0
1a000e50:	b950      	cbnz	r0, 1a000e68 <xQueueSemaphoreTake+0x50>
1a000e52:	9b01      	ldr	r3, [sp, #4]
1a000e54:	b15b      	cbz	r3, 1a000e6e <xQueueSemaphoreTake+0x56>
1a000e56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000e5a:	f383 8811 	msr	BASEPRI, r3
1a000e5e:	f3bf 8f6f 	isb	sy
1a000e62:	f3bf 8f4f 	dsb	sy
1a000e66:	e7fe      	b.n	1a000e66 <xQueueSemaphoreTake+0x4e>
1a000e68:	2500      	movs	r5, #0
1a000e6a:	462e      	mov	r6, r5
1a000e6c:	e053      	b.n	1a000f16 <xQueueSemaphoreTake+0xfe>
1a000e6e:	4605      	mov	r5, r0
1a000e70:	e051      	b.n	1a000f16 <xQueueSemaphoreTake+0xfe>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1a000e72:	3b01      	subs	r3, #1
1a000e74:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000e76:	6823      	ldr	r3, [r4, #0]
1a000e78:	b13b      	cbz	r3, 1a000e8a <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000e7a:	6923      	ldr	r3, [r4, #16]
1a000e7c:	b94b      	cbnz	r3, 1a000e92 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
1a000e7e:	f001 f9f3 	bl	1a002268 <vPortExitCritical>
				return pdPASS;
1a000e82:	2501      	movs	r5, #1
}
1a000e84:	4628      	mov	r0, r5
1a000e86:	b004      	add	sp, #16
1a000e88:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
1a000e8a:	f000 ff3f 	bl	1a001d0c <pvTaskIncrementMutexHeldCount>
1a000e8e:	6060      	str	r0, [r4, #4]
1a000e90:	e7f3      	b.n	1a000e7a <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000e92:	f104 0010 	add.w	r0, r4, #16
1a000e96:	f000 fd75 	bl	1a001984 <xTaskRemoveFromEventList>
1a000e9a:	2800      	cmp	r0, #0
1a000e9c:	d0ef      	beq.n	1a000e7e <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
1a000e9e:	4b46      	ldr	r3, [pc, #280]	; (1a000fb8 <xQueueSemaphoreTake+0x1a0>)
1a000ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000ea4:	601a      	str	r2, [r3, #0]
1a000ea6:	f3bf 8f4f 	dsb	sy
1a000eaa:	f3bf 8f6f 	isb	sy
1a000eae:	e7e6      	b.n	1a000e7e <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
1a000eb0:	b145      	cbz	r5, 1a000ec4 <xQueueSemaphoreTake+0xac>
1a000eb2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eb6:	f383 8811 	msr	BASEPRI, r3
1a000eba:	f3bf 8f6f 	isb	sy
1a000ebe:	f3bf 8f4f 	dsb	sy
1a000ec2:	e7fe      	b.n	1a000ec2 <xQueueSemaphoreTake+0xaa>
					taskEXIT_CRITICAL();
1a000ec4:	f001 f9d0 	bl	1a002268 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a000ec8:	e7dc      	b.n	1a000e84 <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a000eca:	a802      	add	r0, sp, #8
1a000ecc:	f000 fda0 	bl	1a001a10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a000ed0:	2601      	movs	r6, #1
1a000ed2:	e02a      	b.n	1a000f2a <xQueueSemaphoreTake+0x112>
		prvLockQueue( pxQueue );
1a000ed4:	2300      	movs	r3, #0
1a000ed6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a000eda:	e032      	b.n	1a000f42 <xQueueSemaphoreTake+0x12a>
1a000edc:	2300      	movs	r3, #0
1a000ede:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a000ee2:	e034      	b.n	1a000f4e <xQueueSemaphoreTake+0x136>
						taskENTER_CRITICAL();
1a000ee4:	f001 f99e 	bl	1a002224 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1a000ee8:	6860      	ldr	r0, [r4, #4]
1a000eea:	f000 fdf5 	bl	1a001ad8 <xTaskPriorityInherit>
1a000eee:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
1a000ef0:	f001 f9ba 	bl	1a002268 <vPortExitCritical>
1a000ef4:	e03b      	b.n	1a000f6e <xQueueSemaphoreTake+0x156>
				prvUnlockQueue( pxQueue );
1a000ef6:	4620      	mov	r0, r4
1a000ef8:	f7ff fcbd 	bl	1a000876 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a000efc:	f000 fc08 	bl	1a001710 <xTaskResumeAll>
1a000f00:	e009      	b.n	1a000f16 <xQueueSemaphoreTake+0xfe>
			prvUnlockQueue( pxQueue );
1a000f02:	4620      	mov	r0, r4
1a000f04:	f7ff fcb7 	bl	1a000876 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a000f08:	f000 fc02 	bl	1a001710 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000f0c:	4620      	mov	r0, r4
1a000f0e:	f7ff fc58 	bl	1a0007c2 <prvIsQueueEmpty>
1a000f12:	2800      	cmp	r0, #0
1a000f14:	d140      	bne.n	1a000f98 <xQueueSemaphoreTake+0x180>
		taskENTER_CRITICAL();
1a000f16:	f001 f985 	bl	1a002224 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1a000f1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1a000f1c:	2b00      	cmp	r3, #0
1a000f1e:	d1a8      	bne.n	1a000e72 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a000f20:	9b01      	ldr	r3, [sp, #4]
1a000f22:	2b00      	cmp	r3, #0
1a000f24:	d0c4      	beq.n	1a000eb0 <xQueueSemaphoreTake+0x98>
				else if( xEntryTimeSet == pdFALSE )
1a000f26:	2e00      	cmp	r6, #0
1a000f28:	d0cf      	beq.n	1a000eca <xQueueSemaphoreTake+0xb2>
		taskEXIT_CRITICAL();
1a000f2a:	f001 f99d 	bl	1a002268 <vPortExitCritical>
		vTaskSuspendAll();
1a000f2e:	f000 fb55 	bl	1a0015dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a000f32:	f001 f977 	bl	1a002224 <vPortEnterCritical>
1a000f36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000f3a:	b25b      	sxtb	r3, r3
1a000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f40:	d0c8      	beq.n	1a000ed4 <xQueueSemaphoreTake+0xbc>
1a000f42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a000f46:	b25b      	sxtb	r3, r3
1a000f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000f4c:	d0c6      	beq.n	1a000edc <xQueueSemaphoreTake+0xc4>
1a000f4e:	f001 f98b 	bl	1a002268 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a000f52:	a901      	add	r1, sp, #4
1a000f54:	a802      	add	r0, sp, #8
1a000f56:	f000 fd67 	bl	1a001a28 <xTaskCheckForTimeOut>
1a000f5a:	2800      	cmp	r0, #0
1a000f5c:	d1d1      	bne.n	1a000f02 <xQueueSemaphoreTake+0xea>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a000f5e:	4620      	mov	r0, r4
1a000f60:	f7ff fc2f 	bl	1a0007c2 <prvIsQueueEmpty>
1a000f64:	2800      	cmp	r0, #0
1a000f66:	d0c6      	beq.n	1a000ef6 <xQueueSemaphoreTake+0xde>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000f68:	6823      	ldr	r3, [r4, #0]
1a000f6a:	2b00      	cmp	r3, #0
1a000f6c:	d0ba      	beq.n	1a000ee4 <xQueueSemaphoreTake+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a000f6e:	9901      	ldr	r1, [sp, #4]
1a000f70:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f74:	f000 fcd2 	bl	1a00191c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a000f78:	4620      	mov	r0, r4
1a000f7a:	f7ff fc7c 	bl	1a000876 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a000f7e:	f000 fbc7 	bl	1a001710 <xTaskResumeAll>
1a000f82:	2800      	cmp	r0, #0
1a000f84:	d1c7      	bne.n	1a000f16 <xQueueSemaphoreTake+0xfe>
					portYIELD_WITHIN_API();
1a000f86:	4b0c      	ldr	r3, [pc, #48]	; (1a000fb8 <xQueueSemaphoreTake+0x1a0>)
1a000f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000f8c:	601a      	str	r2, [r3, #0]
1a000f8e:	f3bf 8f4f 	dsb	sy
1a000f92:	f3bf 8f6f 	isb	sy
1a000f96:	e7be      	b.n	1a000f16 <xQueueSemaphoreTake+0xfe>
					if( xInheritanceOccurred != pdFALSE )
1a000f98:	b90d      	cbnz	r5, 1a000f9e <xQueueSemaphoreTake+0x186>
				return errQUEUE_EMPTY;
1a000f9a:	2500      	movs	r5, #0
1a000f9c:	e772      	b.n	1a000e84 <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
1a000f9e:	f001 f941 	bl	1a002224 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1a000fa2:	4620      	mov	r0, r4
1a000fa4:	f7ff fbf6 	bl	1a000794 <prvGetDisinheritPriorityAfterTimeout>
1a000fa8:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
1a000faa:	6860      	ldr	r0, [r4, #4]
1a000fac:	f000 fe4c 	bl	1a001c48 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
1a000fb0:	f001 f95a 	bl	1a002268 <vPortExitCritical>
1a000fb4:	e7f1      	b.n	1a000f9a <xQueueSemaphoreTake+0x182>
1a000fb6:	bf00      	nop
1a000fb8:	e000ed04 	.word	0xe000ed04

1a000fbc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a000fbc:	2300      	movs	r3, #0
1a000fbe:	e000      	b.n	1a000fc2 <vQueueAddToRegistry+0x6>
1a000fc0:	3301      	adds	r3, #1
1a000fc2:	2b07      	cmp	r3, #7
1a000fc4:	d80b      	bhi.n	1a000fde <vQueueAddToRegistry+0x22>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a000fc6:	4a06      	ldr	r2, [pc, #24]	; (1a000fe0 <vQueueAddToRegistry+0x24>)
1a000fc8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a000fcc:	2a00      	cmp	r2, #0
1a000fce:	d1f7      	bne.n	1a000fc0 <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a000fd0:	4a03      	ldr	r2, [pc, #12]	; (1a000fe0 <vQueueAddToRegistry+0x24>)
1a000fd2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a000fd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a000fda:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a000fdc:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a000fde:	4770      	bx	lr
1a000fe0:	10002bc4 	.word	0x10002bc4

1a000fe4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a000fe4:	b570      	push	{r4, r5, r6, lr}
1a000fe6:	4604      	mov	r4, r0
1a000fe8:	460d      	mov	r5, r1
1a000fea:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a000fec:	f001 f91a 	bl	1a002224 <vPortEnterCritical>
1a000ff0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a000ff4:	b25b      	sxtb	r3, r3
1a000ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a000ffa:	d00d      	beq.n	1a001018 <vQueueWaitForMessageRestricted+0x34>
1a000ffc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001000:	b25b      	sxtb	r3, r3
1a001002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001006:	d00b      	beq.n	1a001020 <vQueueWaitForMessageRestricted+0x3c>
1a001008:	f001 f92e 	bl	1a002268 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a00100c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00100e:	b15b      	cbz	r3, 1a001028 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a001010:	4620      	mov	r0, r4
1a001012:	f7ff fc30 	bl	1a000876 <prvUnlockQueue>
	}
1a001016:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a001018:	2300      	movs	r3, #0
1a00101a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00101e:	e7ed      	b.n	1a000ffc <vQueueWaitForMessageRestricted+0x18>
1a001020:	2300      	movs	r3, #0
1a001022:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001026:	e7ef      	b.n	1a001008 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001028:	4632      	mov	r2, r6
1a00102a:	4629      	mov	r1, r5
1a00102c:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001030:	f000 fc8c 	bl	1a00194c <vTaskPlaceOnEventListRestricted>
1a001034:	e7ec      	b.n	1a001010 <vQueueWaitForMessageRestricted+0x2c>

1a001036 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001036:	f100 0308 	add.w	r3, r0, #8
1a00103a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00103c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001040:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001042:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001044:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001046:	2300      	movs	r3, #0
1a001048:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a00104a:	4770      	bx	lr

1a00104c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a00104c:	2300      	movs	r3, #0
1a00104e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001050:	4770      	bx	lr

1a001052 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001052:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001054:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a001056:	689a      	ldr	r2, [r3, #8]
1a001058:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00105a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a00105c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00105e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001060:	6803      	ldr	r3, [r0, #0]
1a001062:	3301      	adds	r3, #1
1a001064:	6003      	str	r3, [r0, #0]
}
1a001066:	4770      	bx	lr

1a001068 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a001068:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a00106a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a00106c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001070:	d011      	beq.n	1a001096 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001072:	f100 0308 	add.w	r3, r0, #8
1a001076:	461c      	mov	r4, r3
1a001078:	685b      	ldr	r3, [r3, #4]
1a00107a:	681a      	ldr	r2, [r3, #0]
1a00107c:	42aa      	cmp	r2, r5
1a00107e:	d9fa      	bls.n	1a001076 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a001080:	6863      	ldr	r3, [r4, #4]
1a001082:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001084:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001086:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001088:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a00108a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a00108c:	6803      	ldr	r3, [r0, #0]
1a00108e:	3301      	adds	r3, #1
1a001090:	6003      	str	r3, [r0, #0]
}
1a001092:	bc30      	pop	{r4, r5}
1a001094:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
1a001096:	6904      	ldr	r4, [r0, #16]
1a001098:	e7f2      	b.n	1a001080 <vListInsert+0x18>

1a00109a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a00109a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a00109c:	6841      	ldr	r1, [r0, #4]
1a00109e:	6882      	ldr	r2, [r0, #8]
1a0010a0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0010a2:	6841      	ldr	r1, [r0, #4]
1a0010a4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0010a6:	685a      	ldr	r2, [r3, #4]
1a0010a8:	4282      	cmp	r2, r0
1a0010aa:	d006      	beq.n	1a0010ba <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a0010ac:	2200      	movs	r2, #0
1a0010ae:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a0010b0:	681a      	ldr	r2, [r3, #0]
1a0010b2:	3a01      	subs	r2, #1
1a0010b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a0010b6:	6818      	ldr	r0, [r3, #0]
}
1a0010b8:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a0010ba:	6882      	ldr	r2, [r0, #8]
1a0010bc:	605a      	str	r2, [r3, #4]
1a0010be:	e7f5      	b.n	1a0010ac <uxListRemove+0x12>

1a0010c0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a0010c0:	4b03      	ldr	r3, [pc, #12]	; (1a0010d0 <vApplicationGetIdleTaskMemory+0x10>)
1a0010c2:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a0010c4:	4b03      	ldr	r3, [pc, #12]	; (1a0010d4 <vApplicationGetIdleTaskMemory+0x14>)
1a0010c6:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a0010c8:	2364      	movs	r3, #100	; 0x64
1a0010ca:	6013      	str	r3, [r2, #0]
}
1a0010cc:	4770      	bx	lr
1a0010ce:	bf00      	nop
1a0010d0:	1000288c 	.word	0x1000288c
1a0010d4:	100020bc 	.word	0x100020bc

1a0010d8 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a0010d8:	4b03      	ldr	r3, [pc, #12]	; (1a0010e8 <vApplicationGetTimerTaskMemory+0x10>)
1a0010da:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a0010dc:	4b03      	ldr	r3, [pc, #12]	; (1a0010ec <vApplicationGetTimerTaskMemory+0x14>)
1a0010de:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a0010e0:	f44f 73c8 	mov.w	r3, #400	; 0x190
1a0010e4:	6013      	str	r3, [r2, #0]
1a0010e6:	4770      	bx	lr
1a0010e8:	100028ec 	.word	0x100028ec
1a0010ec:	1000224c 	.word	0x1000224c

1a0010f0 <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a0010f0:	b510      	push	{r4, lr}
1a0010f2:	b082      	sub	sp, #8
1a0010f4:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a0010f6:	9001      	str	r0, [sp, #4]
1a0010f8:	2300      	movs	r3, #0
1a0010fa:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a0010fc:	f001 f892 	bl	1a002224 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a001100:	9901      	ldr	r1, [sp, #4]
1a001102:	4622      	mov	r2, r4
1a001104:	4804      	ldr	r0, [pc, #16]	; (1a001118 <vAssertCalled+0x28>)
1a001106:	f003 f9eb 	bl	1a0044e0 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a00110a:	9b00      	ldr	r3, [sp, #0]
1a00110c:	2b00      	cmp	r3, #0
1a00110e:	d0fc      	beq.n	1a00110a <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a001110:	f001 f8aa 	bl	1a002268 <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a001114:	b002      	add	sp, #8
1a001116:	bd10      	pop	{r4, pc}
1a001118:	1a004e6c 	.word	0x1a004e6c

1a00111c <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a00111c:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a00111e:	4804      	ldr	r0, [pc, #16]	; (1a001130 <vApplicationMallocFailedHook+0x14>)
1a001120:	f003 fa66 	bl	1a0045f0 <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a001124:	4903      	ldr	r1, [pc, #12]	; (1a001134 <vApplicationMallocFailedHook+0x18>)
1a001126:	202c      	movs	r0, #44	; 0x2c
1a001128:	f7ff ffe2 	bl	1a0010f0 <vAssertCalled>
}
1a00112c:	bd08      	pop	{r3, pc}
1a00112e:	bf00      	nop
1a001130:	1a004eac 	.word	0x1a004eac
1a001134:	1a004ed0 	.word	0x1a004ed0

1a001138 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a001138:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a00113a:	4804      	ldr	r0, [pc, #16]	; (1a00114c <vApplicationStackOverflowHook+0x14>)
1a00113c:	f003 f9d0 	bl	1a0044e0 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a001140:	4903      	ldr	r1, [pc, #12]	; (1a001150 <vApplicationStackOverflowHook+0x18>)
1a001142:	2050      	movs	r0, #80	; 0x50
1a001144:	f7ff ffd4 	bl	1a0010f0 <vAssertCalled>
}
1a001148:	bd08      	pop	{r3, pc}
1a00114a:	bf00      	nop
1a00114c:	1a004ef0 	.word	0x1a004ef0
1a001150:	1a004ed0 	.word	0x1a004ed0

1a001154 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001154:	4b08      	ldr	r3, [pc, #32]	; (1a001178 <prvResetNextTaskUnblockTime+0x24>)
1a001156:	681b      	ldr	r3, [r3, #0]
1a001158:	681b      	ldr	r3, [r3, #0]
1a00115a:	b923      	cbnz	r3, 1a001166 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a00115c:	4b07      	ldr	r3, [pc, #28]	; (1a00117c <prvResetNextTaskUnblockTime+0x28>)
1a00115e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001162:	601a      	str	r2, [r3, #0]
1a001164:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001166:	4b04      	ldr	r3, [pc, #16]	; (1a001178 <prvResetNextTaskUnblockTime+0x24>)
1a001168:	681b      	ldr	r3, [r3, #0]
1a00116a:	68db      	ldr	r3, [r3, #12]
1a00116c:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a00116e:	685a      	ldr	r2, [r3, #4]
1a001170:	4b02      	ldr	r3, [pc, #8]	; (1a00117c <prvResetNextTaskUnblockTime+0x28>)
1a001172:	601a      	str	r2, [r3, #0]
	}
}
1a001174:	4770      	bx	lr
1a001176:	bf00      	nop
1a001178:	10002950 	.word	0x10002950
1a00117c:	10002a24 	.word	0x10002a24

1a001180 <prvInitialiseNewTask>:
{
1a001180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001184:	4680      	mov	r8, r0
1a001186:	460d      	mov	r5, r1
1a001188:	4617      	mov	r7, r2
1a00118a:	4699      	mov	r9, r3
1a00118c:	9e08      	ldr	r6, [sp, #32]
1a00118e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a001192:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001194:	0092      	lsls	r2, r2, #2
1a001196:	21a5      	movs	r1, #165	; 0xa5
1a001198:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00119a:	f002 fceb 	bl	1a003b74 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a00119e:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0011a0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0011a4:	3a01      	subs	r2, #1
1a0011a6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0011aa:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0011ae:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0011b0:	2200      	movs	r2, #0
1a0011b2:	2a0f      	cmp	r2, #15
1a0011b4:	d807      	bhi.n	1a0011c6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0011b6:	5ca9      	ldrb	r1, [r5, r2]
1a0011b8:	18a3      	adds	r3, r4, r2
1a0011ba:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a0011be:	5cab      	ldrb	r3, [r5, r2]
1a0011c0:	b10b      	cbz	r3, 1a0011c6 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0011c2:	3201      	adds	r2, #1
1a0011c4:	e7f5      	b.n	1a0011b2 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0011c6:	2300      	movs	r3, #0
1a0011c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0011cc:	2e06      	cmp	r6, #6
1a0011ce:	d900      	bls.n	1a0011d2 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0011d0:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a0011d2:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a0011d4:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0011d6:	2500      	movs	r5, #0
1a0011d8:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0011da:	1d20      	adds	r0, r4, #4
1a0011dc:	f7ff ff36 	bl	1a00104c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0011e0:	f104 0018 	add.w	r0, r4, #24
1a0011e4:	f7ff ff32 	bl	1a00104c <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0011e8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0011ea:	f1c6 0607 	rsb	r6, r6, #7
1a0011ee:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0011f0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a0011f2:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0011f4:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0011f8:	464a      	mov	r2, r9
1a0011fa:	4641      	mov	r1, r8
1a0011fc:	4638      	mov	r0, r7
1a0011fe:	f000 ffe9 	bl	1a0021d4 <pxPortInitialiseStack>
1a001202:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001204:	f1ba 0f00 	cmp.w	sl, #0
1a001208:	d001      	beq.n	1a00120e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00120a:	f8ca 4000 	str.w	r4, [sl]
}
1a00120e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001212:	Address 0x000000001a001212 is out of bounds.


1a001214 <prvInitialiseTaskLists>:
{
1a001214:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001216:	2400      	movs	r4, #0
1a001218:	e007      	b.n	1a00122a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00121a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a00121e:	0093      	lsls	r3, r2, #2
1a001220:	480e      	ldr	r0, [pc, #56]	; (1a00125c <prvInitialiseTaskLists+0x48>)
1a001222:	4418      	add	r0, r3
1a001224:	f7ff ff07 	bl	1a001036 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001228:	3401      	adds	r4, #1
1a00122a:	2c06      	cmp	r4, #6
1a00122c:	d9f5      	bls.n	1a00121a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a00122e:	4d0c      	ldr	r5, [pc, #48]	; (1a001260 <prvInitialiseTaskLists+0x4c>)
1a001230:	4628      	mov	r0, r5
1a001232:	f7ff ff00 	bl	1a001036 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001236:	4c0b      	ldr	r4, [pc, #44]	; (1a001264 <prvInitialiseTaskLists+0x50>)
1a001238:	4620      	mov	r0, r4
1a00123a:	f7ff fefc 	bl	1a001036 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a00123e:	480a      	ldr	r0, [pc, #40]	; (1a001268 <prvInitialiseTaskLists+0x54>)
1a001240:	f7ff fef9 	bl	1a001036 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001244:	4809      	ldr	r0, [pc, #36]	; (1a00126c <prvInitialiseTaskLists+0x58>)
1a001246:	f7ff fef6 	bl	1a001036 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a00124a:	4809      	ldr	r0, [pc, #36]	; (1a001270 <prvInitialiseTaskLists+0x5c>)
1a00124c:	f7ff fef3 	bl	1a001036 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001250:	4b08      	ldr	r3, [pc, #32]	; (1a001274 <prvInitialiseTaskLists+0x60>)
1a001252:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001254:	4b08      	ldr	r3, [pc, #32]	; (1a001278 <prvInitialiseTaskLists+0x64>)
1a001256:	601c      	str	r4, [r3, #0]
}
1a001258:	bd38      	pop	{r3, r4, r5, pc}
1a00125a:	bf00      	nop
1a00125c:	10002958 	.word	0x10002958
1a001260:	100029fc 	.word	0x100029fc
1a001264:	10002a10 	.word	0x10002a10
1a001268:	10002a2c 	.word	0x10002a2c
1a00126c:	10002a58 	.word	0x10002a58
1a001270:	10002a44 	.word	0x10002a44
1a001274:	10002950 	.word	0x10002950
1a001278:	10002954 	.word	0x10002954

1a00127c <prvAddNewTaskToReadyList>:
{
1a00127c:	b510      	push	{r4, lr}
1a00127e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001280:	f000 ffd0 	bl	1a002224 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001284:	4a21      	ldr	r2, [pc, #132]	; (1a00130c <prvAddNewTaskToReadyList+0x90>)
1a001286:	6813      	ldr	r3, [r2, #0]
1a001288:	3301      	adds	r3, #1
1a00128a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a00128c:	4b20      	ldr	r3, [pc, #128]	; (1a001310 <prvAddNewTaskToReadyList+0x94>)
1a00128e:	681b      	ldr	r3, [r3, #0]
1a001290:	b15b      	cbz	r3, 1a0012aa <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001292:	4b20      	ldr	r3, [pc, #128]	; (1a001314 <prvAddNewTaskToReadyList+0x98>)
1a001294:	681b      	ldr	r3, [r3, #0]
1a001296:	b96b      	cbnz	r3, 1a0012b4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001298:	4b1d      	ldr	r3, [pc, #116]	; (1a001310 <prvAddNewTaskToReadyList+0x94>)
1a00129a:	681b      	ldr	r3, [r3, #0]
1a00129c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a00129e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0012a0:	429a      	cmp	r2, r3
1a0012a2:	d807      	bhi.n	1a0012b4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a0012a4:	4b1a      	ldr	r3, [pc, #104]	; (1a001310 <prvAddNewTaskToReadyList+0x94>)
1a0012a6:	601c      	str	r4, [r3, #0]
1a0012a8:	e004      	b.n	1a0012b4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a0012aa:	4b19      	ldr	r3, [pc, #100]	; (1a001310 <prvAddNewTaskToReadyList+0x94>)
1a0012ac:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a0012ae:	6813      	ldr	r3, [r2, #0]
1a0012b0:	2b01      	cmp	r3, #1
1a0012b2:	d027      	beq.n	1a001304 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a0012b4:	4a18      	ldr	r2, [pc, #96]	; (1a001318 <prvAddNewTaskToReadyList+0x9c>)
1a0012b6:	6813      	ldr	r3, [r2, #0]
1a0012b8:	3301      	adds	r3, #1
1a0012ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0012bc:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a0012be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a0012c0:	2301      	movs	r3, #1
1a0012c2:	4083      	lsls	r3, r0
1a0012c4:	4a15      	ldr	r2, [pc, #84]	; (1a00131c <prvAddNewTaskToReadyList+0xa0>)
1a0012c6:	6811      	ldr	r1, [r2, #0]
1a0012c8:	430b      	orrs	r3, r1
1a0012ca:	6013      	str	r3, [r2, #0]
1a0012cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0012d0:	1d21      	adds	r1, r4, #4
1a0012d2:	4b13      	ldr	r3, [pc, #76]	; (1a001320 <prvAddNewTaskToReadyList+0xa4>)
1a0012d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a0012d8:	f7ff febb 	bl	1a001052 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a0012dc:	f000 ffc4 	bl	1a002268 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a0012e0:	4b0c      	ldr	r3, [pc, #48]	; (1a001314 <prvAddNewTaskToReadyList+0x98>)
1a0012e2:	681b      	ldr	r3, [r3, #0]
1a0012e4:	b16b      	cbz	r3, 1a001302 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0012e6:	4b0a      	ldr	r3, [pc, #40]	; (1a001310 <prvAddNewTaskToReadyList+0x94>)
1a0012e8:	681b      	ldr	r3, [r3, #0]
1a0012ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0012ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0012ee:	429a      	cmp	r2, r3
1a0012f0:	d207      	bcs.n	1a001302 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a0012f2:	4b0c      	ldr	r3, [pc, #48]	; (1a001324 <prvAddNewTaskToReadyList+0xa8>)
1a0012f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0012f8:	601a      	str	r2, [r3, #0]
1a0012fa:	f3bf 8f4f 	dsb	sy
1a0012fe:	f3bf 8f6f 	isb	sy
}
1a001302:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001304:	f7ff ff86 	bl	1a001214 <prvInitialiseTaskLists>
1a001308:	e7d4      	b.n	1a0012b4 <prvAddNewTaskToReadyList+0x38>
1a00130a:	bf00      	nop
1a00130c:	100029e4 	.word	0x100029e4
1a001310:	1000294c 	.word	0x1000294c
1a001314:	10002a40 	.word	0x10002a40
1a001318:	100029f4 	.word	0x100029f4
1a00131c:	100029f8 	.word	0x100029f8
1a001320:	10002958 	.word	0x10002958
1a001324:	e000ed04 	.word	0xe000ed04

1a001328 <prvDeleteTCB>:
	{
1a001328:	b510      	push	{r4, lr}
1a00132a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00132c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001330:	b163      	cbz	r3, 1a00134c <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001332:	2b01      	cmp	r3, #1
1a001334:	d011      	beq.n	1a00135a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001336:	2b02      	cmp	r3, #2
1a001338:	d00e      	beq.n	1a001358 <prvDeleteTCB+0x30>
1a00133a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00133e:	f383 8811 	msr	BASEPRI, r3
1a001342:	f3bf 8f6f 	isb	sy
1a001346:	f3bf 8f4f 	dsb	sy
1a00134a:	e7fe      	b.n	1a00134a <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
1a00134c:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a00134e:	f7ff f9e9 	bl	1a000724 <vPortFree>
				vPortFree( pxTCB );
1a001352:	4620      	mov	r0, r4
1a001354:	f7ff f9e6 	bl	1a000724 <vPortFree>
	}
1a001358:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
1a00135a:	f7ff f9e3 	bl	1a000724 <vPortFree>
1a00135e:	e7fb      	b.n	1a001358 <prvDeleteTCB+0x30>

1a001360 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001360:	4b0f      	ldr	r3, [pc, #60]	; (1a0013a0 <prvCheckTasksWaitingTermination+0x40>)
1a001362:	681b      	ldr	r3, [r3, #0]
1a001364:	b1d3      	cbz	r3, 1a00139c <prvCheckTasksWaitingTermination+0x3c>
{
1a001366:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001368:	f000 ff5c 	bl	1a002224 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a00136c:	4b0d      	ldr	r3, [pc, #52]	; (1a0013a4 <prvCheckTasksWaitingTermination+0x44>)
1a00136e:	68db      	ldr	r3, [r3, #12]
1a001370:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001372:	1d20      	adds	r0, r4, #4
1a001374:	f7ff fe91 	bl	1a00109a <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001378:	4a0b      	ldr	r2, [pc, #44]	; (1a0013a8 <prvCheckTasksWaitingTermination+0x48>)
1a00137a:	6813      	ldr	r3, [r2, #0]
1a00137c:	3b01      	subs	r3, #1
1a00137e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001380:	4a07      	ldr	r2, [pc, #28]	; (1a0013a0 <prvCheckTasksWaitingTermination+0x40>)
1a001382:	6813      	ldr	r3, [r2, #0]
1a001384:	3b01      	subs	r3, #1
1a001386:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001388:	f000 ff6e 	bl	1a002268 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a00138c:	4620      	mov	r0, r4
1a00138e:	f7ff ffcb 	bl	1a001328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001392:	4b03      	ldr	r3, [pc, #12]	; (1a0013a0 <prvCheckTasksWaitingTermination+0x40>)
1a001394:	681b      	ldr	r3, [r3, #0]
1a001396:	2b00      	cmp	r3, #0
1a001398:	d1e6      	bne.n	1a001368 <prvCheckTasksWaitingTermination+0x8>
}
1a00139a:	bd10      	pop	{r4, pc}
1a00139c:	4770      	bx	lr
1a00139e:	bf00      	nop
1a0013a0:	100029e8 	.word	0x100029e8
1a0013a4:	10002a58 	.word	0x10002a58
1a0013a8:	100029e4 	.word	0x100029e4

1a0013ac <prvIdleTask>:
{
1a0013ac:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a0013ae:	f7ff ffd7 	bl	1a001360 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0013b2:	4b06      	ldr	r3, [pc, #24]	; (1a0013cc <prvIdleTask+0x20>)
1a0013b4:	681b      	ldr	r3, [r3, #0]
1a0013b6:	2b01      	cmp	r3, #1
1a0013b8:	d9f9      	bls.n	1a0013ae <prvIdleTask+0x2>
				taskYIELD();
1a0013ba:	4b05      	ldr	r3, [pc, #20]	; (1a0013d0 <prvIdleTask+0x24>)
1a0013bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0013c0:	601a      	str	r2, [r3, #0]
1a0013c2:	f3bf 8f4f 	dsb	sy
1a0013c6:	f3bf 8f6f 	isb	sy
1a0013ca:	e7f0      	b.n	1a0013ae <prvIdleTask+0x2>
1a0013cc:	10002958 	.word	0x10002958
1a0013d0:	e000ed04 	.word	0xe000ed04

1a0013d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0013d4:	b570      	push	{r4, r5, r6, lr}
1a0013d6:	4604      	mov	r4, r0
1a0013d8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0013da:	4b1d      	ldr	r3, [pc, #116]	; (1a001450 <prvAddCurrentTaskToDelayedList+0x7c>)
1a0013dc:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0013de:	4b1d      	ldr	r3, [pc, #116]	; (1a001454 <prvAddCurrentTaskToDelayedList+0x80>)
1a0013e0:	6818      	ldr	r0, [r3, #0]
1a0013e2:	3004      	adds	r0, #4
1a0013e4:	f7ff fe59 	bl	1a00109a <uxListRemove>
1a0013e8:	b950      	cbnz	r0, 1a001400 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0013ea:	4b1a      	ldr	r3, [pc, #104]	; (1a001454 <prvAddCurrentTaskToDelayedList+0x80>)
1a0013ec:	681b      	ldr	r3, [r3, #0]
1a0013ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0013f0:	2301      	movs	r3, #1
1a0013f2:	fa03 f202 	lsl.w	r2, r3, r2
1a0013f6:	4918      	ldr	r1, [pc, #96]	; (1a001458 <prvAddCurrentTaskToDelayedList+0x84>)
1a0013f8:	680b      	ldr	r3, [r1, #0]
1a0013fa:	ea23 0302 	bic.w	r3, r3, r2
1a0013fe:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001400:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001404:	d00d      	beq.n	1a001422 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001406:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001408:	4b12      	ldr	r3, [pc, #72]	; (1a001454 <prvAddCurrentTaskToDelayedList+0x80>)
1a00140a:	681b      	ldr	r3, [r3, #0]
1a00140c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a00140e:	42a6      	cmp	r6, r4
1a001410:	d910      	bls.n	1a001434 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001412:	4b12      	ldr	r3, [pc, #72]	; (1a00145c <prvAddCurrentTaskToDelayedList+0x88>)
1a001414:	6818      	ldr	r0, [r3, #0]
1a001416:	4b0f      	ldr	r3, [pc, #60]	; (1a001454 <prvAddCurrentTaskToDelayedList+0x80>)
1a001418:	6819      	ldr	r1, [r3, #0]
1a00141a:	3104      	adds	r1, #4
1a00141c:	f7ff fe24 	bl	1a001068 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001420:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001422:	2d00      	cmp	r5, #0
1a001424:	d0ef      	beq.n	1a001406 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001426:	4b0b      	ldr	r3, [pc, #44]	; (1a001454 <prvAddCurrentTaskToDelayedList+0x80>)
1a001428:	6819      	ldr	r1, [r3, #0]
1a00142a:	3104      	adds	r1, #4
1a00142c:	480c      	ldr	r0, [pc, #48]	; (1a001460 <prvAddCurrentTaskToDelayedList+0x8c>)
1a00142e:	f7ff fe10 	bl	1a001052 <vListInsertEnd>
1a001432:	e7f5      	b.n	1a001420 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001434:	4b0b      	ldr	r3, [pc, #44]	; (1a001464 <prvAddCurrentTaskToDelayedList+0x90>)
1a001436:	6818      	ldr	r0, [r3, #0]
1a001438:	4b06      	ldr	r3, [pc, #24]	; (1a001454 <prvAddCurrentTaskToDelayedList+0x80>)
1a00143a:	6819      	ldr	r1, [r3, #0]
1a00143c:	3104      	adds	r1, #4
1a00143e:	f7ff fe13 	bl	1a001068 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
1a001442:	4b09      	ldr	r3, [pc, #36]	; (1a001468 <prvAddCurrentTaskToDelayedList+0x94>)
1a001444:	681b      	ldr	r3, [r3, #0]
1a001446:	42a3      	cmp	r3, r4
1a001448:	d9ea      	bls.n	1a001420 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
1a00144a:	4b07      	ldr	r3, [pc, #28]	; (1a001468 <prvAddCurrentTaskToDelayedList+0x94>)
1a00144c:	601c      	str	r4, [r3, #0]
}
1a00144e:	e7e7      	b.n	1a001420 <prvAddCurrentTaskToDelayedList+0x4c>
1a001450:	10002a6c 	.word	0x10002a6c
1a001454:	1000294c 	.word	0x1000294c
1a001458:	100029f8 	.word	0x100029f8
1a00145c:	10002954 	.word	0x10002954
1a001460:	10002a44 	.word	0x10002a44
1a001464:	10002950 	.word	0x10002950
1a001468:	10002a24 	.word	0x10002a24

1a00146c <xTaskCreateStatic>:
	{
1a00146c:	b570      	push	{r4, r5, r6, lr}
1a00146e:	b086      	sub	sp, #24
1a001470:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001472:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001474:	b175      	cbz	r5, 1a001494 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
1a001476:	b1b4      	cbz	r4, 1a0014a6 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001478:	2660      	movs	r6, #96	; 0x60
1a00147a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a00147c:	9e04      	ldr	r6, [sp, #16]
1a00147e:	2e60      	cmp	r6, #96	; 0x60
1a001480:	d01a      	beq.n	1a0014b8 <xTaskCreateStatic+0x4c>
1a001482:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001486:	f383 8811 	msr	BASEPRI, r3
1a00148a:	f3bf 8f6f 	isb	sy
1a00148e:	f3bf 8f4f 	dsb	sy
1a001492:	e7fe      	b.n	1a001492 <xTaskCreateStatic+0x26>
1a001494:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001498:	f383 8811 	msr	BASEPRI, r3
1a00149c:	f3bf 8f6f 	isb	sy
1a0014a0:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
1a0014a4:	e7fe      	b.n	1a0014a4 <xTaskCreateStatic+0x38>
1a0014a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014aa:	f383 8811 	msr	BASEPRI, r3
1a0014ae:	f3bf 8f6f 	isb	sy
1a0014b2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
1a0014b6:	e7fe      	b.n	1a0014b6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0014b8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0014ba:	2502      	movs	r5, #2
1a0014bc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0014c0:	2500      	movs	r5, #0
1a0014c2:	9503      	str	r5, [sp, #12]
1a0014c4:	9402      	str	r4, [sp, #8]
1a0014c6:	ad05      	add	r5, sp, #20
1a0014c8:	9501      	str	r5, [sp, #4]
1a0014ca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0014cc:	9500      	str	r5, [sp, #0]
1a0014ce:	f7ff fe57 	bl	1a001180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0014d2:	4620      	mov	r0, r4
1a0014d4:	f7ff fed2 	bl	1a00127c <prvAddNewTaskToReadyList>
	}
1a0014d8:	9805      	ldr	r0, [sp, #20]
1a0014da:	b006      	add	sp, #24
1a0014dc:	bd70      	pop	{r4, r5, r6, pc}

1a0014de <xTaskCreate>:
	{
1a0014de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0014e2:	b085      	sub	sp, #20
1a0014e4:	4607      	mov	r7, r0
1a0014e6:	4688      	mov	r8, r1
1a0014e8:	4614      	mov	r4, r2
1a0014ea:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0014ec:	0090      	lsls	r0, r2, #2
1a0014ee:	f7ff f897 	bl	1a000620 <pvPortMalloc>
			if( pxStack != NULL )
1a0014f2:	b300      	cbz	r0, 1a001536 <xTaskCreate+0x58>
1a0014f4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0014f6:	2060      	movs	r0, #96	; 0x60
1a0014f8:	f7ff f892 	bl	1a000620 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a0014fc:	4605      	mov	r5, r0
1a0014fe:	b1b0      	cbz	r0, 1a00152e <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
1a001500:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001504:	b1e5      	cbz	r5, 1a001540 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001506:	2300      	movs	r3, #0
1a001508:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00150c:	9303      	str	r3, [sp, #12]
1a00150e:	9502      	str	r5, [sp, #8]
1a001510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001512:	9301      	str	r3, [sp, #4]
1a001514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001516:	9300      	str	r3, [sp, #0]
1a001518:	4633      	mov	r3, r6
1a00151a:	4622      	mov	r2, r4
1a00151c:	4641      	mov	r1, r8
1a00151e:	4638      	mov	r0, r7
1a001520:	f7ff fe2e 	bl	1a001180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001524:	4628      	mov	r0, r5
1a001526:	f7ff fea9 	bl	1a00127c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a00152a:	2001      	movs	r0, #1
1a00152c:	e005      	b.n	1a00153a <xTaskCreate+0x5c>
					vPortFree( pxStack );
1a00152e:	4648      	mov	r0, r9
1a001530:	f7ff f8f8 	bl	1a000724 <vPortFree>
1a001534:	e7e6      	b.n	1a001504 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
1a00153a:	b005      	add	sp, #20
1a00153c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001544:	e7f9      	b.n	1a00153a <xTaskCreate+0x5c>
1a001546:	Address 0x000000001a001546 is out of bounds.


1a001548 <vTaskStartScheduler>:
{
1a001548:	b510      	push	{r4, lr}
1a00154a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a00154c:	2400      	movs	r4, #0
1a00154e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001550:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001552:	aa07      	add	r2, sp, #28
1a001554:	a906      	add	r1, sp, #24
1a001556:	a805      	add	r0, sp, #20
1a001558:	f7ff fdb2 	bl	1a0010c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a00155c:	9b05      	ldr	r3, [sp, #20]
1a00155e:	9302      	str	r3, [sp, #8]
1a001560:	9b06      	ldr	r3, [sp, #24]
1a001562:	9301      	str	r3, [sp, #4]
1a001564:	9400      	str	r4, [sp, #0]
1a001566:	4623      	mov	r3, r4
1a001568:	9a07      	ldr	r2, [sp, #28]
1a00156a:	4917      	ldr	r1, [pc, #92]	; (1a0015c8 <vTaskStartScheduler+0x80>)
1a00156c:	4817      	ldr	r0, [pc, #92]	; (1a0015cc <vTaskStartScheduler+0x84>)
1a00156e:	f7ff ff7d 	bl	1a00146c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001572:	b148      	cbz	r0, 1a001588 <vTaskStartScheduler+0x40>
			xReturn = xTimerCreateTimerTask();
1a001574:	f000 fc44 	bl	1a001e00 <xTimerCreateTimerTask>
1a001578:	4603      	mov	r3, r0
	if( xReturn == pdPASS )
1a00157a:	2b01      	cmp	r3, #1
1a00157c:	d006      	beq.n	1a00158c <vTaskStartScheduler+0x44>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a00157e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a001582:	d018      	beq.n	1a0015b6 <vTaskStartScheduler+0x6e>
}
1a001584:	b008      	add	sp, #32
1a001586:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001588:	2300      	movs	r3, #0
1a00158a:	e7f6      	b.n	1a00157a <vTaskStartScheduler+0x32>
1a00158c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001590:	f383 8811 	msr	BASEPRI, r3
1a001594:	f3bf 8f6f 	isb	sy
1a001598:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a00159c:	4b0c      	ldr	r3, [pc, #48]	; (1a0015d0 <vTaskStartScheduler+0x88>)
1a00159e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0015a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0015a4:	4b0b      	ldr	r3, [pc, #44]	; (1a0015d4 <vTaskStartScheduler+0x8c>)
1a0015a6:	2201      	movs	r2, #1
1a0015a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0015aa:	4b0b      	ldr	r3, [pc, #44]	; (1a0015d8 <vTaskStartScheduler+0x90>)
1a0015ac:	2200      	movs	r2, #0
1a0015ae:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a0015b0:	f000 feda 	bl	1a002368 <xPortStartScheduler>
1a0015b4:	e7e6      	b.n	1a001584 <vTaskStartScheduler+0x3c>
1a0015b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0015ba:	f383 8811 	msr	BASEPRI, r3
1a0015be:	f3bf 8f6f 	isb	sy
1a0015c2:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0015c6:	e7fe      	b.n	1a0015c6 <vTaskStartScheduler+0x7e>
1a0015c8:	1a004f20 	.word	0x1a004f20
1a0015cc:	1a0013ad 	.word	0x1a0013ad
1a0015d0:	10002a24 	.word	0x10002a24
1a0015d4:	10002a40 	.word	0x10002a40
1a0015d8:	10002a6c 	.word	0x10002a6c

1a0015dc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a0015dc:	4a02      	ldr	r2, [pc, #8]	; (1a0015e8 <vTaskSuspendAll+0xc>)
1a0015de:	6813      	ldr	r3, [r2, #0]
1a0015e0:	3301      	adds	r3, #1
1a0015e2:	6013      	str	r3, [r2, #0]
}
1a0015e4:	4770      	bx	lr
1a0015e6:	bf00      	nop
1a0015e8:	100029f0 	.word	0x100029f0

1a0015ec <xTaskGetTickCount>:
		xTicks = xTickCount;
1a0015ec:	4b01      	ldr	r3, [pc, #4]	; (1a0015f4 <xTaskGetTickCount+0x8>)
1a0015ee:	6818      	ldr	r0, [r3, #0]
}
1a0015f0:	4770      	bx	lr
1a0015f2:	bf00      	nop
1a0015f4:	10002a6c 	.word	0x10002a6c

1a0015f8 <xTaskIncrementTick>:
{
1a0015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0015fa:	4b3a      	ldr	r3, [pc, #232]	; (1a0016e4 <xTaskIncrementTick+0xec>)
1a0015fc:	681b      	ldr	r3, [r3, #0]
1a0015fe:	2b00      	cmp	r3, #0
1a001600:	d164      	bne.n	1a0016cc <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001602:	4b39      	ldr	r3, [pc, #228]	; (1a0016e8 <xTaskIncrementTick+0xf0>)
1a001604:	681d      	ldr	r5, [r3, #0]
1a001606:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001608:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a00160a:	b9c5      	cbnz	r5, 1a00163e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a00160c:	4b37      	ldr	r3, [pc, #220]	; (1a0016ec <xTaskIncrementTick+0xf4>)
1a00160e:	681b      	ldr	r3, [r3, #0]
1a001610:	681b      	ldr	r3, [r3, #0]
1a001612:	b143      	cbz	r3, 1a001626 <xTaskIncrementTick+0x2e>
1a001614:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001618:	f383 8811 	msr	BASEPRI, r3
1a00161c:	f3bf 8f6f 	isb	sy
1a001620:	f3bf 8f4f 	dsb	sy
1a001624:	e7fe      	b.n	1a001624 <xTaskIncrementTick+0x2c>
1a001626:	4a31      	ldr	r2, [pc, #196]	; (1a0016ec <xTaskIncrementTick+0xf4>)
1a001628:	6811      	ldr	r1, [r2, #0]
1a00162a:	4b31      	ldr	r3, [pc, #196]	; (1a0016f0 <xTaskIncrementTick+0xf8>)
1a00162c:	6818      	ldr	r0, [r3, #0]
1a00162e:	6010      	str	r0, [r2, #0]
1a001630:	6019      	str	r1, [r3, #0]
1a001632:	4a30      	ldr	r2, [pc, #192]	; (1a0016f4 <xTaskIncrementTick+0xfc>)
1a001634:	6813      	ldr	r3, [r2, #0]
1a001636:	3301      	adds	r3, #1
1a001638:	6013      	str	r3, [r2, #0]
1a00163a:	f7ff fd8b 	bl	1a001154 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a00163e:	4b2e      	ldr	r3, [pc, #184]	; (1a0016f8 <xTaskIncrementTick+0x100>)
1a001640:	681b      	ldr	r3, [r3, #0]
1a001642:	42ab      	cmp	r3, r5
1a001644:	d938      	bls.n	1a0016b8 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001646:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001648:	4b2c      	ldr	r3, [pc, #176]	; (1a0016fc <xTaskIncrementTick+0x104>)
1a00164a:	681b      	ldr	r3, [r3, #0]
1a00164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00164e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001652:	009a      	lsls	r2, r3, #2
1a001654:	4b2a      	ldr	r3, [pc, #168]	; (1a001700 <xTaskIncrementTick+0x108>)
1a001656:	589b      	ldr	r3, [r3, r2]
1a001658:	2b01      	cmp	r3, #1
1a00165a:	d93c      	bls.n	1a0016d6 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a00165c:	2401      	movs	r4, #1
1a00165e:	e03a      	b.n	1a0016d6 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001660:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001662:	4b22      	ldr	r3, [pc, #136]	; (1a0016ec <xTaskIncrementTick+0xf4>)
1a001664:	681b      	ldr	r3, [r3, #0]
1a001666:	681b      	ldr	r3, [r3, #0]
1a001668:	b343      	cbz	r3, 1a0016bc <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00166a:	4b20      	ldr	r3, [pc, #128]	; (1a0016ec <xTaskIncrementTick+0xf4>)
1a00166c:	681b      	ldr	r3, [r3, #0]
1a00166e:	68db      	ldr	r3, [r3, #12]
1a001670:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001672:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001674:	429d      	cmp	r5, r3
1a001676:	d326      	bcc.n	1a0016c6 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001678:	1d37      	adds	r7, r6, #4
1a00167a:	4638      	mov	r0, r7
1a00167c:	f7ff fd0d 	bl	1a00109a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001680:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001682:	b11b      	cbz	r3, 1a00168c <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001684:	f106 0018 	add.w	r0, r6, #24
1a001688:	f7ff fd07 	bl	1a00109a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a00168c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a00168e:	2201      	movs	r2, #1
1a001690:	409a      	lsls	r2, r3
1a001692:	491c      	ldr	r1, [pc, #112]	; (1a001704 <xTaskIncrementTick+0x10c>)
1a001694:	6808      	ldr	r0, [r1, #0]
1a001696:	4302      	orrs	r2, r0
1a001698:	600a      	str	r2, [r1, #0]
1a00169a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00169e:	009a      	lsls	r2, r3, #2
1a0016a0:	4639      	mov	r1, r7
1a0016a2:	4817      	ldr	r0, [pc, #92]	; (1a001700 <xTaskIncrementTick+0x108>)
1a0016a4:	4410      	add	r0, r2
1a0016a6:	f7ff fcd4 	bl	1a001052 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a0016aa:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a0016ac:	4b13      	ldr	r3, [pc, #76]	; (1a0016fc <xTaskIncrementTick+0x104>)
1a0016ae:	681b      	ldr	r3, [r3, #0]
1a0016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0016b2:	429a      	cmp	r2, r3
1a0016b4:	d2d4      	bcs.n	1a001660 <xTaskIncrementTick+0x68>
1a0016b6:	e7d4      	b.n	1a001662 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a0016b8:	2400      	movs	r4, #0
1a0016ba:	e7d2      	b.n	1a001662 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0016bc:	4b0e      	ldr	r3, [pc, #56]	; (1a0016f8 <xTaskIncrementTick+0x100>)
1a0016be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0016c2:	601a      	str	r2, [r3, #0]
					break;
1a0016c4:	e7c0      	b.n	1a001648 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a0016c6:	4a0c      	ldr	r2, [pc, #48]	; (1a0016f8 <xTaskIncrementTick+0x100>)
1a0016c8:	6013      	str	r3, [r2, #0]
						break;
1a0016ca:	e7bd      	b.n	1a001648 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a0016cc:	4a0e      	ldr	r2, [pc, #56]	; (1a001708 <xTaskIncrementTick+0x110>)
1a0016ce:	6813      	ldr	r3, [r2, #0]
1a0016d0:	3301      	adds	r3, #1
1a0016d2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a0016d4:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a0016d6:	4b0d      	ldr	r3, [pc, #52]	; (1a00170c <xTaskIncrementTick+0x114>)
1a0016d8:	681b      	ldr	r3, [r3, #0]
1a0016da:	b103      	cbz	r3, 1a0016de <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a0016dc:	2401      	movs	r4, #1
}
1a0016de:	4620      	mov	r0, r4
1a0016e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0016e2:	bf00      	nop
1a0016e4:	100029f0 	.word	0x100029f0
1a0016e8:	10002a6c 	.word	0x10002a6c
1a0016ec:	10002950 	.word	0x10002950
1a0016f0:	10002954 	.word	0x10002954
1a0016f4:	10002a28 	.word	0x10002a28
1a0016f8:	10002a24 	.word	0x10002a24
1a0016fc:	1000294c 	.word	0x1000294c
1a001700:	10002958 	.word	0x10002958
1a001704:	100029f8 	.word	0x100029f8
1a001708:	100029ec 	.word	0x100029ec
1a00170c:	10002a70 	.word	0x10002a70

1a001710 <xTaskResumeAll>:
{
1a001710:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001712:	4b34      	ldr	r3, [pc, #208]	; (1a0017e4 <xTaskResumeAll+0xd4>)
1a001714:	681b      	ldr	r3, [r3, #0]
1a001716:	b943      	cbnz	r3, 1a00172a <xTaskResumeAll+0x1a>
1a001718:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00171c:	f383 8811 	msr	BASEPRI, r3
1a001720:	f3bf 8f6f 	isb	sy
1a001724:	f3bf 8f4f 	dsb	sy
1a001728:	e7fe      	b.n	1a001728 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a00172a:	f000 fd7b 	bl	1a002224 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00172e:	4b2d      	ldr	r3, [pc, #180]	; (1a0017e4 <xTaskResumeAll+0xd4>)
1a001730:	681a      	ldr	r2, [r3, #0]
1a001732:	3a01      	subs	r2, #1
1a001734:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001736:	681b      	ldr	r3, [r3, #0]
1a001738:	2b00      	cmp	r3, #0
1a00173a:	d14d      	bne.n	1a0017d8 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a00173c:	4b2a      	ldr	r3, [pc, #168]	; (1a0017e8 <xTaskResumeAll+0xd8>)
1a00173e:	681b      	ldr	r3, [r3, #0]
1a001740:	b90b      	cbnz	r3, 1a001746 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
1a001742:	2400      	movs	r4, #0
1a001744:	e049      	b.n	1a0017da <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
1a001746:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001748:	4b28      	ldr	r3, [pc, #160]	; (1a0017ec <xTaskResumeAll+0xdc>)
1a00174a:	681b      	ldr	r3, [r3, #0]
1a00174c:	b31b      	cbz	r3, 1a001796 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a00174e:	4b27      	ldr	r3, [pc, #156]	; (1a0017ec <xTaskResumeAll+0xdc>)
1a001750:	68db      	ldr	r3, [r3, #12]
1a001752:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001754:	f104 0018 	add.w	r0, r4, #24
1a001758:	f7ff fc9f 	bl	1a00109a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00175c:	1d25      	adds	r5, r4, #4
1a00175e:	4628      	mov	r0, r5
1a001760:	f7ff fc9b 	bl	1a00109a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001764:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a001766:	2301      	movs	r3, #1
1a001768:	4083      	lsls	r3, r0
1a00176a:	4a21      	ldr	r2, [pc, #132]	; (1a0017f0 <xTaskResumeAll+0xe0>)
1a00176c:	6811      	ldr	r1, [r2, #0]
1a00176e:	430b      	orrs	r3, r1
1a001770:	6013      	str	r3, [r2, #0]
1a001772:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001776:	4629      	mov	r1, r5
1a001778:	4b1e      	ldr	r3, [pc, #120]	; (1a0017f4 <xTaskResumeAll+0xe4>)
1a00177a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a00177e:	f7ff fc68 	bl	1a001052 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001782:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001784:	4b1c      	ldr	r3, [pc, #112]	; (1a0017f8 <xTaskResumeAll+0xe8>)
1a001786:	681b      	ldr	r3, [r3, #0]
1a001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00178a:	429a      	cmp	r2, r3
1a00178c:	d3dc      	bcc.n	1a001748 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
1a00178e:	4b1b      	ldr	r3, [pc, #108]	; (1a0017fc <xTaskResumeAll+0xec>)
1a001790:	2201      	movs	r2, #1
1a001792:	601a      	str	r2, [r3, #0]
1a001794:	e7d8      	b.n	1a001748 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
1a001796:	b10c      	cbz	r4, 1a00179c <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
1a001798:	f7ff fcdc 	bl	1a001154 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00179c:	4b18      	ldr	r3, [pc, #96]	; (1a001800 <xTaskResumeAll+0xf0>)
1a00179e:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0017a0:	b974      	cbnz	r4, 1a0017c0 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
1a0017a2:	4b16      	ldr	r3, [pc, #88]	; (1a0017fc <xTaskResumeAll+0xec>)
1a0017a4:	681c      	ldr	r4, [r3, #0]
1a0017a6:	b1c4      	cbz	r4, 1a0017da <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
1a0017a8:	4b16      	ldr	r3, [pc, #88]	; (1a001804 <xTaskResumeAll+0xf4>)
1a0017aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017ae:	601a      	str	r2, [r3, #0]
1a0017b0:	f3bf 8f4f 	dsb	sy
1a0017b4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0017b8:	2401      	movs	r4, #1
1a0017ba:	e00e      	b.n	1a0017da <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0017bc:	3c01      	subs	r4, #1
1a0017be:	d007      	beq.n	1a0017d0 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
1a0017c0:	f7ff ff1a 	bl	1a0015f8 <xTaskIncrementTick>
1a0017c4:	2800      	cmp	r0, #0
1a0017c6:	d0f9      	beq.n	1a0017bc <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
1a0017c8:	4b0c      	ldr	r3, [pc, #48]	; (1a0017fc <xTaskResumeAll+0xec>)
1a0017ca:	2201      	movs	r2, #1
1a0017cc:	601a      	str	r2, [r3, #0]
1a0017ce:	e7f5      	b.n	1a0017bc <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
1a0017d0:	4b0b      	ldr	r3, [pc, #44]	; (1a001800 <xTaskResumeAll+0xf0>)
1a0017d2:	2200      	movs	r2, #0
1a0017d4:	601a      	str	r2, [r3, #0]
1a0017d6:	e7e4      	b.n	1a0017a2 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
1a0017d8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0017da:	f000 fd45 	bl	1a002268 <vPortExitCritical>
}
1a0017de:	4620      	mov	r0, r4
1a0017e0:	bd38      	pop	{r3, r4, r5, pc}
1a0017e2:	bf00      	nop
1a0017e4:	100029f0 	.word	0x100029f0
1a0017e8:	100029e4 	.word	0x100029e4
1a0017ec:	10002a2c 	.word	0x10002a2c
1a0017f0:	100029f8 	.word	0x100029f8
1a0017f4:	10002958 	.word	0x10002958
1a0017f8:	1000294c 	.word	0x1000294c
1a0017fc:	10002a70 	.word	0x10002a70
1a001800:	100029ec 	.word	0x100029ec
1a001804:	e000ed04 	.word	0xe000ed04

1a001808 <vTaskDelay>:
	{
1a001808:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a00180a:	b1a8      	cbz	r0, 1a001838 <vTaskDelay+0x30>
1a00180c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a00180e:	4b0f      	ldr	r3, [pc, #60]	; (1a00184c <vTaskDelay+0x44>)
1a001810:	681b      	ldr	r3, [r3, #0]
1a001812:	b143      	cbz	r3, 1a001826 <vTaskDelay+0x1e>
1a001814:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001818:	f383 8811 	msr	BASEPRI, r3
1a00181c:	f3bf 8f6f 	isb	sy
1a001820:	f3bf 8f4f 	dsb	sy
1a001824:	e7fe      	b.n	1a001824 <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a001826:	f7ff fed9 	bl	1a0015dc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a00182a:	2100      	movs	r1, #0
1a00182c:	4620      	mov	r0, r4
1a00182e:	f7ff fdd1 	bl	1a0013d4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a001832:	f7ff ff6d 	bl	1a001710 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a001836:	b938      	cbnz	r0, 1a001848 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a001838:	4b05      	ldr	r3, [pc, #20]	; (1a001850 <vTaskDelay+0x48>)
1a00183a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00183e:	601a      	str	r2, [r3, #0]
1a001840:	f3bf 8f4f 	dsb	sy
1a001844:	f3bf 8f6f 	isb	sy
	}
1a001848:	bd10      	pop	{r4, pc}
1a00184a:	bf00      	nop
1a00184c:	100029f0 	.word	0x100029f0
1a001850:	e000ed04 	.word	0xe000ed04

1a001854 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001854:	4b2c      	ldr	r3, [pc, #176]	; (1a001908 <vTaskSwitchContext+0xb4>)
1a001856:	681b      	ldr	r3, [r3, #0]
1a001858:	b11b      	cbz	r3, 1a001862 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a00185a:	4b2c      	ldr	r3, [pc, #176]	; (1a00190c <vTaskSwitchContext+0xb8>)
1a00185c:	2201      	movs	r2, #1
1a00185e:	601a      	str	r2, [r3, #0]
1a001860:	4770      	bx	lr
{
1a001862:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a001864:	4b29      	ldr	r3, [pc, #164]	; (1a00190c <vTaskSwitchContext+0xb8>)
1a001866:	2200      	movs	r2, #0
1a001868:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a00186a:	4b29      	ldr	r3, [pc, #164]	; (1a001910 <vTaskSwitchContext+0xbc>)
1a00186c:	681b      	ldr	r3, [r3, #0]
1a00186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001870:	681a      	ldr	r2, [r3, #0]
1a001872:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001876:	d103      	bne.n	1a001880 <vTaskSwitchContext+0x2c>
1a001878:	685a      	ldr	r2, [r3, #4]
1a00187a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00187e:	d01b      	beq.n	1a0018b8 <vTaskSwitchContext+0x64>
1a001880:	4b23      	ldr	r3, [pc, #140]	; (1a001910 <vTaskSwitchContext+0xbc>)
1a001882:	6818      	ldr	r0, [r3, #0]
1a001884:	6819      	ldr	r1, [r3, #0]
1a001886:	3134      	adds	r1, #52	; 0x34
1a001888:	f7ff fc56 	bl	1a001138 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00188c:	4b21      	ldr	r3, [pc, #132]	; (1a001914 <vTaskSwitchContext+0xc0>)
1a00188e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001890:	fab3 f383 	clz	r3, r3
1a001894:	b2db      	uxtb	r3, r3
1a001896:	f1c3 031f 	rsb	r3, r3, #31
1a00189a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a00189e:	008a      	lsls	r2, r1, #2
1a0018a0:	491d      	ldr	r1, [pc, #116]	; (1a001918 <vTaskSwitchContext+0xc4>)
1a0018a2:	588a      	ldr	r2, [r1, r2]
1a0018a4:	b98a      	cbnz	r2, 1a0018ca <vTaskSwitchContext+0x76>
	__asm volatile
1a0018a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018aa:	f383 8811 	msr	BASEPRI, r3
1a0018ae:	f3bf 8f6f 	isb	sy
1a0018b2:	f3bf 8f4f 	dsb	sy
1a0018b6:	e7fe      	b.n	1a0018b6 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a0018b8:	689a      	ldr	r2, [r3, #8]
1a0018ba:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0018be:	d1df      	bne.n	1a001880 <vTaskSwitchContext+0x2c>
1a0018c0:	68db      	ldr	r3, [r3, #12]
1a0018c2:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a0018c6:	d1db      	bne.n	1a001880 <vTaskSwitchContext+0x2c>
1a0018c8:	e7e0      	b.n	1a00188c <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0018ca:	4913      	ldr	r1, [pc, #76]	; (1a001918 <vTaskSwitchContext+0xc4>)
1a0018cc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
1a0018d0:	0082      	lsls	r2, r0, #2
1a0018d2:	440a      	add	r2, r1
1a0018d4:	6850      	ldr	r0, [r2, #4]
1a0018d6:	6840      	ldr	r0, [r0, #4]
1a0018d8:	6050      	str	r0, [r2, #4]
1a0018da:	eb03 0483 	add.w	r4, r3, r3, lsl #2
1a0018de:	00a2      	lsls	r2, r4, #2
1a0018e0:	4614      	mov	r4, r2
1a0018e2:	3208      	adds	r2, #8
1a0018e4:	4411      	add	r1, r2
1a0018e6:	4288      	cmp	r0, r1
1a0018e8:	d009      	beq.n	1a0018fe <vTaskSwitchContext+0xaa>
1a0018ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0018ee:	009a      	lsls	r2, r3, #2
1a0018f0:	4b09      	ldr	r3, [pc, #36]	; (1a001918 <vTaskSwitchContext+0xc4>)
1a0018f2:	4413      	add	r3, r2
1a0018f4:	685b      	ldr	r3, [r3, #4]
1a0018f6:	68da      	ldr	r2, [r3, #12]
1a0018f8:	4b05      	ldr	r3, [pc, #20]	; (1a001910 <vTaskSwitchContext+0xbc>)
1a0018fa:	601a      	str	r2, [r3, #0]
}
1a0018fc:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0018fe:	6840      	ldr	r0, [r0, #4]
1a001900:	4a05      	ldr	r2, [pc, #20]	; (1a001918 <vTaskSwitchContext+0xc4>)
1a001902:	4422      	add	r2, r4
1a001904:	6050      	str	r0, [r2, #4]
1a001906:	e7f0      	b.n	1a0018ea <vTaskSwitchContext+0x96>
1a001908:	100029f0 	.word	0x100029f0
1a00190c:	10002a70 	.word	0x10002a70
1a001910:	1000294c 	.word	0x1000294c
1a001914:	100029f8 	.word	0x100029f8
1a001918:	10002958 	.word	0x10002958

1a00191c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a00191c:	b158      	cbz	r0, 1a001936 <vTaskPlaceOnEventList+0x1a>
{
1a00191e:	b510      	push	{r4, lr}
1a001920:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001922:	4b09      	ldr	r3, [pc, #36]	; (1a001948 <vTaskPlaceOnEventList+0x2c>)
1a001924:	6819      	ldr	r1, [r3, #0]
1a001926:	3118      	adds	r1, #24
1a001928:	f7ff fb9e 	bl	1a001068 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00192c:	2101      	movs	r1, #1
1a00192e:	4620      	mov	r0, r4
1a001930:	f7ff fd50 	bl	1a0013d4 <prvAddCurrentTaskToDelayedList>
}
1a001934:	bd10      	pop	{r4, pc}
1a001936:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00193a:	f383 8811 	msr	BASEPRI, r3
1a00193e:	f3bf 8f6f 	isb	sy
1a001942:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
1a001946:	e7fe      	b.n	1a001946 <vTaskPlaceOnEventList+0x2a>
1a001948:	1000294c 	.word	0x1000294c

1a00194c <vTaskPlaceOnEventListRestricted>:
	{
1a00194c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00194e:	b170      	cbz	r0, 1a00196e <vTaskPlaceOnEventListRestricted+0x22>
1a001950:	460c      	mov	r4, r1
1a001952:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001954:	4b0a      	ldr	r3, [pc, #40]	; (1a001980 <vTaskPlaceOnEventListRestricted+0x34>)
1a001956:	6819      	ldr	r1, [r3, #0]
1a001958:	3118      	adds	r1, #24
1a00195a:	f7ff fb7a 	bl	1a001052 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a00195e:	b10d      	cbz	r5, 1a001964 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
1a001960:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001964:	4629      	mov	r1, r5
1a001966:	4620      	mov	r0, r4
1a001968:	f7ff fd34 	bl	1a0013d4 <prvAddCurrentTaskToDelayedList>
	}
1a00196c:	bd38      	pop	{r3, r4, r5, pc}
1a00196e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001972:	f383 8811 	msr	BASEPRI, r3
1a001976:	f3bf 8f6f 	isb	sy
1a00197a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
1a00197e:	e7fe      	b.n	1a00197e <vTaskPlaceOnEventListRestricted+0x32>
1a001980:	1000294c 	.word	0x1000294c

1a001984 <xTaskRemoveFromEventList>:
{
1a001984:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001986:	68c3      	ldr	r3, [r0, #12]
1a001988:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a00198a:	b324      	cbz	r4, 1a0019d6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a00198c:	f104 0518 	add.w	r5, r4, #24
1a001990:	4628      	mov	r0, r5
1a001992:	f7ff fb82 	bl	1a00109a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001996:	4b18      	ldr	r3, [pc, #96]	; (1a0019f8 <xTaskRemoveFromEventList+0x74>)
1a001998:	681b      	ldr	r3, [r3, #0]
1a00199a:	bb2b      	cbnz	r3, 1a0019e8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a00199c:	1d25      	adds	r5, r4, #4
1a00199e:	4628      	mov	r0, r5
1a0019a0:	f7ff fb7b 	bl	1a00109a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a0019a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a0019a6:	2301      	movs	r3, #1
1a0019a8:	4083      	lsls	r3, r0
1a0019aa:	4a14      	ldr	r2, [pc, #80]	; (1a0019fc <xTaskRemoveFromEventList+0x78>)
1a0019ac:	6811      	ldr	r1, [r2, #0]
1a0019ae:	430b      	orrs	r3, r1
1a0019b0:	6013      	str	r3, [r2, #0]
1a0019b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0019b6:	4629      	mov	r1, r5
1a0019b8:	4b11      	ldr	r3, [pc, #68]	; (1a001a00 <xTaskRemoveFromEventList+0x7c>)
1a0019ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a0019be:	f7ff fb48 	bl	1a001052 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a0019c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0019c4:	4b0f      	ldr	r3, [pc, #60]	; (1a001a04 <xTaskRemoveFromEventList+0x80>)
1a0019c6:	681b      	ldr	r3, [r3, #0]
1a0019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0019ca:	429a      	cmp	r2, r3
1a0019cc:	d911      	bls.n	1a0019f2 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0019ce:	2001      	movs	r0, #1
1a0019d0:	4b0d      	ldr	r3, [pc, #52]	; (1a001a08 <xTaskRemoveFromEventList+0x84>)
1a0019d2:	6018      	str	r0, [r3, #0]
1a0019d4:	e00e      	b.n	1a0019f4 <xTaskRemoveFromEventList+0x70>
1a0019d6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019da:	f383 8811 	msr	BASEPRI, r3
1a0019de:	f3bf 8f6f 	isb	sy
1a0019e2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
1a0019e6:	e7fe      	b.n	1a0019e6 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0019e8:	4629      	mov	r1, r5
1a0019ea:	4808      	ldr	r0, [pc, #32]	; (1a001a0c <xTaskRemoveFromEventList+0x88>)
1a0019ec:	f7ff fb31 	bl	1a001052 <vListInsertEnd>
1a0019f0:	e7e7      	b.n	1a0019c2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
1a0019f2:	2000      	movs	r0, #0
}
1a0019f4:	bd38      	pop	{r3, r4, r5, pc}
1a0019f6:	bf00      	nop
1a0019f8:	100029f0 	.word	0x100029f0
1a0019fc:	100029f8 	.word	0x100029f8
1a001a00:	10002958 	.word	0x10002958
1a001a04:	1000294c 	.word	0x1000294c
1a001a08:	10002a70 	.word	0x10002a70
1a001a0c:	10002a2c 	.word	0x10002a2c

1a001a10 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001a10:	4b03      	ldr	r3, [pc, #12]	; (1a001a20 <vTaskInternalSetTimeOutState+0x10>)
1a001a12:	681b      	ldr	r3, [r3, #0]
1a001a14:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001a16:	4b03      	ldr	r3, [pc, #12]	; (1a001a24 <vTaskInternalSetTimeOutState+0x14>)
1a001a18:	681b      	ldr	r3, [r3, #0]
1a001a1a:	6043      	str	r3, [r0, #4]
}
1a001a1c:	4770      	bx	lr
1a001a1e:	bf00      	nop
1a001a20:	10002a28 	.word	0x10002a28
1a001a24:	10002a6c 	.word	0x10002a6c

1a001a28 <xTaskCheckForTimeOut>:
{
1a001a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a001a2a:	b1c8      	cbz	r0, 1a001a60 <xTaskCheckForTimeOut+0x38>
1a001a2c:	460c      	mov	r4, r1
1a001a2e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001a30:	b1f9      	cbz	r1, 1a001a72 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
1a001a32:	f000 fbf7 	bl	1a002224 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a001a36:	4b1b      	ldr	r3, [pc, #108]	; (1a001aa4 <xTaskCheckForTimeOut+0x7c>)
1a001a38:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001a3a:	686b      	ldr	r3, [r5, #4]
1a001a3c:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
1a001a3e:	6822      	ldr	r2, [r4, #0]
1a001a40:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
1a001a44:	d026      	beq.n	1a001a94 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001a46:	682f      	ldr	r7, [r5, #0]
1a001a48:	4e17      	ldr	r6, [pc, #92]	; (1a001aa8 <xTaskCheckForTimeOut+0x80>)
1a001a4a:	6836      	ldr	r6, [r6, #0]
1a001a4c:	42b7      	cmp	r7, r6
1a001a4e:	d001      	beq.n	1a001a54 <xTaskCheckForTimeOut+0x2c>
1a001a50:	428b      	cmp	r3, r1
1a001a52:	d924      	bls.n	1a001a9e <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001a54:	4282      	cmp	r2, r0
1a001a56:	d815      	bhi.n	1a001a84 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a001a58:	2300      	movs	r3, #0
1a001a5a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001a5c:	2401      	movs	r4, #1
1a001a5e:	e01a      	b.n	1a001a96 <xTaskCheckForTimeOut+0x6e>
1a001a60:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a64:	f383 8811 	msr	BASEPRI, r3
1a001a68:	f3bf 8f6f 	isb	sy
1a001a6c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
1a001a70:	e7fe      	b.n	1a001a70 <xTaskCheckForTimeOut+0x48>
1a001a72:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a76:	f383 8811 	msr	BASEPRI, r3
1a001a7a:	f3bf 8f6f 	isb	sy
1a001a7e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
1a001a82:	e7fe      	b.n	1a001a82 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
1a001a84:	1a5b      	subs	r3, r3, r1
1a001a86:	4413      	add	r3, r2
1a001a88:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001a8a:	4628      	mov	r0, r5
1a001a8c:	f7ff ffc0 	bl	1a001a10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001a90:	2400      	movs	r4, #0
1a001a92:	e000      	b.n	1a001a96 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
1a001a94:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001a96:	f000 fbe7 	bl	1a002268 <vPortExitCritical>
}
1a001a9a:	4620      	mov	r0, r4
1a001a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
1a001a9e:	2401      	movs	r4, #1
1a001aa0:	e7f9      	b.n	1a001a96 <xTaskCheckForTimeOut+0x6e>
1a001aa2:	bf00      	nop
1a001aa4:	10002a6c 	.word	0x10002a6c
1a001aa8:	10002a28 	.word	0x10002a28

1a001aac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a001aac:	4b01      	ldr	r3, [pc, #4]	; (1a001ab4 <vTaskMissedYield+0x8>)
1a001aae:	2201      	movs	r2, #1
1a001ab0:	601a      	str	r2, [r3, #0]
}
1a001ab2:	4770      	bx	lr
1a001ab4:	10002a70 	.word	0x10002a70

1a001ab8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a001ab8:	4b05      	ldr	r3, [pc, #20]	; (1a001ad0 <xTaskGetSchedulerState+0x18>)
1a001aba:	681b      	ldr	r3, [r3, #0]
1a001abc:	b133      	cbz	r3, 1a001acc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001abe:	4b05      	ldr	r3, [pc, #20]	; (1a001ad4 <xTaskGetSchedulerState+0x1c>)
1a001ac0:	681b      	ldr	r3, [r3, #0]
1a001ac2:	b10b      	cbz	r3, 1a001ac8 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a001ac4:	2000      	movs	r0, #0
	}
1a001ac6:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a001ac8:	2002      	movs	r0, #2
1a001aca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001acc:	2001      	movs	r0, #1
1a001ace:	4770      	bx	lr
1a001ad0:	10002a40 	.word	0x10002a40
1a001ad4:	100029f0 	.word	0x100029f0

1a001ad8 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
1a001ad8:	2800      	cmp	r0, #0
1a001ada:	d051      	beq.n	1a001b80 <xTaskPriorityInherit+0xa8>
	{
1a001adc:	b538      	push	{r3, r4, r5, lr}
1a001ade:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
1a001ae0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
1a001ae2:	4a29      	ldr	r2, [pc, #164]	; (1a001b88 <xTaskPriorityInherit+0xb0>)
1a001ae4:	6812      	ldr	r2, [r2, #0]
1a001ae6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001ae8:	4293      	cmp	r3, r2
1a001aea:	d241      	bcs.n	1a001b70 <xTaskPriorityInherit+0x98>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001aec:	6982      	ldr	r2, [r0, #24]
1a001aee:	2a00      	cmp	r2, #0
1a001af0:	db05      	blt.n	1a001afe <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001af2:	4a25      	ldr	r2, [pc, #148]	; (1a001b88 <xTaskPriorityInherit+0xb0>)
1a001af4:	6812      	ldr	r2, [r2, #0]
1a001af6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
1a001af8:	f1c2 0207 	rsb	r2, r2, #7
1a001afc:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
1a001afe:	6961      	ldr	r1, [r4, #20]
1a001b00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b04:	4a21      	ldr	r2, [pc, #132]	; (1a001b8c <xTaskPriorityInherit+0xb4>)
1a001b06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
1a001b0a:	4299      	cmp	r1, r3
1a001b0c:	d005      	beq.n	1a001b1a <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001b0e:	4b1e      	ldr	r3, [pc, #120]	; (1a001b88 <xTaskPriorityInherit+0xb0>)
1a001b10:	681b      	ldr	r3, [r3, #0]
1a001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b14:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
1a001b16:	2001      	movs	r0, #1
	}
1a001b18:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001b1a:	1d25      	adds	r5, r4, #4
1a001b1c:	4628      	mov	r0, r5
1a001b1e:	f7ff fabc 	bl	1a00109a <uxListRemove>
1a001b22:	b1a0      	cbz	r0, 1a001b4e <xTaskPriorityInherit+0x76>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
1a001b24:	4b18      	ldr	r3, [pc, #96]	; (1a001b88 <xTaskPriorityInherit+0xb0>)
1a001b26:	681b      	ldr	r3, [r3, #0]
1a001b28:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
1a001b2a:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
1a001b2c:	2401      	movs	r4, #1
1a001b2e:	fa04 f300 	lsl.w	r3, r4, r0
1a001b32:	4a17      	ldr	r2, [pc, #92]	; (1a001b90 <xTaskPriorityInherit+0xb8>)
1a001b34:	6811      	ldr	r1, [r2, #0]
1a001b36:	430b      	orrs	r3, r1
1a001b38:	6013      	str	r3, [r2, #0]
1a001b3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001b3e:	4629      	mov	r1, r5
1a001b40:	4b12      	ldr	r3, [pc, #72]	; (1a001b8c <xTaskPriorityInherit+0xb4>)
1a001b42:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a001b46:	f7ff fa84 	bl	1a001052 <vListInsertEnd>
				xReturn = pdTRUE;
1a001b4a:	4620      	mov	r0, r4
1a001b4c:	e7e4      	b.n	1a001b18 <xTaskPriorityInherit+0x40>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
1a001b4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b50:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a001b54:	009b      	lsls	r3, r3, #2
1a001b56:	490d      	ldr	r1, [pc, #52]	; (1a001b8c <xTaskPriorityInherit+0xb4>)
1a001b58:	58cb      	ldr	r3, [r1, r3]
1a001b5a:	2b00      	cmp	r3, #0
1a001b5c:	d1e2      	bne.n	1a001b24 <xTaskPriorityInherit+0x4c>
1a001b5e:	2301      	movs	r3, #1
1a001b60:	fa03 f202 	lsl.w	r2, r3, r2
1a001b64:	490a      	ldr	r1, [pc, #40]	; (1a001b90 <xTaskPriorityInherit+0xb8>)
1a001b66:	680b      	ldr	r3, [r1, #0]
1a001b68:	ea23 0302 	bic.w	r3, r3, r2
1a001b6c:	600b      	str	r3, [r1, #0]
1a001b6e:	e7d9      	b.n	1a001b24 <xTaskPriorityInherit+0x4c>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
1a001b70:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001b72:	4b05      	ldr	r3, [pc, #20]	; (1a001b88 <xTaskPriorityInherit+0xb0>)
1a001b74:	681b      	ldr	r3, [r3, #0]
1a001b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b78:	429a      	cmp	r2, r3
1a001b7a:	d303      	bcc.n	1a001b84 <xTaskPriorityInherit+0xac>
	BaseType_t xReturn = pdFALSE;
1a001b7c:	2000      	movs	r0, #0
1a001b7e:	e7cb      	b.n	1a001b18 <xTaskPriorityInherit+0x40>
1a001b80:	2000      	movs	r0, #0
	}
1a001b82:	4770      	bx	lr
					xReturn = pdTRUE;
1a001b84:	2001      	movs	r0, #1
		return xReturn;
1a001b86:	e7c7      	b.n	1a001b18 <xTaskPriorityInherit+0x40>
1a001b88:	1000294c 	.word	0x1000294c
1a001b8c:	10002958 	.word	0x10002958
1a001b90:	100029f8 	.word	0x100029f8

1a001b94 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a001b94:	2800      	cmp	r0, #0
1a001b96:	d04c      	beq.n	1a001c32 <xTaskPriorityDisinherit+0x9e>
	{
1a001b98:	b538      	push	{r3, r4, r5, lr}
1a001b9a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a001b9c:	4b27      	ldr	r3, [pc, #156]	; (1a001c3c <xTaskPriorityDisinherit+0xa8>)
1a001b9e:	681b      	ldr	r3, [r3, #0]
1a001ba0:	4283      	cmp	r3, r0
1a001ba2:	d008      	beq.n	1a001bb6 <xTaskPriorityDisinherit+0x22>
1a001ba4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ba8:	f383 8811 	msr	BASEPRI, r3
1a001bac:	f3bf 8f6f 	isb	sy
1a001bb0:	f3bf 8f4f 	dsb	sy
1a001bb4:	e7fe      	b.n	1a001bb4 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001bb6:	6d43      	ldr	r3, [r0, #84]	; 0x54
1a001bb8:	b943      	cbnz	r3, 1a001bcc <xTaskPriorityDisinherit+0x38>
1a001bba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001bbe:	f383 8811 	msr	BASEPRI, r3
1a001bc2:	f3bf 8f6f 	isb	sy
1a001bc6:	f3bf 8f4f 	dsb	sy
1a001bca:	e7fe      	b.n	1a001bca <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001bcc:	3b01      	subs	r3, #1
1a001bce:	6543      	str	r3, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001bd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
1a001bd2:	6d02      	ldr	r2, [r0, #80]	; 0x50
1a001bd4:	4291      	cmp	r1, r2
1a001bd6:	d02e      	beq.n	1a001c36 <xTaskPriorityDisinherit+0xa2>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001bd8:	b10b      	cbz	r3, 1a001bde <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
1a001bda:	2000      	movs	r0, #0
	}
1a001bdc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001bde:	1d05      	adds	r5, r0, #4
1a001be0:	4628      	mov	r0, r5
1a001be2:	f7ff fa5a 	bl	1a00109a <uxListRemove>
1a001be6:	b970      	cbnz	r0, 1a001c06 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001be8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001bea:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a001bee:	009b      	lsls	r3, r3, #2
1a001bf0:	4913      	ldr	r1, [pc, #76]	; (1a001c40 <xTaskPriorityDisinherit+0xac>)
1a001bf2:	58cb      	ldr	r3, [r1, r3]
1a001bf4:	b93b      	cbnz	r3, 1a001c06 <xTaskPriorityDisinherit+0x72>
1a001bf6:	2301      	movs	r3, #1
1a001bf8:	fa03 f202 	lsl.w	r2, r3, r2
1a001bfc:	4911      	ldr	r1, [pc, #68]	; (1a001c44 <xTaskPriorityDisinherit+0xb0>)
1a001bfe:	680b      	ldr	r3, [r1, #0]
1a001c00:	ea23 0302 	bic.w	r3, r3, r2
1a001c04:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001c06:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a001c08:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c0a:	f1c0 0307 	rsb	r3, r0, #7
1a001c0e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001c10:	2401      	movs	r4, #1
1a001c12:	fa04 f300 	lsl.w	r3, r4, r0
1a001c16:	4a0b      	ldr	r2, [pc, #44]	; (1a001c44 <xTaskPriorityDisinherit+0xb0>)
1a001c18:	6811      	ldr	r1, [r2, #0]
1a001c1a:	430b      	orrs	r3, r1
1a001c1c:	6013      	str	r3, [r2, #0]
1a001c1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001c22:	4629      	mov	r1, r5
1a001c24:	4b06      	ldr	r3, [pc, #24]	; (1a001c40 <xTaskPriorityDisinherit+0xac>)
1a001c26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a001c2a:	f7ff fa12 	bl	1a001052 <vListInsertEnd>
					xReturn = pdTRUE;
1a001c2e:	4620      	mov	r0, r4
1a001c30:	e7d4      	b.n	1a001bdc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
1a001c32:	2000      	movs	r0, #0
	}
1a001c34:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a001c36:	2000      	movs	r0, #0
1a001c38:	e7d0      	b.n	1a001bdc <xTaskPriorityDisinherit+0x48>
1a001c3a:	bf00      	nop
1a001c3c:	1000294c 	.word	0x1000294c
1a001c40:	10002958 	.word	0x10002958
1a001c44:	100029f8 	.word	0x100029f8

1a001c48 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
1a001c48:	2800      	cmp	r0, #0
1a001c4a:	d057      	beq.n	1a001cfc <vTaskPriorityDisinheritAfterTimeout+0xb4>
	{
1a001c4c:	b538      	push	{r3, r4, r5, lr}
1a001c4e:	460a      	mov	r2, r1
1a001c50:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
1a001c52:	6d41      	ldr	r1, [r0, #84]	; 0x54
1a001c54:	b941      	cbnz	r1, 1a001c68 <vTaskPriorityDisinheritAfterTimeout+0x20>
1a001c56:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c5a:	f383 8811 	msr	BASEPRI, r3
1a001c5e:	f3bf 8f6f 	isb	sy
1a001c62:	f3bf 8f4f 	dsb	sy
1a001c66:	e7fe      	b.n	1a001c66 <vTaskPriorityDisinheritAfterTimeout+0x1e>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
1a001c68:	6d03      	ldr	r3, [r0, #80]	; 0x50
1a001c6a:	4293      	cmp	r3, r2
1a001c6c:	d200      	bcs.n	1a001c70 <vTaskPriorityDisinheritAfterTimeout+0x28>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
1a001c6e:	4613      	mov	r3, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
1a001c70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001c72:	429a      	cmp	r2, r3
1a001c74:	d001      	beq.n	1a001c7a <vTaskPriorityDisinheritAfterTimeout+0x32>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
1a001c76:	2901      	cmp	r1, #1
1a001c78:	d000      	beq.n	1a001c7c <vTaskPriorityDisinheritAfterTimeout+0x34>
	}
1a001c7a:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
1a001c7c:	4920      	ldr	r1, [pc, #128]	; (1a001d00 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
1a001c7e:	6809      	ldr	r1, [r1, #0]
1a001c80:	42a1      	cmp	r1, r4
1a001c82:	d032      	beq.n	1a001cea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					pxTCB->uxPriority = uxPriorityToUse;
1a001c84:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
1a001c86:	69a1      	ldr	r1, [r4, #24]
1a001c88:	2900      	cmp	r1, #0
1a001c8a:	db02      	blt.n	1a001c92 <vTaskPriorityDisinheritAfterTimeout+0x4a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001c8c:	f1c3 0307 	rsb	r3, r3, #7
1a001c90:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
1a001c92:	6961      	ldr	r1, [r4, #20]
1a001c94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a001c98:	4b1a      	ldr	r3, [pc, #104]	; (1a001d04 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001c9a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
1a001c9e:	4291      	cmp	r1, r2
1a001ca0:	d1eb      	bne.n	1a001c7a <vTaskPriorityDisinheritAfterTimeout+0x32>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001ca2:	1d25      	adds	r5, r4, #4
1a001ca4:	4628      	mov	r0, r5
1a001ca6:	f7ff f9f8 	bl	1a00109a <uxListRemove>
1a001caa:	b970      	cbnz	r0, 1a001cca <vTaskPriorityDisinheritAfterTimeout+0x82>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001cac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001cae:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a001cb2:	009b      	lsls	r3, r3, #2
1a001cb4:	4913      	ldr	r1, [pc, #76]	; (1a001d04 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001cb6:	58cb      	ldr	r3, [r1, r3]
1a001cb8:	b93b      	cbnz	r3, 1a001cca <vTaskPriorityDisinheritAfterTimeout+0x82>
1a001cba:	2301      	movs	r3, #1
1a001cbc:	fa03 f202 	lsl.w	r2, r3, r2
1a001cc0:	4911      	ldr	r1, [pc, #68]	; (1a001d08 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
1a001cc2:	680b      	ldr	r3, [r1, #0]
1a001cc4:	ea23 0302 	bic.w	r3, r3, r2
1a001cc8:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
1a001cca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a001ccc:	2301      	movs	r3, #1
1a001cce:	4083      	lsls	r3, r0
1a001cd0:	4a0d      	ldr	r2, [pc, #52]	; (1a001d08 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
1a001cd2:	6811      	ldr	r1, [r2, #0]
1a001cd4:	430b      	orrs	r3, r1
1a001cd6:	6013      	str	r3, [r2, #0]
1a001cd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001cdc:	4629      	mov	r1, r5
1a001cde:	4b09      	ldr	r3, [pc, #36]	; (1a001d04 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
1a001ce0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a001ce4:	f7ff f9b5 	bl	1a001052 <vListInsertEnd>
	}
1a001ce8:	e7c7      	b.n	1a001c7a <vTaskPriorityDisinheritAfterTimeout+0x32>
1a001cea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001cee:	f383 8811 	msr	BASEPRI, r3
1a001cf2:	f3bf 8f6f 	isb	sy
1a001cf6:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
1a001cfa:	e7fe      	b.n	1a001cfa <vTaskPriorityDisinheritAfterTimeout+0xb2>
1a001cfc:	4770      	bx	lr
1a001cfe:	bf00      	nop
1a001d00:	1000294c 	.word	0x1000294c
1a001d04:	10002958 	.word	0x10002958
1a001d08:	100029f8 	.word	0x100029f8

1a001d0c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
1a001d0c:	4b05      	ldr	r3, [pc, #20]	; (1a001d24 <pvTaskIncrementMutexHeldCount+0x18>)
1a001d0e:	681b      	ldr	r3, [r3, #0]
1a001d10:	b123      	cbz	r3, 1a001d1c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
1a001d12:	4b04      	ldr	r3, [pc, #16]	; (1a001d24 <pvTaskIncrementMutexHeldCount+0x18>)
1a001d14:	681a      	ldr	r2, [r3, #0]
1a001d16:	6d53      	ldr	r3, [r2, #84]	; 0x54
1a001d18:	3301      	adds	r3, #1
1a001d1a:	6553      	str	r3, [r2, #84]	; 0x54
		return pxCurrentTCB;
1a001d1c:	4b01      	ldr	r3, [pc, #4]	; (1a001d24 <pvTaskIncrementMutexHeldCount+0x18>)
1a001d1e:	6818      	ldr	r0, [r3, #0]
	}
1a001d20:	4770      	bx	lr
1a001d22:	bf00      	nop
1a001d24:	1000294c 	.word	0x1000294c

1a001d28 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001d28:	4b06      	ldr	r3, [pc, #24]	; (1a001d44 <prvGetNextExpireTime+0x1c>)
1a001d2a:	681a      	ldr	r2, [r3, #0]
1a001d2c:	6813      	ldr	r3, [r2, #0]
1a001d2e:	fab3 f383 	clz	r3, r3
1a001d32:	095b      	lsrs	r3, r3, #5
1a001d34:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a001d36:	b913      	cbnz	r3, 1a001d3e <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001d38:	68d3      	ldr	r3, [r2, #12]
1a001d3a:	6818      	ldr	r0, [r3, #0]
1a001d3c:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a001d3e:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a001d40:	4770      	bx	lr
1a001d42:	bf00      	nop
1a001d44:	10002a74 	.word	0x10002a74

1a001d48 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a001d48:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a001d4a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001d4c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a001d4e:	4291      	cmp	r1, r2
1a001d50:	d80c      	bhi.n	1a001d6c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001d52:	1ad2      	subs	r2, r2, r3
1a001d54:	6983      	ldr	r3, [r0, #24]
1a001d56:	429a      	cmp	r2, r3
1a001d58:	d301      	bcc.n	1a001d5e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a001d5a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a001d5c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a001d5e:	1d01      	adds	r1, r0, #4
1a001d60:	4b09      	ldr	r3, [pc, #36]	; (1a001d88 <prvInsertTimerInActiveList+0x40>)
1a001d62:	6818      	ldr	r0, [r3, #0]
1a001d64:	f7ff f980 	bl	1a001068 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001d68:	2000      	movs	r0, #0
1a001d6a:	e7f7      	b.n	1a001d5c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a001d6c:	429a      	cmp	r2, r3
1a001d6e:	d201      	bcs.n	1a001d74 <prvInsertTimerInActiveList+0x2c>
1a001d70:	4299      	cmp	r1, r3
1a001d72:	d206      	bcs.n	1a001d82 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001d74:	1d01      	adds	r1, r0, #4
1a001d76:	4b05      	ldr	r3, [pc, #20]	; (1a001d8c <prvInsertTimerInActiveList+0x44>)
1a001d78:	6818      	ldr	r0, [r3, #0]
1a001d7a:	f7ff f975 	bl	1a001068 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a001d7e:	2000      	movs	r0, #0
1a001d80:	e7ec      	b.n	1a001d5c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
1a001d82:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a001d84:	e7ea      	b.n	1a001d5c <prvInsertTimerInActiveList+0x14>
1a001d86:	bf00      	nop
1a001d88:	10002a78 	.word	0x10002a78
1a001d8c:	10002a74 	.word	0x10002a74

1a001d90 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a001d90:	b530      	push	{r4, r5, lr}
1a001d92:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a001d94:	f000 fa46 	bl	1a002224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a001d98:	4b11      	ldr	r3, [pc, #68]	; (1a001de0 <prvCheckForValidListAndQueue+0x50>)
1a001d9a:	681b      	ldr	r3, [r3, #0]
1a001d9c:	b11b      	cbz	r3, 1a001da6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001d9e:	f000 fa63 	bl	1a002268 <vPortExitCritical>
}
1a001da2:	b003      	add	sp, #12
1a001da4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a001da6:	4d0f      	ldr	r5, [pc, #60]	; (1a001de4 <prvCheckForValidListAndQueue+0x54>)
1a001da8:	4628      	mov	r0, r5
1a001daa:	f7ff f944 	bl	1a001036 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a001dae:	4c0e      	ldr	r4, [pc, #56]	; (1a001de8 <prvCheckForValidListAndQueue+0x58>)
1a001db0:	4620      	mov	r0, r4
1a001db2:	f7ff f940 	bl	1a001036 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a001db6:	4b0d      	ldr	r3, [pc, #52]	; (1a001dec <prvCheckForValidListAndQueue+0x5c>)
1a001db8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a001dba:	4b0d      	ldr	r3, [pc, #52]	; (1a001df0 <prvCheckForValidListAndQueue+0x60>)
1a001dbc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a001dbe:	2300      	movs	r3, #0
1a001dc0:	9300      	str	r3, [sp, #0]
1a001dc2:	4b0c      	ldr	r3, [pc, #48]	; (1a001df4 <prvCheckForValidListAndQueue+0x64>)
1a001dc4:	4a0c      	ldr	r2, [pc, #48]	; (1a001df8 <prvCheckForValidListAndQueue+0x68>)
1a001dc6:	2110      	movs	r1, #16
1a001dc8:	200a      	movs	r0, #10
1a001dca:	f7fe fdde 	bl	1a00098a <xQueueGenericCreateStatic>
1a001dce:	4b04      	ldr	r3, [pc, #16]	; (1a001de0 <prvCheckForValidListAndQueue+0x50>)
1a001dd0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a001dd2:	2800      	cmp	r0, #0
1a001dd4:	d0e3      	beq.n	1a001d9e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a001dd6:	4909      	ldr	r1, [pc, #36]	; (1a001dfc <prvCheckForValidListAndQueue+0x6c>)
1a001dd8:	f7ff f8f0 	bl	1a000fbc <vQueueAddToRegistry>
1a001ddc:	e7df      	b.n	1a001d9e <prvCheckForValidListAndQueue+0xe>
1a001dde:	bf00      	nop
1a001de0:	10002b98 	.word	0x10002b98
1a001de4:	10002b1c 	.word	0x10002b1c
1a001de8:	10002b30 	.word	0x10002b30
1a001dec:	10002a74 	.word	0x10002a74
1a001df0:	10002a78 	.word	0x10002a78
1a001df4:	10002b48 	.word	0x10002b48
1a001df8:	10002a7c 	.word	0x10002a7c
1a001dfc:	1a004f28 	.word	0x1a004f28

1a001e00 <xTimerCreateTimerTask>:
{
1a001e00:	b510      	push	{r4, lr}
1a001e02:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a001e04:	f7ff ffc4 	bl	1a001d90 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a001e08:	4b12      	ldr	r3, [pc, #72]	; (1a001e54 <xTimerCreateTimerTask+0x54>)
1a001e0a:	681b      	ldr	r3, [r3, #0]
1a001e0c:	b1cb      	cbz	r3, 1a001e42 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a001e0e:	2400      	movs	r4, #0
1a001e10:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a001e12:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a001e14:	aa07      	add	r2, sp, #28
1a001e16:	a906      	add	r1, sp, #24
1a001e18:	a805      	add	r0, sp, #20
1a001e1a:	f7ff f95d 	bl	1a0010d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a001e1e:	9b05      	ldr	r3, [sp, #20]
1a001e20:	9302      	str	r3, [sp, #8]
1a001e22:	9b06      	ldr	r3, [sp, #24]
1a001e24:	9301      	str	r3, [sp, #4]
1a001e26:	2304      	movs	r3, #4
1a001e28:	9300      	str	r3, [sp, #0]
1a001e2a:	4623      	mov	r3, r4
1a001e2c:	9a07      	ldr	r2, [sp, #28]
1a001e2e:	490a      	ldr	r1, [pc, #40]	; (1a001e58 <xTimerCreateTimerTask+0x58>)
1a001e30:	480a      	ldr	r0, [pc, #40]	; (1a001e5c <xTimerCreateTimerTask+0x5c>)
1a001e32:	f7ff fb1b 	bl	1a00146c <xTaskCreateStatic>
1a001e36:	4a0a      	ldr	r2, [pc, #40]	; (1a001e60 <xTimerCreateTimerTask+0x60>)
1a001e38:	6010      	str	r0, [r2, #0]
			if( xTimerTaskHandle != NULL )
1a001e3a:	b110      	cbz	r0, 1a001e42 <xTimerCreateTimerTask+0x42>
}
1a001e3c:	2001      	movs	r0, #1
1a001e3e:	b008      	add	sp, #32
1a001e40:	bd10      	pop	{r4, pc}
1a001e42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e46:	f383 8811 	msr	BASEPRI, r3
1a001e4a:	f3bf 8f6f 	isb	sy
1a001e4e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
1a001e52:	e7fe      	b.n	1a001e52 <xTimerCreateTimerTask+0x52>
1a001e54:	10002b98 	.word	0x10002b98
1a001e58:	1a004f30 	.word	0x1a004f30
1a001e5c:	1a002141 	.word	0x1a002141
1a001e60:	10002b9c 	.word	0x10002b9c

1a001e64 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a001e64:	b1c0      	cbz	r0, 1a001e98 <xTimerGenericCommand+0x34>
{
1a001e66:	b510      	push	{r4, lr}
1a001e68:	b084      	sub	sp, #16
1a001e6a:	4614      	mov	r4, r2
1a001e6c:	461a      	mov	r2, r3
1a001e6e:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
1a001e70:	4816      	ldr	r0, [pc, #88]	; (1a001ecc <xTimerGenericCommand+0x68>)
1a001e72:	6800      	ldr	r0, [r0, #0]
1a001e74:	b338      	cbz	r0, 1a001ec6 <xTimerGenericCommand+0x62>
		xMessage.xMessageID = xCommandID;
1a001e76:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a001e78:	9401      	str	r4, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a001e7a:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a001e7c:	2905      	cmp	r1, #5
1a001e7e:	dc1c      	bgt.n	1a001eba <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a001e80:	f7ff fe1a 	bl	1a001ab8 <xTaskGetSchedulerState>
1a001e84:	2802      	cmp	r0, #2
1a001e86:	d010      	beq.n	1a001eaa <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a001e88:	2300      	movs	r3, #0
1a001e8a:	461a      	mov	r2, r3
1a001e8c:	4669      	mov	r1, sp
1a001e8e:	480f      	ldr	r0, [pc, #60]	; (1a001ecc <xTimerGenericCommand+0x68>)
1a001e90:	6800      	ldr	r0, [r0, #0]
1a001e92:	f7fe fdeb 	bl	1a000a6c <xQueueGenericSend>
1a001e96:	e014      	b.n	1a001ec2 <xTimerGenericCommand+0x5e>
1a001e98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e9c:	f383 8811 	msr	BASEPRI, r3
1a001ea0:	f3bf 8f6f 	isb	sy
1a001ea4:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
1a001ea8:	e7fe      	b.n	1a001ea8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a001eaa:	2300      	movs	r3, #0
1a001eac:	9a06      	ldr	r2, [sp, #24]
1a001eae:	4669      	mov	r1, sp
1a001eb0:	4806      	ldr	r0, [pc, #24]	; (1a001ecc <xTimerGenericCommand+0x68>)
1a001eb2:	6800      	ldr	r0, [r0, #0]
1a001eb4:	f7fe fdda 	bl	1a000a6c <xQueueGenericSend>
1a001eb8:	e003      	b.n	1a001ec2 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a001eba:	2300      	movs	r3, #0
1a001ebc:	4669      	mov	r1, sp
1a001ebe:	f7fe fe95 	bl	1a000bec <xQueueGenericSendFromISR>
}
1a001ec2:	b004      	add	sp, #16
1a001ec4:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
1a001ec6:	2000      	movs	r0, #0
	return xReturn;
1a001ec8:	e7fb      	b.n	1a001ec2 <xTimerGenericCommand+0x5e>
1a001eca:	bf00      	nop
1a001ecc:	10002b98 	.word	0x10002b98

1a001ed0 <prvSwitchTimerLists>:
{
1a001ed0:	b570      	push	{r4, r5, r6, lr}
1a001ed2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a001ed4:	4b1a      	ldr	r3, [pc, #104]	; (1a001f40 <prvSwitchTimerLists+0x70>)
1a001ed6:	681b      	ldr	r3, [r3, #0]
1a001ed8:	681a      	ldr	r2, [r3, #0]
1a001eda:	b352      	cbz	r2, 1a001f32 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001edc:	68db      	ldr	r3, [r3, #12]
1a001ede:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001ee0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001ee2:	1d25      	adds	r5, r4, #4
1a001ee4:	4628      	mov	r0, r5
1a001ee6:	f7ff f8d8 	bl	1a00109a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001eec:	4620      	mov	r0, r4
1a001eee:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001ef0:	69e3      	ldr	r3, [r4, #28]
1a001ef2:	2b01      	cmp	r3, #1
1a001ef4:	d1ee      	bne.n	1a001ed4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a001ef6:	69a3      	ldr	r3, [r4, #24]
1a001ef8:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a001efa:	429e      	cmp	r6, r3
1a001efc:	d207      	bcs.n	1a001f0e <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a001efe:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a001f00:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a001f02:	4629      	mov	r1, r5
1a001f04:	4b0e      	ldr	r3, [pc, #56]	; (1a001f40 <prvSwitchTimerLists+0x70>)
1a001f06:	6818      	ldr	r0, [r3, #0]
1a001f08:	f7ff f8ae 	bl	1a001068 <vListInsert>
1a001f0c:	e7e2      	b.n	1a001ed4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001f0e:	2100      	movs	r1, #0
1a001f10:	9100      	str	r1, [sp, #0]
1a001f12:	460b      	mov	r3, r1
1a001f14:	4632      	mov	r2, r6
1a001f16:	4620      	mov	r0, r4
1a001f18:	f7ff ffa4 	bl	1a001e64 <xTimerGenericCommand>
				configASSERT( xResult );
1a001f1c:	2800      	cmp	r0, #0
1a001f1e:	d1d9      	bne.n	1a001ed4 <prvSwitchTimerLists+0x4>
1a001f20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f24:	f383 8811 	msr	BASEPRI, r3
1a001f28:	f3bf 8f6f 	isb	sy
1a001f2c:	f3bf 8f4f 	dsb	sy
1a001f30:	e7fe      	b.n	1a001f30 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a001f32:	4a04      	ldr	r2, [pc, #16]	; (1a001f44 <prvSwitchTimerLists+0x74>)
1a001f34:	6810      	ldr	r0, [r2, #0]
1a001f36:	4902      	ldr	r1, [pc, #8]	; (1a001f40 <prvSwitchTimerLists+0x70>)
1a001f38:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a001f3a:	6013      	str	r3, [r2, #0]
}
1a001f3c:	b002      	add	sp, #8
1a001f3e:	bd70      	pop	{r4, r5, r6, pc}
1a001f40:	10002a74 	.word	0x10002a74
1a001f44:	10002a78 	.word	0x10002a78

1a001f48 <prvSampleTimeNow>:
{
1a001f48:	b538      	push	{r3, r4, r5, lr}
1a001f4a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a001f4c:	f7ff fb4e 	bl	1a0015ec <xTaskGetTickCount>
1a001f50:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a001f52:	4b07      	ldr	r3, [pc, #28]	; (1a001f70 <prvSampleTimeNow+0x28>)
1a001f54:	681b      	ldr	r3, [r3, #0]
1a001f56:	4283      	cmp	r3, r0
1a001f58:	d805      	bhi.n	1a001f66 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a001f5a:	2300      	movs	r3, #0
1a001f5c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a001f5e:	4b04      	ldr	r3, [pc, #16]	; (1a001f70 <prvSampleTimeNow+0x28>)
1a001f60:	601c      	str	r4, [r3, #0]
}
1a001f62:	4620      	mov	r0, r4
1a001f64:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a001f66:	f7ff ffb3 	bl	1a001ed0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a001f6a:	2301      	movs	r3, #1
1a001f6c:	602b      	str	r3, [r5, #0]
1a001f6e:	e7f6      	b.n	1a001f5e <prvSampleTimeNow+0x16>
1a001f70:	10002b44 	.word	0x10002b44

1a001f74 <prvProcessExpiredTimer>:
{
1a001f74:	b570      	push	{r4, r5, r6, lr}
1a001f76:	b082      	sub	sp, #8
1a001f78:	4605      	mov	r5, r0
1a001f7a:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a001f7c:	4b14      	ldr	r3, [pc, #80]	; (1a001fd0 <prvProcessExpiredTimer+0x5c>)
1a001f7e:	681b      	ldr	r3, [r3, #0]
1a001f80:	68db      	ldr	r3, [r3, #12]
1a001f82:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a001f84:	1d20      	adds	r0, r4, #4
1a001f86:	f7ff f888 	bl	1a00109a <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a001f8a:	69e3      	ldr	r3, [r4, #28]
1a001f8c:	2b01      	cmp	r3, #1
1a001f8e:	d004      	beq.n	1a001f9a <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a001f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a001f92:	4620      	mov	r0, r4
1a001f94:	4798      	blx	r3
}
1a001f96:	b002      	add	sp, #8
1a001f98:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a001f9a:	69a1      	ldr	r1, [r4, #24]
1a001f9c:	462b      	mov	r3, r5
1a001f9e:	4632      	mov	r2, r6
1a001fa0:	4429      	add	r1, r5
1a001fa2:	4620      	mov	r0, r4
1a001fa4:	f7ff fed0 	bl	1a001d48 <prvInsertTimerInActiveList>
1a001fa8:	2800      	cmp	r0, #0
1a001faa:	d0f1      	beq.n	1a001f90 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a001fac:	2100      	movs	r1, #0
1a001fae:	9100      	str	r1, [sp, #0]
1a001fb0:	460b      	mov	r3, r1
1a001fb2:	462a      	mov	r2, r5
1a001fb4:	4620      	mov	r0, r4
1a001fb6:	f7ff ff55 	bl	1a001e64 <xTimerGenericCommand>
			configASSERT( xResult );
1a001fba:	2800      	cmp	r0, #0
1a001fbc:	d1e8      	bne.n	1a001f90 <prvProcessExpiredTimer+0x1c>
1a001fbe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001fc2:	f383 8811 	msr	BASEPRI, r3
1a001fc6:	f3bf 8f6f 	isb	sy
1a001fca:	f3bf 8f4f 	dsb	sy
1a001fce:	e7fe      	b.n	1a001fce <prvProcessExpiredTimer+0x5a>
1a001fd0:	10002a74 	.word	0x10002a74

1a001fd4 <prvProcessTimerOrBlockTask>:
{
1a001fd4:	b570      	push	{r4, r5, r6, lr}
1a001fd6:	b082      	sub	sp, #8
1a001fd8:	4606      	mov	r6, r0
1a001fda:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a001fdc:	f7ff fafe 	bl	1a0015dc <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a001fe0:	a801      	add	r0, sp, #4
1a001fe2:	f7ff ffb1 	bl	1a001f48 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a001fe6:	9b01      	ldr	r3, [sp, #4]
1a001fe8:	bb1b      	cbnz	r3, 1a002032 <prvProcessTimerOrBlockTask+0x5e>
1a001fea:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a001fec:	b90c      	cbnz	r4, 1a001ff2 <prvProcessTimerOrBlockTask+0x1e>
1a001fee:	42b0      	cmp	r0, r6
1a001ff0:	d218      	bcs.n	1a002024 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a001ff2:	b12c      	cbz	r4, 1a002000 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a001ff4:	4b11      	ldr	r3, [pc, #68]	; (1a00203c <prvProcessTimerOrBlockTask+0x68>)
1a001ff6:	681b      	ldr	r3, [r3, #0]
1a001ff8:	681c      	ldr	r4, [r3, #0]
1a001ffa:	fab4 f484 	clz	r4, r4
1a001ffe:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002000:	4622      	mov	r2, r4
1a002002:	1b71      	subs	r1, r6, r5
1a002004:	4b0e      	ldr	r3, [pc, #56]	; (1a002040 <prvProcessTimerOrBlockTask+0x6c>)
1a002006:	6818      	ldr	r0, [r3, #0]
1a002008:	f7fe ffec 	bl	1a000fe4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a00200c:	f7ff fb80 	bl	1a001710 <xTaskResumeAll>
1a002010:	b988      	cbnz	r0, 1a002036 <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002012:	4b0c      	ldr	r3, [pc, #48]	; (1a002044 <prvProcessTimerOrBlockTask+0x70>)
1a002014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002018:	601a      	str	r2, [r3, #0]
1a00201a:	f3bf 8f4f 	dsb	sy
1a00201e:	f3bf 8f6f 	isb	sy
1a002022:	e008      	b.n	1a002036 <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002024:	f7ff fb74 	bl	1a001710 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002028:	4629      	mov	r1, r5
1a00202a:	4630      	mov	r0, r6
1a00202c:	f7ff ffa2 	bl	1a001f74 <prvProcessExpiredTimer>
1a002030:	e001      	b.n	1a002036 <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002032:	f7ff fb6d 	bl	1a001710 <xTaskResumeAll>
}
1a002036:	b002      	add	sp, #8
1a002038:	bd70      	pop	{r4, r5, r6, pc}
1a00203a:	bf00      	nop
1a00203c:	10002a78 	.word	0x10002a78
1a002040:	10002b98 	.word	0x10002b98
1a002044:	e000ed04 	.word	0xe000ed04

1a002048 <prvProcessReceivedCommands>:
{
1a002048:	b510      	push	{r4, lr}
1a00204a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00204c:	e006      	b.n	1a00205c <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00204e:	9907      	ldr	r1, [sp, #28]
1a002050:	9806      	ldr	r0, [sp, #24]
1a002052:	9b05      	ldr	r3, [sp, #20]
1a002054:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002056:	9b04      	ldr	r3, [sp, #16]
1a002058:	2b00      	cmp	r3, #0
1a00205a:	da0b      	bge.n	1a002074 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00205c:	2200      	movs	r2, #0
1a00205e:	a904      	add	r1, sp, #16
1a002060:	4b36      	ldr	r3, [pc, #216]	; (1a00213c <prvProcessReceivedCommands+0xf4>)
1a002062:	6818      	ldr	r0, [r3, #0]
1a002064:	f7fe fe2a 	bl	1a000cbc <xQueueReceive>
1a002068:	2800      	cmp	r0, #0
1a00206a:	d065      	beq.n	1a002138 <prvProcessReceivedCommands+0xf0>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a00206c:	9b04      	ldr	r3, [sp, #16]
1a00206e:	2b00      	cmp	r3, #0
1a002070:	daf1      	bge.n	1a002056 <prvProcessReceivedCommands+0xe>
1a002072:	e7ec      	b.n	1a00204e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a002074:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a002076:	6963      	ldr	r3, [r4, #20]
1a002078:	b113      	cbz	r3, 1a002080 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00207a:	1d20      	adds	r0, r4, #4
1a00207c:	f7ff f80d 	bl	1a00109a <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002080:	a803      	add	r0, sp, #12
1a002082:	f7ff ff61 	bl	1a001f48 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a002086:	9b04      	ldr	r3, [sp, #16]
1a002088:	2b09      	cmp	r3, #9
1a00208a:	d8e7      	bhi.n	1a00205c <prvProcessReceivedCommands+0x14>
1a00208c:	a201      	add	r2, pc, #4	; (adr r2, 1a002094 <prvProcessReceivedCommands+0x4c>)
1a00208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a002092:	bf00      	nop
1a002094:	1a0020bd 	.word	0x1a0020bd
1a002098:	1a0020bd 	.word	0x1a0020bd
1a00209c:	1a0020bd 	.word	0x1a0020bd
1a0020a0:	1a00205d 	.word	0x1a00205d
1a0020a4:	1a002103 	.word	0x1a002103
1a0020a8:	1a002129 	.word	0x1a002129
1a0020ac:	1a0020bd 	.word	0x1a0020bd
1a0020b0:	1a0020bd 	.word	0x1a0020bd
1a0020b4:	1a00205d 	.word	0x1a00205d
1a0020b8:	1a002103 	.word	0x1a002103
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0020bc:	9b05      	ldr	r3, [sp, #20]
1a0020be:	69a1      	ldr	r1, [r4, #24]
1a0020c0:	4602      	mov	r2, r0
1a0020c2:	4419      	add	r1, r3
1a0020c4:	4620      	mov	r0, r4
1a0020c6:	f7ff fe3f 	bl	1a001d48 <prvInsertTimerInActiveList>
1a0020ca:	2800      	cmp	r0, #0
1a0020cc:	d0c6      	beq.n	1a00205c <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0020ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0020d0:	4620      	mov	r0, r4
1a0020d2:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0020d4:	69e3      	ldr	r3, [r4, #28]
1a0020d6:	2b01      	cmp	r3, #1
1a0020d8:	d1c0      	bne.n	1a00205c <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a0020da:	69a2      	ldr	r2, [r4, #24]
1a0020dc:	2100      	movs	r1, #0
1a0020de:	9100      	str	r1, [sp, #0]
1a0020e0:	460b      	mov	r3, r1
1a0020e2:	9805      	ldr	r0, [sp, #20]
1a0020e4:	4402      	add	r2, r0
1a0020e6:	4620      	mov	r0, r4
1a0020e8:	f7ff febc 	bl	1a001e64 <xTimerGenericCommand>
							configASSERT( xResult );
1a0020ec:	2800      	cmp	r0, #0
1a0020ee:	d1b5      	bne.n	1a00205c <prvProcessReceivedCommands+0x14>
1a0020f0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020f4:	f383 8811 	msr	BASEPRI, r3
1a0020f8:	f3bf 8f6f 	isb	sy
1a0020fc:	f3bf 8f4f 	dsb	sy
1a002100:	e7fe      	b.n	1a002100 <prvProcessReceivedCommands+0xb8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002102:	9905      	ldr	r1, [sp, #20]
1a002104:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002106:	b131      	cbz	r1, 1a002116 <prvProcessReceivedCommands+0xce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002108:	4603      	mov	r3, r0
1a00210a:	4602      	mov	r2, r0
1a00210c:	4401      	add	r1, r0
1a00210e:	4620      	mov	r0, r4
1a002110:	f7ff fe1a 	bl	1a001d48 <prvInsertTimerInActiveList>
					break;
1a002114:	e7a2      	b.n	1a00205c <prvProcessReceivedCommands+0x14>
1a002116:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00211a:	f383 8811 	msr	BASEPRI, r3
1a00211e:	f3bf 8f6f 	isb	sy
1a002122:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a002126:	e7fe      	b.n	1a002126 <prvProcessReceivedCommands+0xde>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a002128:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a00212c:	2b00      	cmp	r3, #0
1a00212e:	d195      	bne.n	1a00205c <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
1a002130:	4620      	mov	r0, r4
1a002132:	f7fe faf7 	bl	1a000724 <vPortFree>
1a002136:	e791      	b.n	1a00205c <prvProcessReceivedCommands+0x14>
}
1a002138:	b008      	add	sp, #32
1a00213a:	bd10      	pop	{r4, pc}
1a00213c:	10002b98 	.word	0x10002b98

1a002140 <prvTimerTask>:
{
1a002140:	b500      	push	{lr}
1a002142:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002144:	a801      	add	r0, sp, #4
1a002146:	f7ff fdef 	bl	1a001d28 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00214a:	9901      	ldr	r1, [sp, #4]
1a00214c:	f7ff ff42 	bl	1a001fd4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002150:	f7ff ff7a 	bl	1a002048 <prvProcessReceivedCommands>
	for( ;; )
1a002154:	e7f6      	b.n	1a002144 <prvTimerTask+0x4>
1a002156:	Address 0x000000001a002156 is out of bounds.


1a002158 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002158:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00215a:	2300      	movs	r3, #0
1a00215c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a00215e:	4b0d      	ldr	r3, [pc, #52]	; (1a002194 <prvTaskExitError+0x3c>)
1a002160:	681b      	ldr	r3, [r3, #0]
1a002162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002166:	d008      	beq.n	1a00217a <prvTaskExitError+0x22>
1a002168:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00216c:	f383 8811 	msr	BASEPRI, r3
1a002170:	f3bf 8f6f 	isb	sy
1a002174:	f3bf 8f4f 	dsb	sy
1a002178:	e7fe      	b.n	1a002178 <prvTaskExitError+0x20>
1a00217a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00217e:	f383 8811 	msr	BASEPRI, r3
1a002182:	f3bf 8f6f 	isb	sy
1a002186:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a00218a:	9b01      	ldr	r3, [sp, #4]
1a00218c:	2b00      	cmp	r3, #0
1a00218e:	d0fc      	beq.n	1a00218a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a002190:	b002      	add	sp, #8
1a002192:	4770      	bx	lr
1a002194:	10000000 	.word	0x10000000

1a002198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a002198:	4808      	ldr	r0, [pc, #32]	; (1a0021bc <prvPortStartFirstTask+0x24>)
1a00219a:	6800      	ldr	r0, [r0, #0]
1a00219c:	6800      	ldr	r0, [r0, #0]
1a00219e:	f380 8808 	msr	MSP, r0
1a0021a2:	f04f 0000 	mov.w	r0, #0
1a0021a6:	f380 8814 	msr	CONTROL, r0
1a0021aa:	b662      	cpsie	i
1a0021ac:	b661      	cpsie	f
1a0021ae:	f3bf 8f4f 	dsb	sy
1a0021b2:	f3bf 8f6f 	isb	sy
1a0021b6:	df00      	svc	0
1a0021b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
1a0021ba:	0000      	.short	0x0000
1a0021bc:	e000ed08 	.word	0xe000ed08

1a0021c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0021c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a0021d0 <vPortEnableVFP+0x10>
1a0021c4:	6801      	ldr	r1, [r0, #0]
1a0021c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0021ca:	6001      	str	r1, [r0, #0]
1a0021cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
1a0021ce:	0000      	.short	0x0000
1a0021d0:	e000ed88 	.word	0xe000ed88

1a0021d4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a0021d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a0021d8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a0021dc:	f021 0101 	bic.w	r1, r1, #1
1a0021e0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a0021e4:	4b05      	ldr	r3, [pc, #20]	; (1a0021fc <pxPortInitialiseStack+0x28>)
1a0021e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a0021ea:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a0021ee:	f06f 0302 	mvn.w	r3, #2
1a0021f2:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a0021f6:	3844      	subs	r0, #68	; 0x44
1a0021f8:	4770      	bx	lr
1a0021fa:	bf00      	nop
1a0021fc:	1a002159 	.word	0x1a002159

1a002200 <SVC_Handler>:
	__asm volatile (
1a002200:	4b07      	ldr	r3, [pc, #28]	; (1a002220 <pxCurrentTCBConst2>)
1a002202:	6819      	ldr	r1, [r3, #0]
1a002204:	6808      	ldr	r0, [r1, #0]
1a002206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00220a:	f380 8809 	msr	PSP, r0
1a00220e:	f3bf 8f6f 	isb	sy
1a002212:	f04f 0000 	mov.w	r0, #0
1a002216:	f380 8811 	msr	BASEPRI, r0
1a00221a:	4770      	bx	lr
1a00221c:	f3af 8000 	nop.w

1a002220 <pxCurrentTCBConst2>:
1a002220:	1000294c 	.word	0x1000294c

1a002224 <vPortEnterCritical>:
1a002224:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002228:	f383 8811 	msr	BASEPRI, r3
1a00222c:	f3bf 8f6f 	isb	sy
1a002230:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002234:	4a0a      	ldr	r2, [pc, #40]	; (1a002260 <vPortEnterCritical+0x3c>)
1a002236:	6813      	ldr	r3, [r2, #0]
1a002238:	3301      	adds	r3, #1
1a00223a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a00223c:	2b01      	cmp	r3, #1
1a00223e:	d000      	beq.n	1a002242 <vPortEnterCritical+0x1e>
}
1a002240:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a002242:	4b08      	ldr	r3, [pc, #32]	; (1a002264 <vPortEnterCritical+0x40>)
1a002244:	681b      	ldr	r3, [r3, #0]
1a002246:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00224a:	d0f9      	beq.n	1a002240 <vPortEnterCritical+0x1c>
1a00224c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002250:	f383 8811 	msr	BASEPRI, r3
1a002254:	f3bf 8f6f 	isb	sy
1a002258:	f3bf 8f4f 	dsb	sy
1a00225c:	e7fe      	b.n	1a00225c <vPortEnterCritical+0x38>
1a00225e:	bf00      	nop
1a002260:	10000000 	.word	0x10000000
1a002264:	e000ed04 	.word	0xe000ed04

1a002268 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a002268:	4b09      	ldr	r3, [pc, #36]	; (1a002290 <vPortExitCritical+0x28>)
1a00226a:	681b      	ldr	r3, [r3, #0]
1a00226c:	b943      	cbnz	r3, 1a002280 <vPortExitCritical+0x18>
1a00226e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002272:	f383 8811 	msr	BASEPRI, r3
1a002276:	f3bf 8f6f 	isb	sy
1a00227a:	f3bf 8f4f 	dsb	sy
1a00227e:	e7fe      	b.n	1a00227e <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a002280:	3b01      	subs	r3, #1
1a002282:	4a03      	ldr	r2, [pc, #12]	; (1a002290 <vPortExitCritical+0x28>)
1a002284:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a002286:	b90b      	cbnz	r3, 1a00228c <vPortExitCritical+0x24>
	__asm volatile
1a002288:	f383 8811 	msr	BASEPRI, r3
}
1a00228c:	4770      	bx	lr
1a00228e:	bf00      	nop
1a002290:	10000000 	.word	0x10000000
1a002294:	ffffffff 	.word	0xffffffff
1a002298:	ffffffff 	.word	0xffffffff
1a00229c:	ffffffff 	.word	0xffffffff

1a0022a0 <PendSV_Handler>:
	__asm volatile
1a0022a0:	f3ef 8009 	mrs	r0, PSP
1a0022a4:	f3bf 8f6f 	isb	sy
1a0022a8:	4b15      	ldr	r3, [pc, #84]	; (1a002300 <pxCurrentTCBConst>)
1a0022aa:	681a      	ldr	r2, [r3, #0]
1a0022ac:	f01e 0f10 	tst.w	lr, #16
1a0022b0:	bf08      	it	eq
1a0022b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a0022b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0022ba:	6010      	str	r0, [r2, #0]
1a0022bc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a0022c0:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a0022c4:	f380 8811 	msr	BASEPRI, r0
1a0022c8:	f3bf 8f4f 	dsb	sy
1a0022cc:	f3bf 8f6f 	isb	sy
1a0022d0:	f7ff fac0 	bl	1a001854 <vTaskSwitchContext>
1a0022d4:	f04f 0000 	mov.w	r0, #0
1a0022d8:	f380 8811 	msr	BASEPRI, r0
1a0022dc:	bc09      	pop	{r0, r3}
1a0022de:	6819      	ldr	r1, [r3, #0]
1a0022e0:	6808      	ldr	r0, [r1, #0]
1a0022e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0022e6:	f01e 0f10 	tst.w	lr, #16
1a0022ea:	bf08      	it	eq
1a0022ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a0022f0:	f380 8809 	msr	PSP, r0
1a0022f4:	f3bf 8f6f 	isb	sy
1a0022f8:	4770      	bx	lr
1a0022fa:	bf00      	nop
1a0022fc:	f3af 8000 	nop.w

1a002300 <pxCurrentTCBConst>:
1a002300:	1000294c 	.word	0x1000294c

1a002304 <SysTick_Handler>:
{
1a002304:	b508      	push	{r3, lr}
	__asm volatile
1a002306:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00230a:	f383 8811 	msr	BASEPRI, r3
1a00230e:	f3bf 8f6f 	isb	sy
1a002312:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002316:	f7ff f96f 	bl	1a0015f8 <xTaskIncrementTick>
1a00231a:	b118      	cbz	r0, 1a002324 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a00231c:	4b03      	ldr	r3, [pc, #12]	; (1a00232c <SysTick_Handler+0x28>)
1a00231e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002322:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002324:	2300      	movs	r3, #0
1a002326:	f383 8811 	msr	BASEPRI, r3
}
1a00232a:	bd08      	pop	{r3, pc}
1a00232c:	e000ed04 	.word	0xe000ed04

1a002330 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002330:	4a08      	ldr	r2, [pc, #32]	; (1a002354 <vPortSetupTimerInterrupt+0x24>)
1a002332:	2300      	movs	r3, #0
1a002334:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002336:	4908      	ldr	r1, [pc, #32]	; (1a002358 <vPortSetupTimerInterrupt+0x28>)
1a002338:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a00233a:	4b08      	ldr	r3, [pc, #32]	; (1a00235c <vPortSetupTimerInterrupt+0x2c>)
1a00233c:	681b      	ldr	r3, [r3, #0]
1a00233e:	4908      	ldr	r1, [pc, #32]	; (1a002360 <vPortSetupTimerInterrupt+0x30>)
1a002340:	fba1 1303 	umull	r1, r3, r1, r3
1a002344:	095b      	lsrs	r3, r3, #5
1a002346:	3b01      	subs	r3, #1
1a002348:	4906      	ldr	r1, [pc, #24]	; (1a002364 <vPortSetupTimerInterrupt+0x34>)
1a00234a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a00234c:	2307      	movs	r3, #7
1a00234e:	6013      	str	r3, [r2, #0]
}
1a002350:	4770      	bx	lr
1a002352:	bf00      	nop
1a002354:	e000e010 	.word	0xe000e010
1a002358:	e000e018 	.word	0xe000e018
1a00235c:	10002c04 	.word	0x10002c04
1a002360:	51eb851f 	.word	0x51eb851f
1a002364:	e000e014 	.word	0xe000e014

1a002368 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002368:	4b3a      	ldr	r3, [pc, #232]	; (1a002454 <xPortStartScheduler+0xec>)
1a00236a:	681a      	ldr	r2, [r3, #0]
1a00236c:	4b3a      	ldr	r3, [pc, #232]	; (1a002458 <xPortStartScheduler+0xf0>)
1a00236e:	429a      	cmp	r2, r3
1a002370:	d029      	beq.n	1a0023c6 <xPortStartScheduler+0x5e>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002372:	4b38      	ldr	r3, [pc, #224]	; (1a002454 <xPortStartScheduler+0xec>)
1a002374:	681a      	ldr	r2, [r3, #0]
1a002376:	4b39      	ldr	r3, [pc, #228]	; (1a00245c <xPortStartScheduler+0xf4>)
1a002378:	429a      	cmp	r2, r3
1a00237a:	d02d      	beq.n	1a0023d8 <xPortStartScheduler+0x70>
{
1a00237c:	b510      	push	{r4, lr}
1a00237e:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002380:	4b37      	ldr	r3, [pc, #220]	; (1a002460 <xPortStartScheduler+0xf8>)
1a002382:	781a      	ldrb	r2, [r3, #0]
1a002384:	b2d2      	uxtb	r2, r2
1a002386:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002388:	22ff      	movs	r2, #255	; 0xff
1a00238a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a00238c:	781b      	ldrb	r3, [r3, #0]
1a00238e:	b2db      	uxtb	r3, r3
1a002390:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002394:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002398:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a00239c:	4a31      	ldr	r2, [pc, #196]	; (1a002464 <xPortStartScheduler+0xfc>)
1a00239e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a0023a0:	4b31      	ldr	r3, [pc, #196]	; (1a002468 <xPortStartScheduler+0x100>)
1a0023a2:	2207      	movs	r2, #7
1a0023a4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a0023a6:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0023aa:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0023ae:	d01c      	beq.n	1a0023ea <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
1a0023b0:	4a2d      	ldr	r2, [pc, #180]	; (1a002468 <xPortStartScheduler+0x100>)
1a0023b2:	6813      	ldr	r3, [r2, #0]
1a0023b4:	3b01      	subs	r3, #1
1a0023b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a0023b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a0023bc:	005b      	lsls	r3, r3, #1
1a0023be:	b2db      	uxtb	r3, r3
1a0023c0:	f88d 3003 	strb.w	r3, [sp, #3]
1a0023c4:	e7ef      	b.n	1a0023a6 <xPortStartScheduler+0x3e>
	__asm volatile
1a0023c6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023ca:	f383 8811 	msr	BASEPRI, r3
1a0023ce:	f3bf 8f6f 	isb	sy
1a0023d2:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0023d6:	e7fe      	b.n	1a0023d6 <xPortStartScheduler+0x6e>
1a0023d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023dc:	f383 8811 	msr	BASEPRI, r3
1a0023e0:	f3bf 8f6f 	isb	sy
1a0023e4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0023e8:	e7fe      	b.n	1a0023e8 <xPortStartScheduler+0x80>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a0023ea:	4b1f      	ldr	r3, [pc, #124]	; (1a002468 <xPortStartScheduler+0x100>)
1a0023ec:	681b      	ldr	r3, [r3, #0]
1a0023ee:	2b04      	cmp	r3, #4
1a0023f0:	d008      	beq.n	1a002404 <xPortStartScheduler+0x9c>
1a0023f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023f6:	f383 8811 	msr	BASEPRI, r3
1a0023fa:	f3bf 8f6f 	isb	sy
1a0023fe:	f3bf 8f4f 	dsb	sy
1a002402:	e7fe      	b.n	1a002402 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002404:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00240a:	4a17      	ldr	r2, [pc, #92]	; (1a002468 <xPortStartScheduler+0x100>)
1a00240c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a00240e:	9b01      	ldr	r3, [sp, #4]
1a002410:	b2db      	uxtb	r3, r3
1a002412:	4a13      	ldr	r2, [pc, #76]	; (1a002460 <xPortStartScheduler+0xf8>)
1a002414:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002416:	4b15      	ldr	r3, [pc, #84]	; (1a00246c <xPortStartScheduler+0x104>)
1a002418:	681a      	ldr	r2, [r3, #0]
1a00241a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a00241e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002420:	681a      	ldr	r2, [r3, #0]
1a002422:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002426:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002428:	f7ff ff82 	bl	1a002330 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a00242c:	2400      	movs	r4, #0
1a00242e:	4b10      	ldr	r3, [pc, #64]	; (1a002470 <xPortStartScheduler+0x108>)
1a002430:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002432:	f7ff fec5 	bl	1a0021c0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002436:	4a0f      	ldr	r2, [pc, #60]	; (1a002474 <xPortStartScheduler+0x10c>)
1a002438:	6813      	ldr	r3, [r2, #0]
1a00243a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a00243e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002440:	f7ff feaa 	bl	1a002198 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002444:	f7ff fa06 	bl	1a001854 <vTaskSwitchContext>
	prvTaskExitError();
1a002448:	f7ff fe86 	bl	1a002158 <prvTaskExitError>
}
1a00244c:	4620      	mov	r0, r4
1a00244e:	b002      	add	sp, #8
1a002450:	bd10      	pop	{r4, pc}
1a002452:	bf00      	nop
1a002454:	e000ed00 	.word	0xe000ed00
1a002458:	410fc271 	.word	0x410fc271
1a00245c:	410fc270 	.word	0x410fc270
1a002460:	e000e400 	.word	0xe000e400
1a002464:	10002ba0 	.word	0x10002ba0
1a002468:	10002ba4 	.word	0x10002ba4
1a00246c:	e000ed20 	.word	0xe000ed20
1a002470:	10000000 	.word	0x10000000
1a002474:	e000ef34 	.word	0xe000ef34

1a002478 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002478:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a00247c:	2b0f      	cmp	r3, #15
1a00247e:	d90f      	bls.n	1a0024a0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002480:	4a10      	ldr	r2, [pc, #64]	; (1a0024c4 <vPortValidateInterruptPriority+0x4c>)
1a002482:	5c9b      	ldrb	r3, [r3, r2]
1a002484:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002486:	4a10      	ldr	r2, [pc, #64]	; (1a0024c8 <vPortValidateInterruptPriority+0x50>)
1a002488:	7812      	ldrb	r2, [r2, #0]
1a00248a:	429a      	cmp	r2, r3
1a00248c:	d908      	bls.n	1a0024a0 <vPortValidateInterruptPriority+0x28>
1a00248e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002492:	f383 8811 	msr	BASEPRI, r3
1a002496:	f3bf 8f6f 	isb	sy
1a00249a:	f3bf 8f4f 	dsb	sy
1a00249e:	e7fe      	b.n	1a00249e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a0024a0:	4b0a      	ldr	r3, [pc, #40]	; (1a0024cc <vPortValidateInterruptPriority+0x54>)
1a0024a2:	681b      	ldr	r3, [r3, #0]
1a0024a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a0024a8:	4a09      	ldr	r2, [pc, #36]	; (1a0024d0 <vPortValidateInterruptPriority+0x58>)
1a0024aa:	6812      	ldr	r2, [r2, #0]
1a0024ac:	4293      	cmp	r3, r2
1a0024ae:	d908      	bls.n	1a0024c2 <vPortValidateInterruptPriority+0x4a>
1a0024b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024b4:	f383 8811 	msr	BASEPRI, r3
1a0024b8:	f3bf 8f6f 	isb	sy
1a0024bc:	f3bf 8f4f 	dsb	sy
1a0024c0:	e7fe      	b.n	1a0024c0 <vPortValidateInterruptPriority+0x48>
	}
1a0024c2:	4770      	bx	lr
1a0024c4:	e000e3f0 	.word	0xe000e3f0
1a0024c8:	10002ba0 	.word	0x10002ba0
1a0024cc:	e000ed0c 	.word	0xe000ed0c
1a0024d0:	10002ba4 	.word	0x10002ba4

1a0024d4 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a0024d4:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0024d6:	4b05      	ldr	r3, [pc, #20]	; (1a0024ec <DAC_IRQHandler+0x18>)
1a0024d8:	2201      	movs	r2, #1
1a0024da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a0024de:	4b04      	ldr	r3, [pc, #16]	; (1a0024f0 <DAC_IRQHandler+0x1c>)
1a0024e0:	681b      	ldr	r3, [r3, #0]
1a0024e2:	b113      	cbz	r3, 1a0024ea <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a0024e4:	4b02      	ldr	r3, [pc, #8]	; (1a0024f0 <DAC_IRQHandler+0x1c>)
1a0024e6:	681b      	ldr	r3, [r3, #0]
1a0024e8:	4798      	blx	r3
   }
}
1a0024ea:	bd08      	pop	{r3, pc}
1a0024ec:	e000e100 	.word	0xe000e100
1a0024f0:	10002ba8 	.word	0x10002ba8

1a0024f4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0024f4:	2200      	movs	r2, #0
1a0024f6:	2a05      	cmp	r2, #5
1a0024f8:	d819      	bhi.n	1a00252e <Board_LED_Init+0x3a>
{
1a0024fa:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0024fc:	490c      	ldr	r1, [pc, #48]	; (1a002530 <Board_LED_Init+0x3c>)
1a0024fe:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002502:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002506:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002508:	4b0a      	ldr	r3, [pc, #40]	; (1a002534 <Board_LED_Init+0x40>)
1a00250a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00250e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002512:	2001      	movs	r0, #1
1a002514:	40a0      	lsls	r0, r4
1a002516:	4301      	orrs	r1, r0
1a002518:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a00251c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002520:	2100      	movs	r1, #0
1a002522:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002524:	3201      	adds	r2, #1
1a002526:	2a05      	cmp	r2, #5
1a002528:	d9e8      	bls.n	1a0024fc <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a00252a:	bc70      	pop	{r4, r5, r6}
1a00252c:	4770      	bx	lr
1a00252e:	4770      	bx	lr
1a002530:	1a004f44 	.word	0x1a004f44
1a002534:	400f4000 	.word	0x400f4000

1a002538 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002538:	2300      	movs	r3, #0
1a00253a:	2b03      	cmp	r3, #3
1a00253c:	d816      	bhi.n	1a00256c <Board_TEC_Init+0x34>
{
1a00253e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002540:	490b      	ldr	r1, [pc, #44]	; (1a002570 <Board_TEC_Init+0x38>)
1a002542:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002546:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00254a:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00254c:	4c09      	ldr	r4, [pc, #36]	; (1a002574 <Board_TEC_Init+0x3c>)
1a00254e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002552:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002556:	2001      	movs	r0, #1
1a002558:	40a8      	lsls	r0, r5
1a00255a:	ea21 0100 	bic.w	r1, r1, r0
1a00255e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002562:	3301      	adds	r3, #1
1a002564:	2b03      	cmp	r3, #3
1a002566:	d9eb      	bls.n	1a002540 <Board_TEC_Init+0x8>
   }
}
1a002568:	bc30      	pop	{r4, r5}
1a00256a:	4770      	bx	lr
1a00256c:	4770      	bx	lr
1a00256e:	bf00      	nop
1a002570:	1a004f3c 	.word	0x1a004f3c
1a002574:	400f4000 	.word	0x400f4000

1a002578 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002578:	2300      	movs	r3, #0
1a00257a:	2b08      	cmp	r3, #8
1a00257c:	d816      	bhi.n	1a0025ac <Board_GPIO_Init+0x34>
{
1a00257e:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002580:	490b      	ldr	r1, [pc, #44]	; (1a0025b0 <Board_GPIO_Init+0x38>)
1a002582:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002586:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00258a:	784d      	ldrb	r5, [r1, #1]
1a00258c:	4c09      	ldr	r4, [pc, #36]	; (1a0025b4 <Board_GPIO_Init+0x3c>)
1a00258e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002592:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002596:	2001      	movs	r0, #1
1a002598:	40a8      	lsls	r0, r5
1a00259a:	ea21 0100 	bic.w	r1, r1, r0
1a00259e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0025a2:	3301      	adds	r3, #1
1a0025a4:	2b08      	cmp	r3, #8
1a0025a6:	d9eb      	bls.n	1a002580 <Board_GPIO_Init+0x8>
   }
}
1a0025a8:	bc30      	pop	{r4, r5}
1a0025aa:	4770      	bx	lr
1a0025ac:	4770      	bx	lr
1a0025ae:	bf00      	nop
1a0025b0:	1a004f50 	.word	0x1a004f50
1a0025b4:	400f4000 	.word	0x400f4000

1a0025b8 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0025b8:	b510      	push	{r4, lr}
1a0025ba:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a0025bc:	4c08      	ldr	r4, [pc, #32]	; (1a0025e0 <Board_ADC_Init+0x28>)
1a0025be:	4669      	mov	r1, sp
1a0025c0:	4620      	mov	r0, r4
1a0025c2:	f000 fa2f 	bl	1a002a24 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0025c6:	4a07      	ldr	r2, [pc, #28]	; (1a0025e4 <Board_ADC_Init+0x2c>)
1a0025c8:	4669      	mov	r1, sp
1a0025ca:	4620      	mov	r0, r4
1a0025cc:	f000 fa4a 	bl	1a002a64 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0025d0:	2200      	movs	r2, #0
1a0025d2:	4669      	mov	r1, sp
1a0025d4:	4620      	mov	r0, r4
1a0025d6:	f000 fa5e 	bl	1a002a96 <Chip_ADC_SetResolution>
}
1a0025da:	b002      	add	sp, #8
1a0025dc:	bd10      	pop	{r4, pc}
1a0025de:	bf00      	nop
1a0025e0:	400e3000 	.word	0x400e3000
1a0025e4:	00061a80 	.word	0x00061a80

1a0025e8 <Board_SPI_Init>:
{
1a0025e8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0025ea:	4c0b      	ldr	r4, [pc, #44]	; (1a002618 <Board_SPI_Init+0x30>)
1a0025ec:	4620      	mov	r0, r4
1a0025ee:	f000 fe11 	bl	1a003214 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0025f2:	6863      	ldr	r3, [r4, #4]
1a0025f4:	f023 0304 	bic.w	r3, r3, #4
1a0025f8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0025fa:	6823      	ldr	r3, [r4, #0]
1a0025fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002600:	f043 0307 	orr.w	r3, r3, #7
1a002604:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002606:	4905      	ldr	r1, [pc, #20]	; (1a00261c <Board_SPI_Init+0x34>)
1a002608:	4620      	mov	r0, r4
1a00260a:	f000 fde4 	bl	1a0031d6 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00260e:	6863      	ldr	r3, [r4, #4]
1a002610:	f043 0302 	orr.w	r3, r3, #2
1a002614:	6063      	str	r3, [r4, #4]
}
1a002616:	bd10      	pop	{r4, pc}
1a002618:	400c5000 	.word	0x400c5000
1a00261c:	000186a0 	.word	0x000186a0

1a002620 <Board_I2C_Init>:
{
1a002620:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002622:	2000      	movs	r0, #0
1a002624:	f000 f8fa 	bl	1a00281c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002628:	4b04      	ldr	r3, [pc, #16]	; (1a00263c <Board_I2C_Init+0x1c>)
1a00262a:	f640 0208 	movw	r2, #2056	; 0x808
1a00262e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002632:	4903      	ldr	r1, [pc, #12]	; (1a002640 <Board_I2C_Init+0x20>)
1a002634:	2000      	movs	r0, #0
1a002636:	f000 f905 	bl	1a002844 <Chip_I2C_SetClockRate>
}
1a00263a:	bd08      	pop	{r3, pc}
1a00263c:	40086000 	.word	0x40086000
1a002640:	000f4240 	.word	0x000f4240

1a002644 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002644:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002646:	4c07      	ldr	r4, [pc, #28]	; (1a002664 <Board_Debug_Init+0x20>)
1a002648:	4620      	mov	r0, r4
1a00264a:	f000 f92f 	bl	1a0028ac <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00264e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002652:	4620      	mov	r0, r4
1a002654:	f000 f954 	bl	1a002900 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002658:	2303      	movs	r3, #3
1a00265a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00265c:	2301      	movs	r3, #1
1a00265e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002660:	bd10      	pop	{r4, pc}
1a002662:	bf00      	nop
1a002664:	400c1000 	.word	0x400c1000

1a002668 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002668:	4b03      	ldr	r3, [pc, #12]	; (1a002678 <Board_UARTPutChar+0x10>)
1a00266a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a00266c:	f013 0f20 	tst.w	r3, #32
1a002670:	d0fa      	beq.n	1a002668 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002672:	4b01      	ldr	r3, [pc, #4]	; (1a002678 <Board_UARTPutChar+0x10>)
1a002674:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002676:	4770      	bx	lr
1a002678:	400c1000 	.word	0x400c1000

1a00267c <Board_UARTGetChar>:
	return pUART->LSR;
1a00267c:	4b05      	ldr	r3, [pc, #20]	; (1a002694 <Board_UARTGetChar+0x18>)
1a00267e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002680:	f013 0f01 	tst.w	r3, #1
1a002684:	d003      	beq.n	1a00268e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002686:	4b03      	ldr	r3, [pc, #12]	; (1a002694 <Board_UARTGetChar+0x18>)
1a002688:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00268a:	b2c0      	uxtb	r0, r0
1a00268c:	4770      	bx	lr
   }
   return EOF;
1a00268e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002692:	4770      	bx	lr
1a002694:	400c1000 	.word	0x400c1000

1a002698 <Board_LED_Set>:
}


void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber >= GPIO_LEDS_SIZE) {
1a002698:	2805      	cmp	r0, #5
1a00269a:	d80b      	bhi.n	1a0026b4 <Board_LED_Set+0x1c>
      return;
   }

   const struct gpio_t *io = &GpioLeds[LEDNumber];
   Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, On);
1a00269c:	4a06      	ldr	r2, [pc, #24]	; (1a0026b8 <Board_LED_Set+0x20>)
1a00269e:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a0026a2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a0026a6:	7842      	ldrb	r2, [r0, #1]
	pGPIO->B[port][pin] = setting;
1a0026a8:	015b      	lsls	r3, r3, #5
1a0026aa:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0026ae:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0026b2:	5499      	strb	r1, [r3, r2]
}
1a0026b4:	4770      	bx	lr
1a0026b6:	bf00      	nop
1a0026b8:	1a004f44 	.word	0x1a004f44

1a0026bc <Board_LED_Test>:


bool Board_LED_Test(uint8_t LEDNumber)
{
   if (LEDNumber >= GPIO_LEDS_SIZE) {
1a0026bc:	2805      	cmp	r0, #5
1a0026be:	d80f      	bhi.n	1a0026e0 <Board_LED_Test+0x24>
      return false;
   }

   const struct gpio_t *io = &GpioLeds[LEDNumber];
   return Chip_GPIO_GetPinState(LPC_GPIO_PORT, io->port, io->pin);
1a0026c0:	4a08      	ldr	r2, [pc, #32]	; (1a0026e4 <Board_LED_Test+0x28>)
1a0026c2:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a0026c6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a0026ca:	7842      	ldrb	r2, [r0, #1]
	return (bool) pGPIO->B[port][pin];
1a0026cc:	015b      	lsls	r3, r3, #5
1a0026ce:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0026d2:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0026d6:	5c98      	ldrb	r0, [r3, r2]
1a0026d8:	3800      	subs	r0, #0
1a0026da:	bf18      	it	ne
1a0026dc:	2001      	movne	r0, #1
1a0026de:	4770      	bx	lr
      return false;
1a0026e0:	2000      	movs	r0, #0
}
1a0026e2:	4770      	bx	lr
1a0026e4:	1a004f44 	.word	0x1a004f44

1a0026e8 <Board_LED_Toggle>:


void Board_LED_Toggle(uint8_t LEDNumber)
{
1a0026e8:	b510      	push	{r4, lr}
1a0026ea:	4604      	mov	r4, r0
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
1a0026ec:	f7ff ffe6 	bl	1a0026bc <Board_LED_Test>
1a0026f0:	f080 0101 	eor.w	r1, r0, #1
1a0026f4:	b2c9      	uxtb	r1, r1
1a0026f6:	4620      	mov	r0, r4
1a0026f8:	f7ff ffce 	bl	1a002698 <Board_LED_Set>
}
1a0026fc:	bd10      	pop	{r4, pc}
1a0026fe:	Address 0x000000001a0026fe is out of bounds.


1a002700 <Board_Init>:


void Board_Init(void)
{
1a002700:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002702:	f7ff ff9f 	bl	1a002644 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002706:	4809      	ldr	r0, [pc, #36]	; (1a00272c <Board_Init+0x2c>)
1a002708:	f000 fd44 	bl	1a003194 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a00270c:	f7ff ff34 	bl	1a002578 <Board_GPIO_Init>
   Board_ADC_Init();
1a002710:	f7ff ff52 	bl	1a0025b8 <Board_ADC_Init>
   Board_SPI_Init();
1a002714:	f7ff ff68 	bl	1a0025e8 <Board_SPI_Init>
   Board_I2C_Init();
1a002718:	f7ff ff82 	bl	1a002620 <Board_I2C_Init>

   Board_LED_Init();
1a00271c:	f7ff feea 	bl	1a0024f4 <Board_LED_Init>
   Board_TEC_Init();
1a002720:	f7ff ff0a 	bl	1a002538 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002724:	f000 fc80 	bl	1a003028 <SystemCoreClockUpdate>
}
1a002728:	bd08      	pop	{r3, pc}
1a00272a:	bf00      	nop
1a00272c:	400f4000 	.word	0x400f4000

1a002730 <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002730:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002732:	b2c0      	uxtb	r0, r0
1a002734:	f7ff ff98 	bl	1a002668 <Board_UARTPutChar>
}
1a002738:	bd08      	pop	{r3, pc}

1a00273a <__stdio_getchar>:

int __stdio_getchar()
{
1a00273a:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a00273c:	f7ff ff9e 	bl	1a00267c <Board_UARTGetChar>
}
1a002740:	bd08      	pop	{r3, pc}

1a002742 <__stdio_init>:

void __stdio_init()
{
1a002742:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002744:	f7ff ff7e 	bl	1a002644 <Board_Debug_Init>
}
1a002748:	bd08      	pop	{r3, pc}
1a00274a:	Address 0x000000001a00274a is out of bounds.


1a00274c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00274c:	2300      	movs	r3, #0
1a00274e:	2b1c      	cmp	r3, #28
1a002750:	d812      	bhi.n	1a002778 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002752:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002754:	4a09      	ldr	r2, [pc, #36]	; (1a00277c <Board_SetupMuxing+0x30>)
1a002756:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00275a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00275e:	784a      	ldrb	r2, [r1, #1]
1a002760:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002762:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002766:	4906      	ldr	r1, [pc, #24]	; (1a002780 <Board_SetupMuxing+0x34>)
1a002768:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00276c:	3301      	adds	r3, #1
1a00276e:	2b1c      	cmp	r3, #28
1a002770:	d9f0      	bls.n	1a002754 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002772:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002776:	4770      	bx	lr
1a002778:	4770      	bx	lr
1a00277a:	bf00      	nop
1a00277c:	1a004f6c 	.word	0x1a004f6c
1a002780:	40086000 	.word	0x40086000

1a002784 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002784:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002786:	4a17      	ldr	r2, [pc, #92]	; (1a0027e4 <Board_SetupClocking+0x60>)
1a002788:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00278c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002790:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002794:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002798:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00279c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0027a0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0027a4:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0027a8:	2201      	movs	r2, #1
1a0027aa:	490f      	ldr	r1, [pc, #60]	; (1a0027e8 <Board_SetupClocking+0x64>)
1a0027ac:	2006      	movs	r0, #6
1a0027ae:	f000 fc45 	bl	1a00303c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0027b2:	2400      	movs	r4, #0
1a0027b4:	b14c      	cbz	r4, 1a0027ca <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0027b6:	4b0b      	ldr	r3, [pc, #44]	; (1a0027e4 <Board_SetupClocking+0x60>)
1a0027b8:	685a      	ldr	r2, [r3, #4]
1a0027ba:	f022 020c 	bic.w	r2, r2, #12
1a0027be:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0027c0:	685a      	ldr	r2, [r3, #4]
1a0027c2:	f042 0203 	orr.w	r2, r2, #3
1a0027c6:	605a      	str	r2, [r3, #4]
}
1a0027c8:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0027ca:	4808      	ldr	r0, [pc, #32]	; (1a0027ec <Board_SetupClocking+0x68>)
1a0027cc:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0027d0:	2301      	movs	r3, #1
1a0027d2:	788a      	ldrb	r2, [r1, #2]
1a0027d4:	7849      	ldrb	r1, [r1, #1]
1a0027d6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0027da:	f000 fb81 	bl	1a002ee0 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0027de:	3401      	adds	r4, #1
1a0027e0:	e7e8      	b.n	1a0027b4 <Board_SetupClocking+0x30>
1a0027e2:	bf00      	nop
1a0027e4:	40043000 	.word	0x40043000
1a0027e8:	0c28cb00 	.word	0x0c28cb00
1a0027ec:	1a004f68 	.word	0x1a004f68

1a0027f0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0027f0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0027f2:	f7ff ffab 	bl	1a00274c <Board_SetupMuxing>
    Board_SetupClocking();
1a0027f6:	f7ff ffc5 	bl	1a002784 <Board_SetupClocking>
}
1a0027fa:	bd08      	pop	{r3, pc}

1a0027fc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0027fc:	2901      	cmp	r1, #1
1a0027fe:	d109      	bne.n	1a002814 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a002800:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002804:	4b04      	ldr	r3, [pc, #16]	; (1a002818 <Chip_I2C_EventHandler+0x1c>)
1a002806:	eb03 0080 	add.w	r0, r3, r0, lsl #2
1a00280a:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a00280c:	7d13      	ldrb	r3, [r2, #20]
1a00280e:	b2db      	uxtb	r3, r3
1a002810:	2b04      	cmp	r3, #4
1a002812:	d0fb      	beq.n	1a00280c <Chip_I2C_EventHandler+0x10>
}
1a002814:	4770      	bx	lr
1a002816:	bf00      	nop
1a002818:	10000004 	.word	0x10000004

1a00281c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00281c:	b570      	push	{r4, r5, r6, lr}
1a00281e:	4604      	mov	r4, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002820:	4e07      	ldr	r6, [pc, #28]	; (1a002840 <Chip_I2C_Init+0x24>)
1a002822:	00c5      	lsls	r5, r0, #3
1a002824:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002828:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a00282c:	8898      	ldrh	r0, [r3, #4]
1a00282e:	f000 fbbb 	bl	1a002fa8 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002832:	1b2c      	subs	r4, r5, r4
1a002834:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
1a002838:	226c      	movs	r2, #108	; 0x6c
1a00283a:	619a      	str	r2, [r3, #24]
}
1a00283c:	bd70      	pop	{r4, r5, r6, pc}
1a00283e:	bf00      	nop
1a002840:	10000004 	.word	0x10000004

1a002844 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002848:	4604      	mov	r4, r0
1a00284a:	4688      	mov	r8, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00284c:	4d0b      	ldr	r5, [pc, #44]	; (1a00287c <Chip_I2C_SetClockRate+0x38>)
1a00284e:	00c6      	lsls	r6, r0, #3
1a002850:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a002854:	009f      	lsls	r7, r3, #2
1a002856:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a00285a:	8898      	ldrh	r0, [r3, #4]
1a00285c:	f000 fbbe 	bl	1a002fdc <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a002860:	fbb0 f1f8 	udiv	r1, r0, r8
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a002864:	59eb      	ldr	r3, [r5, r7]
1a002866:	084a      	lsrs	r2, r1, #1
1a002868:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00286a:	1b34      	subs	r4, r6, r4
1a00286c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
1a002870:	6918      	ldr	r0, [r3, #16]
1a002872:	1a09      	subs	r1, r1, r0
1a002874:	6159      	str	r1, [r3, #20]
}
1a002876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00287a:	bf00      	nop
1a00287c:	10000004 	.word	0x10000004

1a002880 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002880:	4b09      	ldr	r3, [pc, #36]	; (1a0028a8 <Chip_UART_GetIndex+0x28>)
1a002882:	4298      	cmp	r0, r3
1a002884:	d00b      	beq.n	1a00289e <Chip_UART_GetIndex+0x1e>
1a002886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00288a:	4298      	cmp	r0, r3
1a00288c:	d009      	beq.n	1a0028a2 <Chip_UART_GetIndex+0x22>
1a00288e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002892:	4298      	cmp	r0, r3
1a002894:	d001      	beq.n	1a00289a <Chip_UART_GetIndex+0x1a>
1a002896:	2000      	movs	r0, #0
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a002898:	4770      	bx	lr
			return 1;
1a00289a:	2001      	movs	r0, #1
1a00289c:	4770      	bx	lr
			return 2;
1a00289e:	2002      	movs	r0, #2
1a0028a0:	4770      	bx	lr
			return 3;
1a0028a2:	2003      	movs	r0, #3
1a0028a4:	4770      	bx	lr
1a0028a6:	bf00      	nop
1a0028a8:	400c1000 	.word	0x400c1000

1a0028ac <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0028ac:	b530      	push	{r4, r5, lr}
1a0028ae:	b083      	sub	sp, #12
1a0028b0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0028b2:	f7ff ffe5 	bl	1a002880 <Chip_UART_GetIndex>
1a0028b6:	2301      	movs	r3, #1
1a0028b8:	461a      	mov	r2, r3
1a0028ba:	4619      	mov	r1, r3
1a0028bc:	4d0e      	ldr	r5, [pc, #56]	; (1a0028f8 <Chip_UART_Init+0x4c>)
1a0028be:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0028c2:	f000 fb53 	bl	1a002f6c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0028c6:	2307      	movs	r3, #7
1a0028c8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0028ca:	2300      	movs	r3, #0
1a0028cc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0028ce:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0028d0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0028d2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0028d4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0028d6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0028d8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0028da:	4b08      	ldr	r3, [pc, #32]	; (1a0028fc <Chip_UART_Init+0x50>)
1a0028dc:	429c      	cmp	r4, r3
1a0028de:	d006      	beq.n	1a0028ee <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0028e0:	2303      	movs	r3, #3
1a0028e2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0028e4:	2310      	movs	r3, #16
1a0028e6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0028e8:	9b01      	ldr	r3, [sp, #4]
}
1a0028ea:	b003      	add	sp, #12
1a0028ec:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0028ee:	2300      	movs	r3, #0
1a0028f0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0028f2:	69a3      	ldr	r3, [r4, #24]
1a0028f4:	9301      	str	r3, [sp, #4]
1a0028f6:	e7f3      	b.n	1a0028e0 <Chip_UART_Init+0x34>
1a0028f8:	1a004fe8 	.word	0x1a004fe8
1a0028fc:	40082000 	.word	0x40082000

1a002900 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a002900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002904:	b083      	sub	sp, #12
1a002906:	9001      	str	r0, [sp, #4]
1a002908:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00290a:	f7ff ffb9 	bl	1a002880 <Chip_UART_GetIndex>
1a00290e:	4b32      	ldr	r3, [pc, #200]	; (1a0029d8 <Chip_UART_SetBaudFDR+0xd8>)
1a002910:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002914:	f000 fb62 	bl	1a002fdc <Chip_Clock_GetRate>
1a002918:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00291a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00291e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002920:	f04f 0b00 	mov.w	fp, #0
1a002924:	46a2      	mov	sl, r4
1a002926:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a002928:	e02a      	b.n	1a002980 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00292a:	4242      	negs	r2, r0
				div ++;
1a00292c:	1c4b      	adds	r3, r1, #1
1a00292e:	e017      	b.n	1a002960 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002930:	b30a      	cbz	r2, 1a002976 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a002932:	4617      	mov	r7, r2
			sd = d;
1a002934:	46ab      	mov	fp, r5
			sm = m;
1a002936:	46a2      	mov	sl, r4
			sdiv = div;
1a002938:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00293a:	3501      	adds	r5, #1
1a00293c:	42ac      	cmp	r4, r5
1a00293e:	d91e      	bls.n	1a00297e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002940:	0933      	lsrs	r3, r6, #4
1a002942:	0730      	lsls	r0, r6, #28
1a002944:	fba4 0100 	umull	r0, r1, r4, r0
1a002948:	fb04 1103 	mla	r1, r4, r3, r1
1a00294c:	1962      	adds	r2, r4, r5
1a00294e:	fb08 f202 	mul.w	r2, r8, r2
1a002952:	2300      	movs	r3, #0
1a002954:	f000 fca4 	bl	1a0032a0 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a002958:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00295a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00295c:	2800      	cmp	r0, #0
1a00295e:	dbe4      	blt.n	1a00292a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002960:	4297      	cmp	r7, r2
1a002962:	d3ea      	bcc.n	1a00293a <Chip_UART_SetBaudFDR+0x3a>
1a002964:	2b00      	cmp	r3, #0
1a002966:	d0e8      	beq.n	1a00293a <Chip_UART_SetBaudFDR+0x3a>
1a002968:	0c19      	lsrs	r1, r3, #16
1a00296a:	d1e6      	bne.n	1a00293a <Chip_UART_SetBaudFDR+0x3a>
1a00296c:	2b02      	cmp	r3, #2
1a00296e:	d8df      	bhi.n	1a002930 <Chip_UART_SetBaudFDR+0x30>
1a002970:	2d00      	cmp	r5, #0
1a002972:	d0dd      	beq.n	1a002930 <Chip_UART_SetBaudFDR+0x30>
1a002974:	e7e1      	b.n	1a00293a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a002976:	4617      	mov	r7, r2
			sd = d;
1a002978:	46ab      	mov	fp, r5
			sm = m;
1a00297a:	46a2      	mov	sl, r4
			sdiv = div;
1a00297c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00297e:	3401      	adds	r4, #1
1a002980:	b11f      	cbz	r7, 1a00298a <Chip_UART_SetBaudFDR+0x8a>
1a002982:	2c0f      	cmp	r4, #15
1a002984:	d801      	bhi.n	1a00298a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a002986:	2500      	movs	r5, #0
1a002988:	e7d8      	b.n	1a00293c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00298a:	f1b9 0f00 	cmp.w	r9, #0
1a00298e:	d01e      	beq.n	1a0029ce <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002990:	9a01      	ldr	r2, [sp, #4]
1a002992:	4611      	mov	r1, r2
1a002994:	68d3      	ldr	r3, [r2, #12]
1a002996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00299a:	60d3      	str	r3, [r2, #12]
	pUART->DLL = (uint32_t) dll;
1a00299c:	fa5f f389 	uxtb.w	r3, r9
1a0029a0:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a0029a2:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0029a6:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0029a8:	68d3      	ldr	r3, [r2, #12]
1a0029aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0029ae:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0029b0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0029b4:	b2db      	uxtb	r3, r3
1a0029b6:	f00b 020f 	and.w	r2, fp, #15
1a0029ba:	4313      	orrs	r3, r2
1a0029bc:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0029be:	0933      	lsrs	r3, r6, #4
1a0029c0:	fb0a f303 	mul.w	r3, sl, r3
1a0029c4:	44da      	add	sl, fp
1a0029c6:	fb09 f90a 	mul.w	r9, r9, sl
1a0029ca:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0029ce:	4648      	mov	r0, r9
1a0029d0:	b003      	add	sp, #12
1a0029d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0029d6:	bf00      	nop
1a0029d8:	1a004fe0 	.word	0x1a004fe0

1a0029dc <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0029dc:	4b03      	ldr	r3, [pc, #12]	; (1a0029ec <Chip_ADC_GetClockIndex+0x10>)
1a0029de:	4298      	cmp	r0, r3
1a0029e0:	d001      	beq.n	1a0029e6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0029e2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0029e4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0029e6:	2004      	movs	r0, #4
1a0029e8:	4770      	bx	lr
1a0029ea:	bf00      	nop
1a0029ec:	400e4000 	.word	0x400e4000

1a0029f0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0029f0:	b570      	push	{r4, r5, r6, lr}
1a0029f2:	460d      	mov	r5, r1
1a0029f4:	4614      	mov	r4, r2
1a0029f6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0029f8:	f7ff fff0 	bl	1a0029dc <Chip_ADC_GetClockIndex>
1a0029fc:	f000 faee 	bl	1a002fdc <Chip_Clock_GetRate>
	if (burstMode) {
1a002a00:	b155      	cbz	r5, 1a002a18 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a002a02:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a002a06:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a002a0a:	0064      	lsls	r4, r4, #1
1a002a0c:	fbb0 f0f4 	udiv	r0, r0, r4
1a002a10:	b2c0      	uxtb	r0, r0
1a002a12:	3801      	subs	r0, #1
	return div;
}
1a002a14:	b2c0      	uxtb	r0, r0
1a002a16:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a002a18:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002a1c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a002a20:	e7f1      	b.n	1a002a06 <getClkDiv+0x16>
1a002a22:	Address 0x000000001a002a22 is out of bounds.


1a002a24 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a002a24:	b538      	push	{r3, r4, r5, lr}
1a002a26:	4605      	mov	r5, r0
1a002a28:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a002a2a:	f7ff ffd7 	bl	1a0029dc <Chip_ADC_GetClockIndex>
1a002a2e:	2301      	movs	r3, #1
1a002a30:	461a      	mov	r2, r3
1a002a32:	4619      	mov	r1, r3
1a002a34:	f000 fa9a 	bl	1a002f6c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002a38:	2100      	movs	r1, #0
1a002a3a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002a3c:	4a08      	ldr	r2, [pc, #32]	; (1a002a60 <Chip_ADC_Init+0x3c>)
1a002a3e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002a40:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a002a42:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a002a44:	230b      	movs	r3, #11
1a002a46:	4628      	mov	r0, r5
1a002a48:	f7ff ffd2 	bl	1a0029f0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002a4c:	0200      	lsls	r0, r0, #8
1a002a4e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002a52:	7923      	ldrb	r3, [r4, #4]
1a002a54:	045b      	lsls	r3, r3, #17
1a002a56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002a5a:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a002a5c:	602b      	str	r3, [r5, #0]
}
1a002a5e:	bd38      	pop	{r3, r4, r5, pc}
1a002a60:	00061a80 	.word	0x00061a80

1a002a64 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002a64:	b570      	push	{r4, r5, r6, lr}
1a002a66:	4605      	mov	r5, r0
1a002a68:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002a6a:	6804      	ldr	r4, [r0, #0]
1a002a6c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002a70:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002a74:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002a76:	790b      	ldrb	r3, [r1, #4]
1a002a78:	f1c3 030b 	rsb	r3, r3, #11
1a002a7c:	b2db      	uxtb	r3, r3
1a002a7e:	7949      	ldrb	r1, [r1, #5]
1a002a80:	f7ff ffb6 	bl	1a0029f0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002a84:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002a88:	7933      	ldrb	r3, [r6, #4]
1a002a8a:	045b      	lsls	r3, r3, #17
1a002a8c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a002a90:	4323      	orrs	r3, r4
	pADC->CR = cr;
1a002a92:	602b      	str	r3, [r5, #0]
}
1a002a94:	bd70      	pop	{r4, r5, r6, pc}

1a002a96 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002a96:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002a98:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002a9a:	680a      	ldr	r2, [r1, #0]
1a002a9c:	f7ff ffe2 	bl	1a002a64 <Chip_ADC_SetSampleRate>
}
1a002aa0:	bd08      	pop	{r3, pc}
1a002aa2:	Address 0x000000001a002aa2 is out of bounds.


1a002aa4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002aa4:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002aa6:	680b      	ldr	r3, [r1, #0]
1a002aa8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002aac:	d002      	beq.n	1a002ab4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002ab2:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002ab4:	4607      	mov	r7, r0
1a002ab6:	2501      	movs	r5, #1
1a002ab8:	e03a      	b.n	1a002b30 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a002aba:	694b      	ldr	r3, [r1, #20]
1a002abc:	fb03 f302 	mul.w	r3, r3, r2
1a002ac0:	fbb3 f3f5 	udiv	r3, r3, r5
1a002ac4:	e01c      	b.n	1a002b00 <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002ac6:	461c      	mov	r4, r3
	if (val < 0)
1a002ac8:	ebb0 0c04 	subs.w	ip, r0, r4
1a002acc:	d427      	bmi.n	1a002b1e <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002ace:	4567      	cmp	r7, ip
1a002ad0:	d906      	bls.n	1a002ae0 <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a002ad2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a002ad4:	1c77      	adds	r7, r6, #1
1a002ad6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a002ad8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a002ada:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a002adc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a002ade:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a002ae0:	3201      	adds	r2, #1
1a002ae2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a002ae6:	dc1d      	bgt.n	1a002b24 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a002ae8:	680c      	ldr	r4, [r1, #0]
1a002aea:	f014 0f40 	tst.w	r4, #64	; 0x40
1a002aee:	d0e4      	beq.n	1a002aba <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002af0:	1c73      	adds	r3, r6, #1
1a002af2:	fa02 fc03 	lsl.w	ip, r2, r3
1a002af6:	694b      	ldr	r3, [r1, #20]
1a002af8:	fb03 f30c 	mul.w	r3, r3, ip
1a002afc:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002b00:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a002b3c <pll_calc_divs+0x98>
1a002b04:	4563      	cmp	r3, ip
1a002b06:	d9eb      	bls.n	1a002ae0 <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002b08:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a002b40 <pll_calc_divs+0x9c>
1a002b0c:	4563      	cmp	r3, ip
1a002b0e:	d809      	bhi.n	1a002b24 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a002b10:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002b14:	d1d7      	bne.n	1a002ac6 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a002b16:	1c74      	adds	r4, r6, #1
1a002b18:	fa23 f404 	lsr.w	r4, r3, r4
1a002b1c:	e7d4      	b.n	1a002ac8 <pll_calc_divs+0x24>
		return -val;
1a002b1e:	f1cc 0c00 	rsb	ip, ip, #0
1a002b22:	e7d4      	b.n	1a002ace <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a002b24:	3601      	adds	r6, #1
1a002b26:	2e03      	cmp	r6, #3
1a002b28:	dc01      	bgt.n	1a002b2e <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a002b2a:	2201      	movs	r2, #1
1a002b2c:	e7d9      	b.n	1a002ae2 <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a002b2e:	3501      	adds	r5, #1
1a002b30:	2d04      	cmp	r5, #4
1a002b32:	dc01      	bgt.n	1a002b38 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a002b34:	2600      	movs	r6, #0
1a002b36:	e7f6      	b.n	1a002b26 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a002b38:	bcf0      	pop	{r4, r5, r6, r7}
1a002b3a:	4770      	bx	lr
1a002b3c:	094c5eff 	.word	0x094c5eff
1a002b40:	1312d000 	.word	0x1312d000

1a002b44 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002b46:	b099      	sub	sp, #100	; 0x64
1a002b48:	4605      	mov	r5, r0
1a002b4a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002b4c:	225c      	movs	r2, #92	; 0x5c
1a002b4e:	2100      	movs	r1, #0
1a002b50:	a801      	add	r0, sp, #4
1a002b52:	f001 f80f 	bl	1a003b74 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002b56:	2380      	movs	r3, #128	; 0x80
1a002b58:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002b5a:	6963      	ldr	r3, [r4, #20]
1a002b5c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002b5e:	7923      	ldrb	r3, [r4, #4]
1a002b60:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002b64:	4669      	mov	r1, sp
1a002b66:	4628      	mov	r0, r5
1a002b68:	f7ff ff9c 	bl	1a002aa4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002b6c:	9b06      	ldr	r3, [sp, #24]
1a002b6e:	42ab      	cmp	r3, r5
1a002b70:	d027      	beq.n	1a002bc2 <pll_get_frac+0x7e>
	if (val < 0)
1a002b72:	1aeb      	subs	r3, r5, r3
1a002b74:	d42e      	bmi.n	1a002bd4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002b76:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002b78:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002b7e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002b80:	6963      	ldr	r3, [r4, #20]
1a002b82:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002b84:	7923      	ldrb	r3, [r4, #4]
1a002b86:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002b8a:	a910      	add	r1, sp, #64	; 0x40
1a002b8c:	4628      	mov	r0, r5
1a002b8e:	f7ff ff89 	bl	1a002aa4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002b92:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002b94:	42ab      	cmp	r3, r5
1a002b96:	d01f      	beq.n	1a002bd8 <pll_get_frac+0x94>
	if (val < 0)
1a002b98:	1aeb      	subs	r3, r5, r3
1a002b9a:	d425      	bmi.n	1a002be8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002b9c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002b9e:	4b2b      	ldr	r3, [pc, #172]	; (1a002c4c <pll_get_frac+0x108>)
1a002ba0:	429d      	cmp	r5, r3
1a002ba2:	d923      	bls.n	1a002bec <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002ba4:	980e      	ldr	r0, [sp, #56]	; 0x38
	if (val < 0)
1a002ba6:	1a2d      	subs	r5, r5, r0
1a002ba8:	d433      	bmi.n	1a002c12 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002baa:	42ae      	cmp	r6, r5
1a002bac:	dc3b      	bgt.n	1a002c26 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a002bae:	42be      	cmp	r6, r7
1a002bb0:	dc31      	bgt.n	1a002c16 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a002bb2:	466d      	mov	r5, sp
1a002bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002bc0:	e006      	b.n	1a002bd0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a002bc2:	466d      	mov	r5, sp
1a002bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a002bd0:	b019      	add	sp, #100	; 0x64
1a002bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a002bd4:	425b      	negs	r3, r3
1a002bd6:	e7ce      	b.n	1a002b76 <pll_get_frac+0x32>
		*ppll = pll[2];
1a002bd8:	ad10      	add	r5, sp, #64	; 0x40
1a002bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bde:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002be6:	e7f3      	b.n	1a002bd0 <pll_get_frac+0x8c>
		return -val;
1a002be8:	425b      	negs	r3, r3
1a002bea:	e7d7      	b.n	1a002b9c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a002bec:	2340      	movs	r3, #64	; 0x40
1a002bee:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002bf0:	6963      	ldr	r3, [r4, #20]
1a002bf2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002bf4:	a908      	add	r1, sp, #32
1a002bf6:	4628      	mov	r0, r5
1a002bf8:	f7ff ff54 	bl	1a002aa4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002bfe:	42ab      	cmp	r3, r5
1a002c00:	d1d0      	bne.n	1a002ba4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a002c02:	ad08      	add	r5, sp, #32
1a002c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002c10:	e7de      	b.n	1a002bd0 <pll_get_frac+0x8c>
		return -val;
1a002c12:	426d      	negs	r5, r5
1a002c14:	e7c9      	b.n	1a002baa <pll_get_frac+0x66>
			*ppll = pll[2];
1a002c16:	ad10      	add	r5, sp, #64	; 0x40
1a002c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c24:	e7d4      	b.n	1a002bd0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a002c26:	42af      	cmp	r7, r5
1a002c28:	db07      	blt.n	1a002c3a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a002c2a:	ad08      	add	r5, sp, #32
1a002c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c38:	e7ca      	b.n	1a002bd0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a002c3a:	ad10      	add	r5, sp, #64	; 0x40
1a002c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c48:	e7c2      	b.n	1a002bd0 <pll_get_frac+0x8c>
1a002c4a:	bf00      	nop
1a002c4c:	068e7780 	.word	0x068e7780

1a002c50 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002c50:	b430      	push	{r4, r5}
1a002c52:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002c54:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002c56:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002c58:	e000      	b.n	1a002c5c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002c5a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002c5c:	281c      	cmp	r0, #28
1a002c5e:	d117      	bne.n	1a002c90 <Chip_Clock_FindBaseClock+0x40>
1a002c60:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002c64:	490b      	ldr	r1, [pc, #44]	; (1a002c94 <Chip_Clock_FindBaseClock+0x44>)
1a002c66:	eb01 0242 	add.w	r2, r1, r2, lsl #1
1a002c6a:	7911      	ldrb	r1, [r2, #4]
1a002c6c:	4281      	cmp	r1, r0
1a002c6e:	d00f      	beq.n	1a002c90 <Chip_Clock_FindBaseClock+0x40>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002c70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002c74:	4c07      	ldr	r4, [pc, #28]	; (1a002c94 <Chip_Clock_FindBaseClock+0x44>)
1a002c76:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a002c7a:	42aa      	cmp	r2, r5
1a002c7c:	d8ed      	bhi.n	1a002c5a <Chip_Clock_FindBaseClock+0xa>
1a002c7e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002c82:	eb04 0242 	add.w	r2, r4, r2, lsl #1
1a002c86:	8852      	ldrh	r2, [r2, #2]
1a002c88:	42aa      	cmp	r2, r5
1a002c8a:	d3e6      	bcc.n	1a002c5a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a002c8c:	4608      	mov	r0, r1
1a002c8e:	e7e5      	b.n	1a002c5c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a002c90:	bc30      	pop	{r4, r5}
1a002c92:	4770      	bx	lr
1a002c94:	1a004ff8 	.word	0x1a004ff8

1a002c98 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002c98:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002c9e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002ca0:	4a0d      	ldr	r2, [pc, #52]	; (1a002cd8 <Chip_Clock_EnableCrystal+0x40>)
1a002ca2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002ca4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002ca8:	6992      	ldr	r2, [r2, #24]
1a002caa:	428a      	cmp	r2, r1
1a002cac:	d001      	beq.n	1a002cb2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002cae:	4a0a      	ldr	r2, [pc, #40]	; (1a002cd8 <Chip_Clock_EnableCrystal+0x40>)
1a002cb0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002cb2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002cb6:	4a09      	ldr	r2, [pc, #36]	; (1a002cdc <Chip_Clock_EnableCrystal+0x44>)
1a002cb8:	6811      	ldr	r1, [r2, #0]
1a002cba:	4a09      	ldr	r2, [pc, #36]	; (1a002ce0 <Chip_Clock_EnableCrystal+0x48>)
1a002cbc:	4291      	cmp	r1, r2
1a002cbe:	d901      	bls.n	1a002cc4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002cc0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002cc4:	4a04      	ldr	r2, [pc, #16]	; (1a002cd8 <Chip_Clock_EnableCrystal+0x40>)
1a002cc6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002cc8:	9b01      	ldr	r3, [sp, #4]
1a002cca:	1e5a      	subs	r2, r3, #1
1a002ccc:	9201      	str	r2, [sp, #4]
1a002cce:	2b00      	cmp	r3, #0
1a002cd0:	d1fa      	bne.n	1a002cc8 <Chip_Clock_EnableCrystal+0x30>
}
1a002cd2:	b002      	add	sp, #8
1a002cd4:	4770      	bx	lr
1a002cd6:	bf00      	nop
1a002cd8:	40050000 	.word	0x40050000
1a002cdc:	1a004f64 	.word	0x1a004f64
1a002ce0:	01312cff 	.word	0x01312cff

1a002ce4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002ce4:	3012      	adds	r0, #18
1a002ce6:	4b05      	ldr	r3, [pc, #20]	; (1a002cfc <Chip_Clock_GetDividerSource+0x18>)
1a002ce8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002cec:	f010 0f01 	tst.w	r0, #1
1a002cf0:	d102      	bne.n	1a002cf8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002cf2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002cf6:	4770      	bx	lr
		return CLKINPUT_PD;
1a002cf8:	2011      	movs	r0, #17
}
1a002cfa:	4770      	bx	lr
1a002cfc:	40050000 	.word	0x40050000

1a002d00 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002d00:	f100 0212 	add.w	r2, r0, #18
1a002d04:	4b03      	ldr	r3, [pc, #12]	; (1a002d14 <Chip_Clock_GetDividerDivisor+0x14>)
1a002d06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002d0a:	4b03      	ldr	r3, [pc, #12]	; (1a002d18 <Chip_Clock_GetDividerDivisor+0x18>)
1a002d0c:	5c18      	ldrb	r0, [r3, r0]
}
1a002d0e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002d12:	4770      	bx	lr
1a002d14:	40050000 	.word	0x40050000
1a002d18:	1a004ff0 	.word	0x1a004ff0

1a002d1c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002d1c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002d1e:	2810      	cmp	r0, #16
1a002d20:	d80a      	bhi.n	1a002d38 <Chip_Clock_GetClockInputHz+0x1c>
1a002d22:	e8df f000 	tbb	[pc, r0]
1a002d26:	0b44      	.short	0x0b44
1a002d28:	0921180d 	.word	0x0921180d
1a002d2c:	2d2a2724 	.word	0x2d2a2724
1a002d30:	34300909 	.word	0x34300909
1a002d34:	3c38      	.short	0x3c38
1a002d36:	40          	.byte	0x40
1a002d37:	00          	.byte	0x00
	uint32_t rate = 0;
1a002d38:	2000      	movs	r0, #0
	default:
		break;
	}

	return rate;
}
1a002d3a:	bd08      	pop	{r3, pc}
		rate = CGU_IRC_FREQ;
1a002d3c:	481e      	ldr	r0, [pc, #120]	; (1a002db8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002d3e:	e7fc      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002d40:	4b1e      	ldr	r3, [pc, #120]	; (1a002dbc <Chip_Clock_GetClockInputHz+0xa0>)
1a002d42:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002d46:	f003 0307 	and.w	r3, r3, #7
1a002d4a:	2b04      	cmp	r3, #4
1a002d4c:	d001      	beq.n	1a002d52 <Chip_Clock_GetClockInputHz+0x36>
			rate = 25000000;
1a002d4e:	481c      	ldr	r0, [pc, #112]	; (1a002dc0 <Chip_Clock_GetClockInputHz+0xa4>)
1a002d50:	e7f3      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
	uint32_t rate = 0;
1a002d52:	2000      	movs	r0, #0
1a002d54:	e7f1      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002d56:	4b19      	ldr	r3, [pc, #100]	; (1a002dbc <Chip_Clock_GetClockInputHz+0xa0>)
1a002d58:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002d5c:	f003 0307 	and.w	r3, r3, #7
1a002d60:	2b04      	cmp	r3, #4
1a002d62:	d027      	beq.n	1a002db4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002d64:	4816      	ldr	r0, [pc, #88]	; (1a002dc0 <Chip_Clock_GetClockInputHz+0xa4>)
1a002d66:	e7e8      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = ExtRateIn;
1a002d68:	4b16      	ldr	r3, [pc, #88]	; (1a002dc4 <Chip_Clock_GetClockInputHz+0xa8>)
1a002d6a:	6818      	ldr	r0, [r3, #0]
		break;
1a002d6c:	e7e5      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = OscRateIn;
1a002d6e:	4b16      	ldr	r3, [pc, #88]	; (1a002dc8 <Chip_Clock_GetClockInputHz+0xac>)
1a002d70:	6818      	ldr	r0, [r3, #0]
		break;
1a002d72:	e7e2      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002d74:	4b15      	ldr	r3, [pc, #84]	; (1a002dcc <Chip_Clock_GetClockInputHz+0xb0>)
1a002d76:	6818      	ldr	r0, [r3, #0]
		break;
1a002d78:	e7df      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002d7a:	4b14      	ldr	r3, [pc, #80]	; (1a002dcc <Chip_Clock_GetClockInputHz+0xb0>)
1a002d7c:	6858      	ldr	r0, [r3, #4]
		break;
1a002d7e:	e7dc      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetMainPLLHz();
1a002d80:	f000 f868 	bl	1a002e54 <Chip_Clock_GetMainPLLHz>
		break;
1a002d84:	e7d9      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002d86:	2100      	movs	r1, #0
1a002d88:	f000 f898 	bl	1a002ebc <Chip_Clock_GetDivRate>
		break;
1a002d8c:	e7d5      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002d8e:	2101      	movs	r1, #1
1a002d90:	f000 f894 	bl	1a002ebc <Chip_Clock_GetDivRate>
		break;
1a002d94:	e7d1      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002d96:	2102      	movs	r1, #2
1a002d98:	f000 f890 	bl	1a002ebc <Chip_Clock_GetDivRate>
		break;
1a002d9c:	e7cd      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002d9e:	2103      	movs	r1, #3
1a002da0:	f000 f88c 	bl	1a002ebc <Chip_Clock_GetDivRate>
		break;
1a002da4:	e7c9      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002da6:	2104      	movs	r1, #4
1a002da8:	f000 f888 	bl	1a002ebc <Chip_Clock_GetDivRate>
		break;
1a002dac:	e7c5      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
		rate = CRYSTAL_32K_FREQ_IN;
1a002dae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a002db2:	e7c2      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
			rate = 50000000; /* RMII uses 50 MHz */
1a002db4:	4806      	ldr	r0, [pc, #24]	; (1a002dd0 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a002db6:	e7c0      	b.n	1a002d3a <Chip_Clock_GetClockInputHz+0x1e>
1a002db8:	00b71b00 	.word	0x00b71b00
1a002dbc:	40043000 	.word	0x40043000
1a002dc0:	017d7840 	.word	0x017d7840
1a002dc4:	1a004f38 	.word	0x1a004f38
1a002dc8:	1a004f64 	.word	0x1a004f64
1a002dcc:	10002bac 	.word	0x10002bac
1a002dd0:	02faf080 	.word	0x02faf080

1a002dd4 <Chip_Clock_CalcMainPLLValue>:
{
1a002dd4:	b538      	push	{r3, r4, r5, lr}
1a002dd6:	4605      	mov	r5, r0
1a002dd8:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002dda:	7908      	ldrb	r0, [r1, #4]
1a002ddc:	f7ff ff9e 	bl	1a002d1c <Chip_Clock_GetClockInputHz>
1a002de0:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002de2:	4b19      	ldr	r3, [pc, #100]	; (1a002e48 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002de4:	442b      	add	r3, r5
1a002de6:	4a19      	ldr	r2, [pc, #100]	; (1a002e4c <Chip_Clock_CalcMainPLLValue+0x78>)
1a002de8:	4293      	cmp	r3, r2
1a002dea:	d821      	bhi.n	1a002e30 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002dec:	b318      	cbz	r0, 1a002e36 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002dee:	2380      	movs	r3, #128	; 0x80
1a002df0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002df2:	2300      	movs	r3, #0
1a002df4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002df6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002df8:	fbb5 f3f0 	udiv	r3, r5, r0
1a002dfc:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002dfe:	4a14      	ldr	r2, [pc, #80]	; (1a002e50 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002e00:	4295      	cmp	r5, r2
1a002e02:	d903      	bls.n	1a002e0c <Chip_Clock_CalcMainPLLValue+0x38>
1a002e04:	fb03 f000 	mul.w	r0, r3, r0
1a002e08:	42a8      	cmp	r0, r5
1a002e0a:	d007      	beq.n	1a002e1c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002e0c:	4621      	mov	r1, r4
1a002e0e:	4628      	mov	r0, r5
1a002e10:	f7ff fe98 	bl	1a002b44 <pll_get_frac>
		if (!ppll->nsel) {
1a002e14:	68a3      	ldr	r3, [r4, #8]
1a002e16:	b18b      	cbz	r3, 1a002e3c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a002e18:	3b01      	subs	r3, #1
1a002e1a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a002e1c:	6923      	ldr	r3, [r4, #16]
1a002e1e:	b183      	cbz	r3, 1a002e42 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a002e20:	68e2      	ldr	r2, [r4, #12]
1a002e22:	b10a      	cbz	r2, 1a002e28 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002e24:	3a01      	subs	r2, #1
1a002e26:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a002e28:	3b01      	subs	r3, #1
1a002e2a:	6123      	str	r3, [r4, #16]
	return 0;
1a002e2c:	2000      	movs	r0, #0
}
1a002e2e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a002e30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e34:	e7fb      	b.n	1a002e2e <Chip_Clock_CalcMainPLLValue+0x5a>
1a002e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e3a:	e7f8      	b.n	1a002e2e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a002e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e40:	e7f5      	b.n	1a002e2e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a002e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e46:	e7f2      	b.n	1a002e2e <Chip_Clock_CalcMainPLLValue+0x5a>
1a002e48:	ff6b3a10 	.word	0xff6b3a10
1a002e4c:	0b940510 	.word	0x0b940510
1a002e50:	094c5eff 	.word	0x094c5eff

1a002e54 <Chip_Clock_GetMainPLLHz>:
{
1a002e54:	b570      	push	{r4, r5, r6, lr}
1a002e56:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002e58:	4d16      	ldr	r5, [pc, #88]	; (1a002eb4 <Chip_Clock_GetMainPLLHz+0x60>)
1a002e5a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002e5c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002e60:	f7ff ff5c 	bl	1a002d1c <Chip_Clock_GetClockInputHz>
1a002e64:	4606      	mov	r6, r0
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002e66:	4a14      	ldr	r2, [pc, #80]	; (1a002eb8 <Chip_Clock_GetMainPLLHz+0x64>)
1a002e68:	9201      	str	r2, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002e6a:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a002e6c:	f010 0001 	ands.w	r0, r0, #1
1a002e70:	d01d      	beq.n	1a002eae <Chip_Clock_GetMainPLLHz+0x5a>
	msel = (PLLReg >> 16) & 0xFF;
1a002e72:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002e76:	f3c4 3101 	ubfx	r1, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002e7a:	f3c4 2501 	ubfx	r5, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a002e7e:	f3c4 1080 	ubfx	r0, r4, #6, #1
	m = msel + 1;
1a002e82:	3201      	adds	r2, #1
	n = nsel + 1;
1a002e84:	3101      	adds	r1, #1
	p = ptab[psel];
1a002e86:	ab02      	add	r3, sp, #8
1a002e88:	441d      	add	r5, r3
1a002e8a:	f815 3c04 	ldrb.w	r3, [r5, #-4]
	if (direct || fbsel) {
1a002e8e:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002e92:	d108      	bne.n	1a002ea6 <Chip_Clock_GetMainPLLHz+0x52>
1a002e94:	b938      	cbnz	r0, 1a002ea6 <Chip_Clock_GetMainPLLHz+0x52>
	return (m / (2 * p)) * (freq / n);
1a002e96:	0058      	lsls	r0, r3, #1
1a002e98:	fbb2 f2f0 	udiv	r2, r2, r0
1a002e9c:	fbb6 f0f1 	udiv	r0, r6, r1
1a002ea0:	fb00 f002 	mul.w	r0, r0, r2
1a002ea4:	e003      	b.n	1a002eae <Chip_Clock_GetMainPLLHz+0x5a>
		return m * (freq / n);
1a002ea6:	fbb6 f0f1 	udiv	r0, r6, r1
1a002eaa:	fb02 f000 	mul.w	r0, r2, r0
}
1a002eae:	b002      	add	sp, #8
1a002eb0:	bd70      	pop	{r4, r5, r6, pc}
1a002eb2:	bf00      	nop
1a002eb4:	40050000 	.word	0x40050000
1a002eb8:	08040201 	.word	0x08040201

1a002ebc <Chip_Clock_GetDivRate>:
{
1a002ebc:	b538      	push	{r3, r4, r5, lr}
1a002ebe:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a002ec0:	4608      	mov	r0, r1
1a002ec2:	f7ff ff0f 	bl	1a002ce4 <Chip_Clock_GetDividerSource>
1a002ec6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002ec8:	4620      	mov	r0, r4
1a002eca:	f7ff ff19 	bl	1a002d00 <Chip_Clock_GetDividerDivisor>
1a002ece:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002ed0:	4628      	mov	r0, r5
1a002ed2:	f7ff ff23 	bl	1a002d1c <Chip_Clock_GetClockInputHz>
1a002ed6:	3401      	adds	r4, #1
}
1a002ed8:	fbb0 f0f4 	udiv	r0, r0, r4
1a002edc:	bd38      	pop	{r3, r4, r5, pc}
1a002ede:	Address 0x000000001a002ede is out of bounds.


1a002ee0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002ee0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002ee2:	f100 0416 	add.w	r4, r0, #22
1a002ee6:	00a4      	lsls	r4, r4, #2
1a002ee8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a002eec:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a002ef0:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a002ef2:	281b      	cmp	r0, #27
1a002ef4:	d813      	bhi.n	1a002f1e <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a002ef6:	2911      	cmp	r1, #17
1a002ef8:	d01a      	beq.n	1a002f30 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002efa:	4d0e      	ldr	r5, [pc, #56]	; (1a002f34 <Chip_Clock_SetBaseClock+0x54>)
1a002efc:	4025      	ands	r5, r4

			if (autoblocken) {
1a002efe:	b10a      	cbz	r2, 1a002f04 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a002f00:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a002f04:	b10b      	cbz	r3, 1a002f0a <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a002f06:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002f0a:	ea45 6101 	orr.w	r1, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002f0e:	3016      	adds	r0, #22
1a002f10:	0080      	lsls	r0, r0, #2
1a002f12:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002f16:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002f1a:	6041      	str	r1, [r0, #4]
1a002f1c:	e008      	b.n	1a002f30 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002f1e:	f044 0401 	orr.w	r4, r4, #1
1a002f22:	3016      	adds	r0, #22
1a002f24:	0080      	lsls	r0, r0, #2
1a002f26:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a002f2a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a002f2e:	6044      	str	r4, [r0, #4]
	}
}
1a002f30:	bc30      	pop	{r4, r5}
1a002f32:	4770      	bx	lr
1a002f34:	e0fff7fe 	.word	0xe0fff7fe

1a002f38 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002f38:	281b      	cmp	r0, #27
1a002f3a:	d80d      	bhi.n	1a002f58 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f3c:	f100 0316 	add.w	r3, r0, #22
1a002f40:	009b      	lsls	r3, r3, #2
1a002f42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a002f46:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a002f4a:	6858      	ldr	r0, [r3, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a002f4c:	f010 0f01 	tst.w	r0, #1
1a002f50:	d104      	bne.n	1a002f5c <Chip_Clock_GetBaseClock+0x24>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002f52:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002f56:	4770      	bx	lr
		return CLKINPUT_PD;
1a002f58:	2011      	movs	r0, #17
1a002f5a:	4770      	bx	lr
		return CLKINPUT_PD;
1a002f5c:	2011      	movs	r0, #17
}
1a002f5e:	4770      	bx	lr

1a002f60 <Chip_Clock_GetBaseClocktHz>:
{
1a002f60:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002f62:	f7ff ffe9 	bl	1a002f38 <Chip_Clock_GetBaseClock>
1a002f66:	f7ff fed9 	bl	1a002d1c <Chip_Clock_GetClockInputHz>
}
1a002f6a:	bd08      	pop	{r3, pc}

1a002f6c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002f6c:	b971      	cbnz	r1, 1a002f8c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a002f6e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a002f70:	b10a      	cbz	r2, 1a002f76 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a002f72:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002f76:	2b02      	cmp	r3, #2
1a002f78:	d00a      	beq.n	1a002f90 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002f7a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002f7e:	d30a      	bcc.n	1a002f96 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002f80:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002f84:	4b06      	ldr	r3, [pc, #24]	; (1a002fa0 <Chip_Clock_EnableOpts+0x34>)
1a002f86:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002f8a:	4770      	bx	lr
		reg |= (1 << 1);
1a002f8c:	2103      	movs	r1, #3
1a002f8e:	e7ef      	b.n	1a002f70 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002f90:	f041 0120 	orr.w	r1, r1, #32
1a002f94:	e7f1      	b.n	1a002f7a <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002f96:	3020      	adds	r0, #32
1a002f98:	4b02      	ldr	r3, [pc, #8]	; (1a002fa4 <Chip_Clock_EnableOpts+0x38>)
1a002f9a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002f9e:	4770      	bx	lr
1a002fa0:	40052000 	.word	0x40052000
1a002fa4:	40051000 	.word	0x40051000

1a002fa8 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002fa8:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002fac:	d309      	bcc.n	1a002fc2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002fae:	4a09      	ldr	r2, [pc, #36]	; (1a002fd4 <Chip_Clock_Enable+0x2c>)
1a002fb0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002fb4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002fb8:	f043 0301 	orr.w	r3, r3, #1
1a002fbc:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002fc0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002fc2:	4a05      	ldr	r2, [pc, #20]	; (1a002fd8 <Chip_Clock_Enable+0x30>)
1a002fc4:	3020      	adds	r0, #32
1a002fc6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002fca:	f043 0301 	orr.w	r3, r3, #1
1a002fce:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002fd2:	4770      	bx	lr
1a002fd4:	40052000 	.word	0x40052000
1a002fd8:	40051000 	.word	0x40051000

1a002fdc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002fdc:	b510      	push	{r4, lr}
1a002fde:	4603      	mov	r3, r0
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002fe0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002fe4:	d308      	bcc.n	1a002ff8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002fe6:	f5a0 7291 	sub.w	r2, r0, #290	; 0x122
1a002fea:	490d      	ldr	r1, [pc, #52]	; (1a003020 <Chip_Clock_GetRate+0x44>)
1a002fec:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002ff0:	f014 0001 	ands.w	r0, r4, #1
1a002ff4:	d106      	bne.n	1a003004 <Chip_Clock_GetRate+0x28>
	else {
		rate = 0;
	}

	return rate;
}
1a002ff6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002ff8:	f100 0220 	add.w	r2, r0, #32
1a002ffc:	4909      	ldr	r1, [pc, #36]	; (1a003024 <Chip_Clock_GetRate+0x48>)
1a002ffe:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a003002:	e7f5      	b.n	1a002ff0 <Chip_Clock_GetRate+0x14>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003004:	4618      	mov	r0, r3
1a003006:	f7ff fe23 	bl	1a002c50 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00300a:	f7ff ffa9 	bl	1a002f60 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00300e:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003012:	d103      	bne.n	1a00301c <Chip_Clock_GetRate+0x40>
			div = 1;
1a003014:	2301      	movs	r3, #1
		rate = rate / div;
1a003016:	fbb0 f0f3 	udiv	r0, r0, r3
	return rate;
1a00301a:	e7ec      	b.n	1a002ff6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00301c:	2302      	movs	r3, #2
1a00301e:	e7fa      	b.n	1a003016 <Chip_Clock_GetRate+0x3a>
1a003020:	40052000 	.word	0x40052000
1a003024:	40051000 	.word	0x40051000

1a003028 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003028:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00302a:	2069      	movs	r0, #105	; 0x69
1a00302c:	f7ff ffd6 	bl	1a002fdc <Chip_Clock_GetRate>
1a003030:	4b01      	ldr	r3, [pc, #4]	; (1a003038 <SystemCoreClockUpdate+0x10>)
1a003032:	6018      	str	r0, [r3, #0]
}
1a003034:	bd08      	pop	{r3, pc}
1a003036:	bf00      	nop
1a003038:	10002c04 	.word	0x10002c04

1a00303c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00303c:	b570      	push	{r4, r5, r6, lr}
1a00303e:	b08a      	sub	sp, #40	; 0x28
1a003040:	4605      	mov	r5, r0
1a003042:	460e      	mov	r6, r1
1a003044:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003046:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00304a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00304c:	2806      	cmp	r0, #6
1a00304e:	d018      	beq.n	1a003082 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003050:	2300      	movs	r3, #0
1a003052:	2201      	movs	r2, #1
1a003054:	4629      	mov	r1, r5
1a003056:	2004      	movs	r0, #4
1a003058:	f7ff ff42 	bl	1a002ee0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00305c:	4a4a      	ldr	r2, [pc, #296]	; (1a003188 <Chip_SetupCoreClock+0x14c>)
1a00305e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003060:	f043 0301 	orr.w	r3, r3, #1
1a003064:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003066:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00306a:	a901      	add	r1, sp, #4
1a00306c:	4630      	mov	r0, r6
1a00306e:	f7ff feb1 	bl	1a002dd4 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003072:	4b46      	ldr	r3, [pc, #280]	; (1a00318c <Chip_SetupCoreClock+0x150>)
1a003074:	429e      	cmp	r6, r3
1a003076:	d916      	bls.n	1a0030a6 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003078:	9b01      	ldr	r3, [sp, #4]
1a00307a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00307e:	d003      	beq.n	1a003088 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a003080:	e7fe      	b.n	1a003080 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003082:	f7ff fe09 	bl	1a002c98 <Chip_Clock_EnableCrystal>
1a003086:	e7e3      	b.n	1a003050 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a003088:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00308c:	d005      	beq.n	1a00309a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00308e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003092:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003094:	2500      	movs	r5, #0
			direct = 1;
1a003096:	2601      	movs	r6, #1
1a003098:	e007      	b.n	1a0030aa <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00309a:	9b04      	ldr	r3, [sp, #16]
1a00309c:	3301      	adds	r3, #1
1a00309e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0030a0:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0030a2:	2600      	movs	r6, #0
1a0030a4:	e001      	b.n	1a0030aa <Chip_SetupCoreClock+0x6e>
1a0030a6:	2500      	movs	r5, #0
1a0030a8:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0030aa:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0030ae:	9b01      	ldr	r3, [sp, #4]
1a0030b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0030b4:	9a05      	ldr	r2, [sp, #20]
1a0030b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0030ba:	9a03      	ldr	r2, [sp, #12]
1a0030bc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0030c0:	9a04      	ldr	r2, [sp, #16]
1a0030c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0030c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0030ca:	4a2f      	ldr	r2, [pc, #188]	; (1a003188 <Chip_SetupCoreClock+0x14c>)
1a0030cc:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0030ce:	4b2e      	ldr	r3, [pc, #184]	; (1a003188 <Chip_SetupCoreClock+0x14c>)
1a0030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0030d2:	f013 0f01 	tst.w	r3, #1
1a0030d6:	d0fa      	beq.n	1a0030ce <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0030d8:	2300      	movs	r3, #0
1a0030da:	2201      	movs	r2, #1
1a0030dc:	2109      	movs	r1, #9
1a0030de:	2004      	movs	r0, #4
1a0030e0:	f7ff fefe 	bl	1a002ee0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0030e4:	b306      	cbz	r6, 1a003128 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0030e6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0030ea:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0030ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0030ee:	1e5a      	subs	r2, r3, #1
1a0030f0:	9209      	str	r2, [sp, #36]	; 0x24
1a0030f2:	2b00      	cmp	r3, #0
1a0030f4:	d1fa      	bne.n	1a0030ec <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0030f6:	9b01      	ldr	r3, [sp, #4]
1a0030f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0030fc:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0030fe:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003102:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003106:	9a05      	ldr	r2, [sp, #20]
1a003108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00310c:	9a03      	ldr	r2, [sp, #12]
1a00310e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003112:	9a04      	ldr	r2, [sp, #16]
1a003114:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003118:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00311c:	4a1a      	ldr	r2, [pc, #104]	; (1a003188 <Chip_SetupCoreClock+0x14c>)
1a00311e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003120:	2c00      	cmp	r4, #0
1a003122:	d12e      	bne.n	1a003182 <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003124:	b00a      	add	sp, #40	; 0x28
1a003126:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a003128:	2d00      	cmp	r5, #0
1a00312a:	d0f9      	beq.n	1a003120 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00312c:	f24c 3350 	movw	r3, #50000	; 0xc350
1a003130:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003132:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003134:	1e5a      	subs	r2, r3, #1
1a003136:	9209      	str	r2, [sp, #36]	; 0x24
1a003138:	2b00      	cmp	r3, #0
1a00313a:	d1fa      	bne.n	1a003132 <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a00313c:	9b04      	ldr	r3, [sp, #16]
1a00313e:	1e5a      	subs	r2, r3, #1
1a003140:	9204      	str	r2, [sp, #16]
1a003142:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003146:	9b01      	ldr	r3, [sp, #4]
1a003148:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00314c:	9905      	ldr	r1, [sp, #20]
1a00314e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003152:	9903      	ldr	r1, [sp, #12]
1a003154:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003158:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00315c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a003160:	4a09      	ldr	r2, [pc, #36]	; (1a003188 <Chip_SetupCoreClock+0x14c>)
1a003162:	6453      	str	r3, [r2, #68]	; 0x44
}
1a003164:	e7dc      	b.n	1a003120 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003166:	480a      	ldr	r0, [pc, #40]	; (1a003190 <Chip_SetupCoreClock+0x154>)
1a003168:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00316c:	78cb      	ldrb	r3, [r1, #3]
1a00316e:	788a      	ldrb	r2, [r1, #2]
1a003170:	7849      	ldrb	r1, [r1, #1]
1a003172:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003176:	f7ff feb3 	bl	1a002ee0 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00317a:	3401      	adds	r4, #1
1a00317c:	2c11      	cmp	r4, #17
1a00317e:	d9f2      	bls.n	1a003166 <Chip_SetupCoreClock+0x12a>
1a003180:	e7d0      	b.n	1a003124 <Chip_SetupCoreClock+0xe8>
1a003182:	2400      	movs	r4, #0
1a003184:	e7fa      	b.n	1a00317c <Chip_SetupCoreClock+0x140>
1a003186:	bf00      	nop
1a003188:	40050000 	.word	0x40050000
1a00318c:	068e7780 	.word	0x068e7780
1a003190:	1a005064 	.word	0x1a005064

1a003194 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003194:	4770      	bx	lr
1a003196:	Address 0x000000001a003196 is out of bounds.


1a003198 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003198:	4b03      	ldr	r3, [pc, #12]	; (1a0031a8 <Chip_SSP_GetClockIndex+0x10>)
1a00319a:	4298      	cmp	r0, r3
1a00319c:	d001      	beq.n	1a0031a2 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00319e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0031a0:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0031a2:	20a5      	movs	r0, #165	; 0xa5
1a0031a4:	4770      	bx	lr
1a0031a6:	bf00      	nop
1a0031a8:	400c5000 	.word	0x400c5000

1a0031ac <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0031ac:	4b04      	ldr	r3, [pc, #16]	; (1a0031c0 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0031ae:	4298      	cmp	r0, r3
1a0031b0:	d002      	beq.n	1a0031b8 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0031b2:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0031b6:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0031b8:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0031bc:	4770      	bx	lr
1a0031be:	bf00      	nop
1a0031c0:	400c5000 	.word	0x400c5000

1a0031c4 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0031c4:	6803      	ldr	r3, [r0, #0]
1a0031c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0031ca:	0209      	lsls	r1, r1, #8
1a0031cc:	b289      	uxth	r1, r1
1a0031ce:	4319      	orrs	r1, r3
1a0031d0:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0031d2:	6102      	str	r2, [r0, #16]
}
1a0031d4:	4770      	bx	lr

1a0031d6 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0031d6:	b570      	push	{r4, r5, r6, lr}
1a0031d8:	4606      	mov	r6, r0
1a0031da:	460c      	mov	r4, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0031dc:	f7ff ffe6 	bl	1a0031ac <Chip_SSP_GetPeriphClockIndex>
1a0031e0:	f7ff fefc 	bl	1a002fdc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0031e4:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0031e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0031ea:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0031ec:	e000      	b.n	1a0031f0 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0031ee:	4629      	mov	r1, r5
	while (cmp_clk > bitRate) {
1a0031f0:	42a3      	cmp	r3, r4
1a0031f2:	d90b      	bls.n	1a00320c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0031f4:	1c4d      	adds	r5, r1, #1
1a0031f6:	fb01 2302 	mla	r3, r1, r2, r2
1a0031fa:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0031fe:	429c      	cmp	r4, r3
1a003200:	d2f6      	bcs.n	1a0031f0 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003202:	2dff      	cmp	r5, #255	; 0xff
1a003204:	d9f3      	bls.n	1a0031ee <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003206:	3202      	adds	r2, #2
				cr0_div = 0;
1a003208:	2100      	movs	r1, #0
1a00320a:	e7f1      	b.n	1a0031f0 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00320c:	4630      	mov	r0, r6
1a00320e:	f7ff ffd9 	bl	1a0031c4 <Chip_SSP_SetClockRate>
}
1a003212:	bd70      	pop	{r4, r5, r6, pc}

1a003214 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003214:	b510      	push	{r4, lr}
1a003216:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003218:	f7ff ffbe 	bl	1a003198 <Chip_SSP_GetClockIndex>
1a00321c:	f7ff fec4 	bl	1a002fa8 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003220:	4620      	mov	r0, r4
1a003222:	f7ff ffc3 	bl	1a0031ac <Chip_SSP_GetPeriphClockIndex>
1a003226:	f7ff febf 	bl	1a002fa8 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00322a:	6863      	ldr	r3, [r4, #4]
1a00322c:	f023 0304 	bic.w	r3, r3, #4
1a003230:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003232:	6823      	ldr	r3, [r4, #0]
1a003234:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003238:	f043 0307 	orr.w	r3, r3, #7
1a00323c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00323e:	4902      	ldr	r1, [pc, #8]	; (1a003248 <Chip_SSP_Init+0x34>)
1a003240:	4620      	mov	r0, r4
1a003242:	f7ff ffc8 	bl	1a0031d6 <Chip_SSP_SetBitRate>
}
1a003246:	bd10      	pop	{r4, pc}
1a003248:	000186a0 	.word	0x000186a0

1a00324c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00324c:	b508      	push	{r3, lr}
   extern void * const g_pfnVectors[];
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00324e:	4a0b      	ldr	r2, [pc, #44]	; (1a00327c <SystemInit+0x30>)
1a003250:	4b0b      	ldr	r3, [pc, #44]	; (1a003280 <SystemInit+0x34>)
1a003252:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003254:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003258:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00325a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00325e:	2b20      	cmp	r3, #32
1a003260:	d004      	beq.n	1a00326c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003262:	f7ff fac5 	bl	1a0027f0 <Board_SystemInit>
   Board_Init();
1a003266:	f7ff fa4b 	bl	1a002700 <Board_Init>
}
1a00326a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00326c:	4a04      	ldr	r2, [pc, #16]	; (1a003280 <SystemInit+0x34>)
1a00326e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003272:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003276:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00327a:	e7f2      	b.n	1a003262 <SystemInit+0x16>
1a00327c:	1a000000 	.word	0x1a000000
1a003280:	e000ed00 	.word	0xe000ed00

1a003284 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003284:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003286:	4b04      	ldr	r3, [pc, #16]	; (1a003298 <USB0_IRQHandler+0x14>)
1a003288:	681b      	ldr	r3, [r3, #0]
1a00328a:	681b      	ldr	r3, [r3, #0]
1a00328c:	68db      	ldr	r3, [r3, #12]
1a00328e:	4a03      	ldr	r2, [pc, #12]	; (1a00329c <USB0_IRQHandler+0x18>)
1a003290:	6810      	ldr	r0, [r2, #0]
1a003292:	4798      	blx	r3
}
1a003294:	bd08      	pop	{r3, pc}
1a003296:	bf00      	nop
1a003298:	10002c08 	.word	0x10002c08
1a00329c:	10002bb4 	.word	0x10002bb4

1a0032a0 <__aeabi_uldivmod>:
1a0032a0:	b953      	cbnz	r3, 1a0032b8 <__aeabi_uldivmod+0x18>
1a0032a2:	b94a      	cbnz	r2, 1a0032b8 <__aeabi_uldivmod+0x18>
1a0032a4:	2900      	cmp	r1, #0
1a0032a6:	bf08      	it	eq
1a0032a8:	2800      	cmpeq	r0, #0
1a0032aa:	bf1c      	itt	ne
1a0032ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0032b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0032b4:	f000 b96e 	b.w	1a003594 <__aeabi_idiv0>
1a0032b8:	f1ad 0c08 	sub.w	ip, sp, #8
1a0032bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0032c0:	f000 f806 	bl	1a0032d0 <__udivmoddi4>
1a0032c4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0032c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0032cc:	b004      	add	sp, #16
1a0032ce:	4770      	bx	lr

1a0032d0 <__udivmoddi4>:
1a0032d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0032d4:	9d08      	ldr	r5, [sp, #32]
1a0032d6:	4604      	mov	r4, r0
1a0032d8:	468c      	mov	ip, r1
1a0032da:	2b00      	cmp	r3, #0
1a0032dc:	f040 8083 	bne.w	1a0033e6 <__udivmoddi4+0x116>
1a0032e0:	428a      	cmp	r2, r1
1a0032e2:	4617      	mov	r7, r2
1a0032e4:	d947      	bls.n	1a003376 <__udivmoddi4+0xa6>
1a0032e6:	fab2 f282 	clz	r2, r2
1a0032ea:	b142      	cbz	r2, 1a0032fe <__udivmoddi4+0x2e>
1a0032ec:	f1c2 0020 	rsb	r0, r2, #32
1a0032f0:	fa24 f000 	lsr.w	r0, r4, r0
1a0032f4:	4091      	lsls	r1, r2
1a0032f6:	4097      	lsls	r7, r2
1a0032f8:	ea40 0c01 	orr.w	ip, r0, r1
1a0032fc:	4094      	lsls	r4, r2
1a0032fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
1a003302:	0c23      	lsrs	r3, r4, #16
1a003304:	fbbc f6f8 	udiv	r6, ip, r8
1a003308:	fa1f fe87 	uxth.w	lr, r7
1a00330c:	fb08 c116 	mls	r1, r8, r6, ip
1a003310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003314:	fb06 f10e 	mul.w	r1, r6, lr
1a003318:	4299      	cmp	r1, r3
1a00331a:	d909      	bls.n	1a003330 <__udivmoddi4+0x60>
1a00331c:	18fb      	adds	r3, r7, r3
1a00331e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
1a003322:	f080 8119 	bcs.w	1a003558 <__udivmoddi4+0x288>
1a003326:	4299      	cmp	r1, r3
1a003328:	f240 8116 	bls.w	1a003558 <__udivmoddi4+0x288>
1a00332c:	3e02      	subs	r6, #2
1a00332e:	443b      	add	r3, r7
1a003330:	1a5b      	subs	r3, r3, r1
1a003332:	b2a4      	uxth	r4, r4
1a003334:	fbb3 f0f8 	udiv	r0, r3, r8
1a003338:	fb08 3310 	mls	r3, r8, r0, r3
1a00333c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a003340:	fb00 fe0e 	mul.w	lr, r0, lr
1a003344:	45a6      	cmp	lr, r4
1a003346:	d909      	bls.n	1a00335c <__udivmoddi4+0x8c>
1a003348:	193c      	adds	r4, r7, r4
1a00334a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00334e:	f080 8105 	bcs.w	1a00355c <__udivmoddi4+0x28c>
1a003352:	45a6      	cmp	lr, r4
1a003354:	f240 8102 	bls.w	1a00355c <__udivmoddi4+0x28c>
1a003358:	3802      	subs	r0, #2
1a00335a:	443c      	add	r4, r7
1a00335c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
1a003360:	eba4 040e 	sub.w	r4, r4, lr
1a003364:	2600      	movs	r6, #0
1a003366:	b11d      	cbz	r5, 1a003370 <__udivmoddi4+0xa0>
1a003368:	40d4      	lsrs	r4, r2
1a00336a:	2300      	movs	r3, #0
1a00336c:	e9c5 4300 	strd	r4, r3, [r5]
1a003370:	4631      	mov	r1, r6
1a003372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003376:	b902      	cbnz	r2, 1a00337a <__udivmoddi4+0xaa>
1a003378:	deff      	udf	#255	; 0xff
1a00337a:	fab2 f282 	clz	r2, r2
1a00337e:	2a00      	cmp	r2, #0
1a003380:	d150      	bne.n	1a003424 <__udivmoddi4+0x154>
1a003382:	1bcb      	subs	r3, r1, r7
1a003384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
1a003388:	fa1f f887 	uxth.w	r8, r7
1a00338c:	2601      	movs	r6, #1
1a00338e:	fbb3 fcfe 	udiv	ip, r3, lr
1a003392:	0c21      	lsrs	r1, r4, #16
1a003394:	fb0e 331c 	mls	r3, lr, ip, r3
1a003398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00339c:	fb08 f30c 	mul.w	r3, r8, ip
1a0033a0:	428b      	cmp	r3, r1
1a0033a2:	d907      	bls.n	1a0033b4 <__udivmoddi4+0xe4>
1a0033a4:	1879      	adds	r1, r7, r1
1a0033a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a0033aa:	d202      	bcs.n	1a0033b2 <__udivmoddi4+0xe2>
1a0033ac:	428b      	cmp	r3, r1
1a0033ae:	f200 80e9 	bhi.w	1a003584 <__udivmoddi4+0x2b4>
1a0033b2:	4684      	mov	ip, r0
1a0033b4:	1ac9      	subs	r1, r1, r3
1a0033b6:	b2a3      	uxth	r3, r4
1a0033b8:	fbb1 f0fe 	udiv	r0, r1, lr
1a0033bc:	fb0e 1110 	mls	r1, lr, r0, r1
1a0033c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
1a0033c4:	fb08 f800 	mul.w	r8, r8, r0
1a0033c8:	45a0      	cmp	r8, r4
1a0033ca:	d907      	bls.n	1a0033dc <__udivmoddi4+0x10c>
1a0033cc:	193c      	adds	r4, r7, r4
1a0033ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0033d2:	d202      	bcs.n	1a0033da <__udivmoddi4+0x10a>
1a0033d4:	45a0      	cmp	r8, r4
1a0033d6:	f200 80d9 	bhi.w	1a00358c <__udivmoddi4+0x2bc>
1a0033da:	4618      	mov	r0, r3
1a0033dc:	eba4 0408 	sub.w	r4, r4, r8
1a0033e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0033e4:	e7bf      	b.n	1a003366 <__udivmoddi4+0x96>
1a0033e6:	428b      	cmp	r3, r1
1a0033e8:	d909      	bls.n	1a0033fe <__udivmoddi4+0x12e>
1a0033ea:	2d00      	cmp	r5, #0
1a0033ec:	f000 80b1 	beq.w	1a003552 <__udivmoddi4+0x282>
1a0033f0:	2600      	movs	r6, #0
1a0033f2:	e9c5 0100 	strd	r0, r1, [r5]
1a0033f6:	4630      	mov	r0, r6
1a0033f8:	4631      	mov	r1, r6
1a0033fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0033fe:	fab3 f683 	clz	r6, r3
1a003402:	2e00      	cmp	r6, #0
1a003404:	d14a      	bne.n	1a00349c <__udivmoddi4+0x1cc>
1a003406:	428b      	cmp	r3, r1
1a003408:	d302      	bcc.n	1a003410 <__udivmoddi4+0x140>
1a00340a:	4282      	cmp	r2, r0
1a00340c:	f200 80b8 	bhi.w	1a003580 <__udivmoddi4+0x2b0>
1a003410:	1a84      	subs	r4, r0, r2
1a003412:	eb61 0103 	sbc.w	r1, r1, r3
1a003416:	2001      	movs	r0, #1
1a003418:	468c      	mov	ip, r1
1a00341a:	2d00      	cmp	r5, #0
1a00341c:	d0a8      	beq.n	1a003370 <__udivmoddi4+0xa0>
1a00341e:	e9c5 4c00 	strd	r4, ip, [r5]
1a003422:	e7a5      	b.n	1a003370 <__udivmoddi4+0xa0>
1a003424:	f1c2 0320 	rsb	r3, r2, #32
1a003428:	fa20 f603 	lsr.w	r6, r0, r3
1a00342c:	4097      	lsls	r7, r2
1a00342e:	fa01 f002 	lsl.w	r0, r1, r2
1a003432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
1a003436:	40d9      	lsrs	r1, r3
1a003438:	4330      	orrs	r0, r6
1a00343a:	0c03      	lsrs	r3, r0, #16
1a00343c:	fbb1 f6fe 	udiv	r6, r1, lr
1a003440:	fa1f f887 	uxth.w	r8, r7
1a003444:	fb0e 1116 	mls	r1, lr, r6, r1
1a003448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00344c:	fb06 f108 	mul.w	r1, r6, r8
1a003450:	4299      	cmp	r1, r3
1a003452:	fa04 f402 	lsl.w	r4, r4, r2
1a003456:	d909      	bls.n	1a00346c <__udivmoddi4+0x19c>
1a003458:	18fb      	adds	r3, r7, r3
1a00345a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
1a00345e:	f080 808d 	bcs.w	1a00357c <__udivmoddi4+0x2ac>
1a003462:	4299      	cmp	r1, r3
1a003464:	f240 808a 	bls.w	1a00357c <__udivmoddi4+0x2ac>
1a003468:	3e02      	subs	r6, #2
1a00346a:	443b      	add	r3, r7
1a00346c:	1a5b      	subs	r3, r3, r1
1a00346e:	b281      	uxth	r1, r0
1a003470:	fbb3 f0fe 	udiv	r0, r3, lr
1a003474:	fb0e 3310 	mls	r3, lr, r0, r3
1a003478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00347c:	fb00 f308 	mul.w	r3, r0, r8
1a003480:	428b      	cmp	r3, r1
1a003482:	d907      	bls.n	1a003494 <__udivmoddi4+0x1c4>
1a003484:	1879      	adds	r1, r7, r1
1a003486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00348a:	d273      	bcs.n	1a003574 <__udivmoddi4+0x2a4>
1a00348c:	428b      	cmp	r3, r1
1a00348e:	d971      	bls.n	1a003574 <__udivmoddi4+0x2a4>
1a003490:	3802      	subs	r0, #2
1a003492:	4439      	add	r1, r7
1a003494:	1acb      	subs	r3, r1, r3
1a003496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a00349a:	e778      	b.n	1a00338e <__udivmoddi4+0xbe>
1a00349c:	f1c6 0c20 	rsb	ip, r6, #32
1a0034a0:	fa03 f406 	lsl.w	r4, r3, r6
1a0034a4:	fa22 f30c 	lsr.w	r3, r2, ip
1a0034a8:	431c      	orrs	r4, r3
1a0034aa:	fa20 f70c 	lsr.w	r7, r0, ip
1a0034ae:	fa01 f306 	lsl.w	r3, r1, r6
1a0034b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
1a0034b6:	fa21 f10c 	lsr.w	r1, r1, ip
1a0034ba:	431f      	orrs	r7, r3
1a0034bc:	0c3b      	lsrs	r3, r7, #16
1a0034be:	fbb1 f9fe 	udiv	r9, r1, lr
1a0034c2:	fa1f f884 	uxth.w	r8, r4
1a0034c6:	fb0e 1119 	mls	r1, lr, r9, r1
1a0034ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a0034ce:	fb09 fa08 	mul.w	sl, r9, r8
1a0034d2:	458a      	cmp	sl, r1
1a0034d4:	fa02 f206 	lsl.w	r2, r2, r6
1a0034d8:	fa00 f306 	lsl.w	r3, r0, r6
1a0034dc:	d908      	bls.n	1a0034f0 <__udivmoddi4+0x220>
1a0034de:	1861      	adds	r1, r4, r1
1a0034e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0034e4:	d248      	bcs.n	1a003578 <__udivmoddi4+0x2a8>
1a0034e6:	458a      	cmp	sl, r1
1a0034e8:	d946      	bls.n	1a003578 <__udivmoddi4+0x2a8>
1a0034ea:	f1a9 0902 	sub.w	r9, r9, #2
1a0034ee:	4421      	add	r1, r4
1a0034f0:	eba1 010a 	sub.w	r1, r1, sl
1a0034f4:	b2bf      	uxth	r7, r7
1a0034f6:	fbb1 f0fe 	udiv	r0, r1, lr
1a0034fa:	fb0e 1110 	mls	r1, lr, r0, r1
1a0034fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
1a003502:	fb00 f808 	mul.w	r8, r0, r8
1a003506:	45b8      	cmp	r8, r7
1a003508:	d907      	bls.n	1a00351a <__udivmoddi4+0x24a>
1a00350a:	19e7      	adds	r7, r4, r7
1a00350c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
1a003510:	d22e      	bcs.n	1a003570 <__udivmoddi4+0x2a0>
1a003512:	45b8      	cmp	r8, r7
1a003514:	d92c      	bls.n	1a003570 <__udivmoddi4+0x2a0>
1a003516:	3802      	subs	r0, #2
1a003518:	4427      	add	r7, r4
1a00351a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00351e:	eba7 0708 	sub.w	r7, r7, r8
1a003522:	fba0 8902 	umull	r8, r9, r0, r2
1a003526:	454f      	cmp	r7, r9
1a003528:	46c6      	mov	lr, r8
1a00352a:	4649      	mov	r1, r9
1a00352c:	d31a      	bcc.n	1a003564 <__udivmoddi4+0x294>
1a00352e:	d017      	beq.n	1a003560 <__udivmoddi4+0x290>
1a003530:	b15d      	cbz	r5, 1a00354a <__udivmoddi4+0x27a>
1a003532:	ebb3 020e 	subs.w	r2, r3, lr
1a003536:	eb67 0701 	sbc.w	r7, r7, r1
1a00353a:	fa07 fc0c 	lsl.w	ip, r7, ip
1a00353e:	40f2      	lsrs	r2, r6
1a003540:	ea4c 0202 	orr.w	r2, ip, r2
1a003544:	40f7      	lsrs	r7, r6
1a003546:	e9c5 2700 	strd	r2, r7, [r5]
1a00354a:	2600      	movs	r6, #0
1a00354c:	4631      	mov	r1, r6
1a00354e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003552:	462e      	mov	r6, r5
1a003554:	4628      	mov	r0, r5
1a003556:	e70b      	b.n	1a003370 <__udivmoddi4+0xa0>
1a003558:	4606      	mov	r6, r0
1a00355a:	e6e9      	b.n	1a003330 <__udivmoddi4+0x60>
1a00355c:	4618      	mov	r0, r3
1a00355e:	e6fd      	b.n	1a00335c <__udivmoddi4+0x8c>
1a003560:	4543      	cmp	r3, r8
1a003562:	d2e5      	bcs.n	1a003530 <__udivmoddi4+0x260>
1a003564:	ebb8 0e02 	subs.w	lr, r8, r2
1a003568:	eb69 0104 	sbc.w	r1, r9, r4
1a00356c:	3801      	subs	r0, #1
1a00356e:	e7df      	b.n	1a003530 <__udivmoddi4+0x260>
1a003570:	4608      	mov	r0, r1
1a003572:	e7d2      	b.n	1a00351a <__udivmoddi4+0x24a>
1a003574:	4660      	mov	r0, ip
1a003576:	e78d      	b.n	1a003494 <__udivmoddi4+0x1c4>
1a003578:	4681      	mov	r9, r0
1a00357a:	e7b9      	b.n	1a0034f0 <__udivmoddi4+0x220>
1a00357c:	4666      	mov	r6, ip
1a00357e:	e775      	b.n	1a00346c <__udivmoddi4+0x19c>
1a003580:	4630      	mov	r0, r6
1a003582:	e74a      	b.n	1a00341a <__udivmoddi4+0x14a>
1a003584:	f1ac 0c02 	sub.w	ip, ip, #2
1a003588:	4439      	add	r1, r7
1a00358a:	e713      	b.n	1a0033b4 <__udivmoddi4+0xe4>
1a00358c:	3802      	subs	r0, #2
1a00358e:	443c      	add	r4, r7
1a003590:	e724      	b.n	1a0033dc <__udivmoddi4+0x10c>
1a003592:	bf00      	nop

1a003594 <__aeabi_idiv0>:
1a003594:	4770      	bx	lr
1a003596:	bf00      	nop

1a003598 <__sflush_r>:
1a003598:	898b      	ldrh	r3, [r1, #12]
1a00359a:	071a      	lsls	r2, r3, #28
1a00359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0035a0:	460c      	mov	r4, r1
1a0035a2:	4680      	mov	r8, r0
1a0035a4:	d441      	bmi.n	1a00362a <__sflush_r+0x92>
1a0035a6:	684a      	ldr	r2, [r1, #4]
1a0035a8:	2a00      	cmp	r2, #0
1a0035aa:	dd59      	ble.n	1a003660 <__sflush_r+0xc8>
1a0035ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0035ae:	2e00      	cmp	r6, #0
1a0035b0:	d053      	beq.n	1a00365a <__sflush_r+0xc2>
1a0035b2:	2200      	movs	r2, #0
1a0035b4:	f8d8 5000 	ldr.w	r5, [r8]
1a0035b8:	6a21      	ldr	r1, [r4, #32]
1a0035ba:	f8c8 2000 	str.w	r2, [r8]
1a0035be:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a0035c2:	d151      	bne.n	1a003668 <__sflush_r+0xd0>
1a0035c4:	2301      	movs	r3, #1
1a0035c6:	4640      	mov	r0, r8
1a0035c8:	47b0      	blx	r6
1a0035ca:	1c43      	adds	r3, r0, #1
1a0035cc:	d05f      	beq.n	1a00368e <__sflush_r+0xf6>
1a0035ce:	89a3      	ldrh	r3, [r4, #12]
1a0035d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0035d2:	6a21      	ldr	r1, [r4, #32]
1a0035d4:	075f      	lsls	r7, r3, #29
1a0035d6:	d505      	bpl.n	1a0035e4 <__sflush_r+0x4c>
1a0035d8:	6862      	ldr	r2, [r4, #4]
1a0035da:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0035dc:	1a80      	subs	r0, r0, r2
1a0035de:	b10b      	cbz	r3, 1a0035e4 <__sflush_r+0x4c>
1a0035e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0035e2:	1ac0      	subs	r0, r0, r3
1a0035e4:	4602      	mov	r2, r0
1a0035e6:	2300      	movs	r3, #0
1a0035e8:	4640      	mov	r0, r8
1a0035ea:	47b0      	blx	r6
1a0035ec:	1c46      	adds	r6, r0, #1
1a0035ee:	d145      	bne.n	1a00367c <__sflush_r+0xe4>
1a0035f0:	f8d8 3000 	ldr.w	r3, [r8]
1a0035f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0035f8:	2b00      	cmp	r3, #0
1a0035fa:	d055      	beq.n	1a0036a8 <__sflush_r+0x110>
1a0035fc:	2b1d      	cmp	r3, #29
1a0035fe:	d001      	beq.n	1a003604 <__sflush_r+0x6c>
1a003600:	2b16      	cmp	r3, #22
1a003602:	d15a      	bne.n	1a0036ba <__sflush_r+0x122>
1a003604:	6923      	ldr	r3, [r4, #16]
1a003606:	2200      	movs	r2, #0
1a003608:	e9c4 3200 	strd	r3, r2, [r4]
1a00360c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00360e:	f8c8 5000 	str.w	r5, [r8]
1a003612:	b311      	cbz	r1, 1a00365a <__sflush_r+0xc2>
1a003614:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a003618:	4299      	cmp	r1, r3
1a00361a:	d002      	beq.n	1a003622 <__sflush_r+0x8a>
1a00361c:	4640      	mov	r0, r8
1a00361e:	f000 faf9 	bl	1a003c14 <_free_r>
1a003622:	2000      	movs	r0, #0
1a003624:	6360      	str	r0, [r4, #52]	; 0x34
1a003626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00362a:	690e      	ldr	r6, [r1, #16]
1a00362c:	b1ae      	cbz	r6, 1a00365a <__sflush_r+0xc2>
1a00362e:	680d      	ldr	r5, [r1, #0]
1a003630:	600e      	str	r6, [r1, #0]
1a003632:	0799      	lsls	r1, r3, #30
1a003634:	bf0c      	ite	eq
1a003636:	6963      	ldreq	r3, [r4, #20]
1a003638:	2300      	movne	r3, #0
1a00363a:	1bad      	subs	r5, r5, r6
1a00363c:	60a3      	str	r3, [r4, #8]
1a00363e:	e00a      	b.n	1a003656 <__sflush_r+0xbe>
1a003640:	462b      	mov	r3, r5
1a003642:	4632      	mov	r2, r6
1a003644:	6aa7      	ldr	r7, [r4, #40]	; 0x28
1a003646:	6a21      	ldr	r1, [r4, #32]
1a003648:	4640      	mov	r0, r8
1a00364a:	47b8      	blx	r7
1a00364c:	2800      	cmp	r0, #0
1a00364e:	eba5 0500 	sub.w	r5, r5, r0
1a003652:	4406      	add	r6, r0
1a003654:	dd0a      	ble.n	1a00366c <__sflush_r+0xd4>
1a003656:	2d00      	cmp	r5, #0
1a003658:	dcf2      	bgt.n	1a003640 <__sflush_r+0xa8>
1a00365a:	2000      	movs	r0, #0
1a00365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003660:	6c0a      	ldr	r2, [r1, #64]	; 0x40
1a003662:	2a00      	cmp	r2, #0
1a003664:	dca2      	bgt.n	1a0035ac <__sflush_r+0x14>
1a003666:	e7f8      	b.n	1a00365a <__sflush_r+0xc2>
1a003668:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a00366a:	e7b3      	b.n	1a0035d4 <__sflush_r+0x3c>
1a00366c:	89a3      	ldrh	r3, [r4, #12]
1a00366e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003672:	81a3      	strh	r3, [r4, #12]
1a003674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00367c:	6922      	ldr	r2, [r4, #16]
1a00367e:	89a3      	ldrh	r3, [r4, #12]
1a003680:	6022      	str	r2, [r4, #0]
1a003682:	2200      	movs	r2, #0
1a003684:	6062      	str	r2, [r4, #4]
1a003686:	04da      	lsls	r2, r3, #19
1a003688:	d5c0      	bpl.n	1a00360c <__sflush_r+0x74>
1a00368a:	6560      	str	r0, [r4, #84]	; 0x54
1a00368c:	e7be      	b.n	1a00360c <__sflush_r+0x74>
1a00368e:	f8d8 3000 	ldr.w	r3, [r8]
1a003692:	2b00      	cmp	r3, #0
1a003694:	d09b      	beq.n	1a0035ce <__sflush_r+0x36>
1a003696:	2b1d      	cmp	r3, #29
1a003698:	d00c      	beq.n	1a0036b4 <__sflush_r+0x11c>
1a00369a:	2b16      	cmp	r3, #22
1a00369c:	d00a      	beq.n	1a0036b4 <__sflush_r+0x11c>
1a00369e:	89a3      	ldrh	r3, [r4, #12]
1a0036a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0036a4:	81a3      	strh	r3, [r4, #12]
1a0036a6:	e7d9      	b.n	1a00365c <__sflush_r+0xc4>
1a0036a8:	6921      	ldr	r1, [r4, #16]
1a0036aa:	e9c4 1300 	strd	r1, r3, [r4]
1a0036ae:	04d3      	lsls	r3, r2, #19
1a0036b0:	d5ac      	bpl.n	1a00360c <__sflush_r+0x74>
1a0036b2:	e7ea      	b.n	1a00368a <__sflush_r+0xf2>
1a0036b4:	f8c8 5000 	str.w	r5, [r8]
1a0036b8:	e7cf      	b.n	1a00365a <__sflush_r+0xc2>
1a0036ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a0036be:	81a2      	strh	r2, [r4, #12]
1a0036c0:	e7cc      	b.n	1a00365c <__sflush_r+0xc4>
1a0036c2:	bf00      	nop

1a0036c4 <_fflush_r>:
1a0036c4:	690b      	ldr	r3, [r1, #16]
1a0036c6:	b323      	cbz	r3, 1a003712 <_fflush_r+0x4e>
1a0036c8:	b510      	push	{r4, lr}
1a0036ca:	4604      	mov	r4, r0
1a0036cc:	b082      	sub	sp, #8
1a0036ce:	b108      	cbz	r0, 1a0036d4 <_fflush_r+0x10>
1a0036d0:	6983      	ldr	r3, [r0, #24]
1a0036d2:	b1bb      	cbz	r3, 1a003704 <_fflush_r+0x40>
1a0036d4:	4b10      	ldr	r3, [pc, #64]	; (1a003718 <_fflush_r+0x54>)
1a0036d6:	4299      	cmp	r1, r3
1a0036d8:	d012      	beq.n	1a003700 <_fflush_r+0x3c>
1a0036da:	4b10      	ldr	r3, [pc, #64]	; (1a00371c <_fflush_r+0x58>)
1a0036dc:	4299      	cmp	r1, r3
1a0036de:	d016      	beq.n	1a00370e <_fflush_r+0x4a>
1a0036e0:	4b0f      	ldr	r3, [pc, #60]	; (1a003720 <_fflush_r+0x5c>)
1a0036e2:	4299      	cmp	r1, r3
1a0036e4:	bf08      	it	eq
1a0036e6:	68e1      	ldreq	r1, [r4, #12]
1a0036e8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a0036ec:	b12b      	cbz	r3, 1a0036fa <_fflush_r+0x36>
1a0036ee:	4620      	mov	r0, r4
1a0036f0:	b002      	add	sp, #8
1a0036f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0036f6:	f7ff bf4f 	b.w	1a003598 <__sflush_r>
1a0036fa:	2000      	movs	r0, #0
1a0036fc:	b002      	add	sp, #8
1a0036fe:	bd10      	pop	{r4, pc}
1a003700:	6861      	ldr	r1, [r4, #4]
1a003702:	e7f1      	b.n	1a0036e8 <_fflush_r+0x24>
1a003704:	9101      	str	r1, [sp, #4]
1a003706:	f000 f907 	bl	1a003918 <__sinit>
1a00370a:	9901      	ldr	r1, [sp, #4]
1a00370c:	e7e2      	b.n	1a0036d4 <_fflush_r+0x10>
1a00370e:	68a1      	ldr	r1, [r4, #8]
1a003710:	e7ea      	b.n	1a0036e8 <_fflush_r+0x24>
1a003712:	2000      	movs	r0, #0
1a003714:	4770      	bx	lr
1a003716:	bf00      	nop
1a003718:	1a0050ec 	.word	0x1a0050ec
1a00371c:	1a0050cc 	.word	0x1a0050cc
1a003720:	1a0050ac 	.word	0x1a0050ac

1a003724 <fflush>:
1a003724:	b120      	cbz	r0, 1a003730 <fflush+0xc>
1a003726:	4b05      	ldr	r3, [pc, #20]	; (1a00373c <fflush+0x18>)
1a003728:	4601      	mov	r1, r0
1a00372a:	6818      	ldr	r0, [r3, #0]
1a00372c:	f7ff bfca 	b.w	1a0036c4 <_fflush_r>
1a003730:	4b03      	ldr	r3, [pc, #12]	; (1a003740 <fflush+0x1c>)
1a003732:	4904      	ldr	r1, [pc, #16]	; (1a003744 <fflush+0x20>)
1a003734:	6818      	ldr	r0, [r3, #0]
1a003736:	f000 b935 	b.w	1a0039a4 <_fwalk_reent>
1a00373a:	bf00      	nop
1a00373c:	1000003c 	.word	0x1000003c
1a003740:	1a00510c 	.word	0x1a00510c
1a003744:	1a0036c5 	.word	0x1a0036c5

1a003748 <__fp_lock>:
1a003748:	2000      	movs	r0, #0
1a00374a:	4770      	bx	lr

1a00374c <_cleanup_r>:
1a00374c:	4901      	ldr	r1, [pc, #4]	; (1a003754 <_cleanup_r+0x8>)
1a00374e:	f000 b929 	b.w	1a0039a4 <_fwalk_reent>
1a003752:	bf00      	nop
1a003754:	1a0036c5 	.word	0x1a0036c5

1a003758 <__fp_unlock>:
1a003758:	2000      	movs	r0, #0
1a00375a:	4770      	bx	lr

1a00375c <__sfmoreglue>:
1a00375c:	b570      	push	{r4, r5, r6, lr}
1a00375e:	1e4a      	subs	r2, r1, #1
1a003760:	2568      	movs	r5, #104	; 0x68
1a003762:	fb05 f502 	mul.w	r5, r5, r2
1a003766:	460e      	mov	r6, r1
1a003768:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00376c:	f000 faa8 	bl	1a003cc0 <_malloc_r>
1a003770:	4604      	mov	r4, r0
1a003772:	b140      	cbz	r0, 1a003786 <__sfmoreglue+0x2a>
1a003774:	2100      	movs	r1, #0
1a003776:	300c      	adds	r0, #12
1a003778:	6066      	str	r6, [r4, #4]
1a00377a:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a00377e:	6021      	str	r1, [r4, #0]
1a003780:	60a0      	str	r0, [r4, #8]
1a003782:	f000 f9f7 	bl	1a003b74 <memset>
1a003786:	4620      	mov	r0, r4
1a003788:	bd70      	pop	{r4, r5, r6, pc}
1a00378a:	bf00      	nop

1a00378c <__sfp>:
1a00378c:	4b1e      	ldr	r3, [pc, #120]	; (1a003808 <__sfp+0x7c>)
1a00378e:	b570      	push	{r4, r5, r6, lr}
1a003790:	681d      	ldr	r5, [r3, #0]
1a003792:	69ab      	ldr	r3, [r5, #24]
1a003794:	4606      	mov	r6, r0
1a003796:	b343      	cbz	r3, 1a0037ea <__sfp+0x5e>
1a003798:	3548      	adds	r5, #72	; 0x48
1a00379a:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
1a00379e:	3b01      	subs	r3, #1
1a0037a0:	d505      	bpl.n	1a0037ae <__sfp+0x22>
1a0037a2:	e01e      	b.n	1a0037e2 <__sfp+0x56>
1a0037a4:	3b01      	subs	r3, #1
1a0037a6:	1c5a      	adds	r2, r3, #1
1a0037a8:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a0037ac:	d019      	beq.n	1a0037e2 <__sfp+0x56>
1a0037ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0037b2:	2a00      	cmp	r2, #0
1a0037b4:	d1f6      	bne.n	1a0037a4 <__sfp+0x18>
1a0037b6:	2500      	movs	r5, #0
1a0037b8:	4b14      	ldr	r3, [pc, #80]	; (1a00380c <__sfp+0x80>)
1a0037ba:	6665      	str	r5, [r4, #100]	; 0x64
1a0037bc:	e9c4 5500 	strd	r5, r5, [r4]
1a0037c0:	60a5      	str	r5, [r4, #8]
1a0037c2:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a0037c6:	61a5      	str	r5, [r4, #24]
1a0037c8:	4629      	mov	r1, r5
1a0037ca:	60e3      	str	r3, [r4, #12]
1a0037cc:	2208      	movs	r2, #8
1a0037ce:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0037d2:	f000 f9cf 	bl	1a003b74 <memset>
1a0037d6:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a0037da:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a0037de:	4620      	mov	r0, r4
1a0037e0:	bd70      	pop	{r4, r5, r6, pc}
1a0037e2:	682c      	ldr	r4, [r5, #0]
1a0037e4:	b12c      	cbz	r4, 1a0037f2 <__sfp+0x66>
1a0037e6:	4625      	mov	r5, r4
1a0037e8:	e7d7      	b.n	1a00379a <__sfp+0xe>
1a0037ea:	4628      	mov	r0, r5
1a0037ec:	f000 f810 	bl	1a003810 <__sinit.part.0>
1a0037f0:	e7d2      	b.n	1a003798 <__sfp+0xc>
1a0037f2:	2104      	movs	r1, #4
1a0037f4:	4630      	mov	r0, r6
1a0037f6:	f7ff ffb1 	bl	1a00375c <__sfmoreglue>
1a0037fa:	4604      	mov	r4, r0
1a0037fc:	6028      	str	r0, [r5, #0]
1a0037fe:	2800      	cmp	r0, #0
1a003800:	d1f1      	bne.n	1a0037e6 <__sfp+0x5a>
1a003802:	230c      	movs	r3, #12
1a003804:	6033      	str	r3, [r6, #0]
1a003806:	e7ea      	b.n	1a0037de <__sfp+0x52>
1a003808:	1a00510c 	.word	0x1a00510c
1a00380c:	ffff0001 	.word	0xffff0001

1a003810 <__sinit.part.0>:
1a003810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003814:	4b33      	ldr	r3, [pc, #204]	; (1a0038e4 <__sinit.part.0+0xd4>)
1a003816:	4934      	ldr	r1, [pc, #208]	; (1a0038e8 <__sinit.part.0+0xd8>)
1a003818:	681a      	ldr	r2, [r3, #0]
1a00381a:	6281      	str	r1, [r0, #40]	; 0x28
1a00381c:	4290      	cmp	r0, r2
1a00381e:	f04f 0300 	mov.w	r3, #0
1a003822:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a003826:	6503      	str	r3, [r0, #80]	; 0x50
1a003828:	bf04      	itt	eq
1a00382a:	2301      	moveq	r3, #1
1a00382c:	6183      	streq	r3, [r0, #24]
1a00382e:	4605      	mov	r5, r0
1a003830:	f7ff ffac 	bl	1a00378c <__sfp>
1a003834:	6068      	str	r0, [r5, #4]
1a003836:	4628      	mov	r0, r5
1a003838:	f7ff ffa8 	bl	1a00378c <__sfp>
1a00383c:	60a8      	str	r0, [r5, #8]
1a00383e:	4628      	mov	r0, r5
1a003840:	f7ff ffa4 	bl	1a00378c <__sfp>
1a003844:	686e      	ldr	r6, [r5, #4]
1a003846:	60e8      	str	r0, [r5, #12]
1a003848:	2400      	movs	r4, #0
1a00384a:	2304      	movs	r3, #4
1a00384c:	60f3      	str	r3, [r6, #12]
1a00384e:	6674      	str	r4, [r6, #100]	; 0x64
1a003850:	e9c6 4400 	strd	r4, r4, [r6]
1a003854:	60b4      	str	r4, [r6, #8]
1a003856:	e9c6 4404 	strd	r4, r4, [r6, #16]
1a00385a:	61b4      	str	r4, [r6, #24]
1a00385c:	4621      	mov	r1, r4
1a00385e:	f106 005c 	add.w	r0, r6, #92	; 0x5c
1a003862:	2208      	movs	r2, #8
1a003864:	f000 f986 	bl	1a003b74 <memset>
1a003868:	f8df b088 	ldr.w	fp, [pc, #136]	; 1a0038f4 <__sinit.part.0+0xe4>
1a00386c:	68af      	ldr	r7, [r5, #8]
1a00386e:	f8df a088 	ldr.w	sl, [pc, #136]	; 1a0038f8 <__sinit.part.0+0xe8>
1a003872:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1a0038fc <__sinit.part.0+0xec>
1a003876:	f8df 8088 	ldr.w	r8, [pc, #136]	; 1a003900 <__sinit.part.0+0xf0>
1a00387a:	4b1c      	ldr	r3, [pc, #112]	; (1a0038ec <__sinit.part.0+0xdc>)
1a00387c:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
1a003880:	e9c6 6b08 	strd	r6, fp, [r6, #32]
1a003884:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
1a003888:	4621      	mov	r1, r4
1a00388a:	60fb      	str	r3, [r7, #12]
1a00388c:	2208      	movs	r2, #8
1a00388e:	667c      	str	r4, [r7, #100]	; 0x64
1a003890:	e9c7 4400 	strd	r4, r4, [r7]
1a003894:	60bc      	str	r4, [r7, #8]
1a003896:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a00389a:	61bc      	str	r4, [r7, #24]
1a00389c:	f107 005c 	add.w	r0, r7, #92	; 0x5c
1a0038a0:	f000 f968 	bl	1a003b74 <memset>
1a0038a4:	68ee      	ldr	r6, [r5, #12]
1a0038a6:	4b12      	ldr	r3, [pc, #72]	; (1a0038f0 <__sinit.part.0+0xe0>)
1a0038a8:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
1a0038ac:	e9c7 7b08 	strd	r7, fp, [r7, #32]
1a0038b0:	e9c7 a90a 	strd	sl, r9, [r7, #40]	; 0x28
1a0038b4:	4621      	mov	r1, r4
1a0038b6:	60f3      	str	r3, [r6, #12]
1a0038b8:	6674      	str	r4, [r6, #100]	; 0x64
1a0038ba:	e9c6 4400 	strd	r4, r4, [r6]
1a0038be:	60b4      	str	r4, [r6, #8]
1a0038c0:	e9c6 4404 	strd	r4, r4, [r6, #16]
1a0038c4:	61b4      	str	r4, [r6, #24]
1a0038c6:	f106 005c 	add.w	r0, r6, #92	; 0x5c
1a0038ca:	2208      	movs	r2, #8
1a0038cc:	f000 f952 	bl	1a003b74 <memset>
1a0038d0:	2301      	movs	r3, #1
1a0038d2:	e9c6 6b08 	strd	r6, fp, [r6, #32]
1a0038d6:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
1a0038da:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
1a0038de:	61ab      	str	r3, [r5, #24]
1a0038e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0038e4:	1a00510c 	.word	0x1a00510c
1a0038e8:	1a00374d 	.word	0x1a00374d
1a0038ec:	00010009 	.word	0x00010009
1a0038f0:	00020012 	.word	0x00020012
1a0038f4:	1a004601 	.word	0x1a004601
1a0038f8:	1a004629 	.word	0x1a004629
1a0038fc:	1a004669 	.word	0x1a004669
1a003900:	1a004689 	.word	0x1a004689

1a003904 <_cleanup>:
1a003904:	4b02      	ldr	r3, [pc, #8]	; (1a003910 <_cleanup+0xc>)
1a003906:	4903      	ldr	r1, [pc, #12]	; (1a003914 <_cleanup+0x10>)
1a003908:	6818      	ldr	r0, [r3, #0]
1a00390a:	f000 b84b 	b.w	1a0039a4 <_fwalk_reent>
1a00390e:	bf00      	nop
1a003910:	1a00510c 	.word	0x1a00510c
1a003914:	1a0036c5 	.word	0x1a0036c5

1a003918 <__sinit>:
1a003918:	6983      	ldr	r3, [r0, #24]
1a00391a:	b903      	cbnz	r3, 1a00391e <__sinit+0x6>
1a00391c:	e778      	b.n	1a003810 <__sinit.part.0>
1a00391e:	4770      	bx	lr

1a003920 <__sfp_lock_acquire>:
1a003920:	4770      	bx	lr
1a003922:	bf00      	nop

1a003924 <__sfp_lock_release>:
1a003924:	4770      	bx	lr
1a003926:	bf00      	nop

1a003928 <__sinit_lock_acquire>:
1a003928:	4770      	bx	lr
1a00392a:	bf00      	nop

1a00392c <__sinit_lock_release>:
1a00392c:	4770      	bx	lr
1a00392e:	bf00      	nop

1a003930 <__fp_lock_all>:
1a003930:	4b02      	ldr	r3, [pc, #8]	; (1a00393c <__fp_lock_all+0xc>)
1a003932:	4903      	ldr	r1, [pc, #12]	; (1a003940 <__fp_lock_all+0x10>)
1a003934:	6818      	ldr	r0, [r3, #0]
1a003936:	f000 b80f 	b.w	1a003958 <_fwalk>
1a00393a:	bf00      	nop
1a00393c:	1000003c 	.word	0x1000003c
1a003940:	1a003749 	.word	0x1a003749

1a003944 <__fp_unlock_all>:
1a003944:	4b02      	ldr	r3, [pc, #8]	; (1a003950 <__fp_unlock_all+0xc>)
1a003946:	4903      	ldr	r1, [pc, #12]	; (1a003954 <__fp_unlock_all+0x10>)
1a003948:	6818      	ldr	r0, [r3, #0]
1a00394a:	f000 b805 	b.w	1a003958 <_fwalk>
1a00394e:	bf00      	nop
1a003950:	1000003c 	.word	0x1000003c
1a003954:	1a003759 	.word	0x1a003759

1a003958 <_fwalk>:
1a003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00395c:	f110 0748 	adds.w	r7, r0, #72	; 0x48
1a003960:	d01b      	beq.n	1a00399a <_fwalk+0x42>
1a003962:	4688      	mov	r8, r1
1a003964:	2600      	movs	r6, #0
1a003966:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a00396a:	3d01      	subs	r5, #1
1a00396c:	d40f      	bmi.n	1a00398e <_fwalk+0x36>
1a00396e:	89a3      	ldrh	r3, [r4, #12]
1a003970:	2b01      	cmp	r3, #1
1a003972:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a003976:	d906      	bls.n	1a003986 <_fwalk+0x2e>
1a003978:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a00397c:	3301      	adds	r3, #1
1a00397e:	4620      	mov	r0, r4
1a003980:	d001      	beq.n	1a003986 <_fwalk+0x2e>
1a003982:	47c0      	blx	r8
1a003984:	4306      	orrs	r6, r0
1a003986:	1c6b      	adds	r3, r5, #1
1a003988:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a00398c:	d1ef      	bne.n	1a00396e <_fwalk+0x16>
1a00398e:	683f      	ldr	r7, [r7, #0]
1a003990:	2f00      	cmp	r7, #0
1a003992:	d1e8      	bne.n	1a003966 <_fwalk+0xe>
1a003994:	4630      	mov	r0, r6
1a003996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00399a:	463e      	mov	r6, r7
1a00399c:	4630      	mov	r0, r6
1a00399e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0039a2:	bf00      	nop

1a0039a4 <_fwalk_reent>:
1a0039a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0039a8:	f110 0748 	adds.w	r7, r0, #72	; 0x48
1a0039ac:	d01f      	beq.n	1a0039ee <_fwalk_reent+0x4a>
1a0039ae:	4688      	mov	r8, r1
1a0039b0:	4606      	mov	r6, r0
1a0039b2:	f04f 0900 	mov.w	r9, #0
1a0039b6:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a0039ba:	3d01      	subs	r5, #1
1a0039bc:	d411      	bmi.n	1a0039e2 <_fwalk_reent+0x3e>
1a0039be:	89a3      	ldrh	r3, [r4, #12]
1a0039c0:	2b01      	cmp	r3, #1
1a0039c2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a0039c6:	d908      	bls.n	1a0039da <_fwalk_reent+0x36>
1a0039c8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a0039cc:	3301      	adds	r3, #1
1a0039ce:	4621      	mov	r1, r4
1a0039d0:	4630      	mov	r0, r6
1a0039d2:	d002      	beq.n	1a0039da <_fwalk_reent+0x36>
1a0039d4:	47c0      	blx	r8
1a0039d6:	ea49 0900 	orr.w	r9, r9, r0
1a0039da:	1c6b      	adds	r3, r5, #1
1a0039dc:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a0039e0:	d1ed      	bne.n	1a0039be <_fwalk_reent+0x1a>
1a0039e2:	683f      	ldr	r7, [r7, #0]
1a0039e4:	2f00      	cmp	r7, #0
1a0039e6:	d1e6      	bne.n	1a0039b6 <_fwalk_reent+0x12>
1a0039e8:	4648      	mov	r0, r9
1a0039ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0039ee:	46b9      	mov	r9, r7
1a0039f0:	4648      	mov	r0, r9
1a0039f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0039f6:	bf00      	nop

1a0039f8 <__libc_init_array>:
1a0039f8:	b570      	push	{r4, r5, r6, lr}
1a0039fa:	4e0d      	ldr	r6, [pc, #52]	; (1a003a30 <__libc_init_array+0x38>)
1a0039fc:	4d0d      	ldr	r5, [pc, #52]	; (1a003a34 <__libc_init_array+0x3c>)
1a0039fe:	1b76      	subs	r6, r6, r5
1a003a00:	10b6      	asrs	r6, r6, #2
1a003a02:	d006      	beq.n	1a003a12 <__libc_init_array+0x1a>
1a003a04:	2400      	movs	r4, #0
1a003a06:	3401      	adds	r4, #1
1a003a08:	f855 3b04 	ldr.w	r3, [r5], #4
1a003a0c:	4798      	blx	r3
1a003a0e:	42a6      	cmp	r6, r4
1a003a10:	d1f9      	bne.n	1a003a06 <__libc_init_array+0xe>
1a003a12:	4e09      	ldr	r6, [pc, #36]	; (1a003a38 <__libc_init_array+0x40>)
1a003a14:	4d09      	ldr	r5, [pc, #36]	; (1a003a3c <__libc_init_array+0x44>)
1a003a16:	1b76      	subs	r6, r6, r5
1a003a18:	f7fc fd3f 	bl	1a00049a <_init>
1a003a1c:	10b6      	asrs	r6, r6, #2
1a003a1e:	d006      	beq.n	1a003a2e <__libc_init_array+0x36>
1a003a20:	2400      	movs	r4, #0
1a003a22:	3401      	adds	r4, #1
1a003a24:	f855 3b04 	ldr.w	r3, [r5], #4
1a003a28:	4798      	blx	r3
1a003a2a:	42a6      	cmp	r6, r4
1a003a2c:	d1f9      	bne.n	1a003a22 <__libc_init_array+0x2a>
1a003a2e:	bd70      	pop	{r4, r5, r6, pc}
1a003a30:	1a00514c 	.word	0x1a00514c
1a003a34:	1a00514c 	.word	0x1a00514c
1a003a38:	1a005150 	.word	0x1a005150
1a003a3c:	1a00514c 	.word	0x1a00514c

1a003a40 <memcpy>:
1a003a40:	4684      	mov	ip, r0
1a003a42:	ea41 0300 	orr.w	r3, r1, r0
1a003a46:	f013 0303 	ands.w	r3, r3, #3
1a003a4a:	d16d      	bne.n	1a003b28 <memcpy+0xe8>
1a003a4c:	3a40      	subs	r2, #64	; 0x40
1a003a4e:	d341      	bcc.n	1a003ad4 <memcpy+0x94>
1a003a50:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a54:	f840 3b04 	str.w	r3, [r0], #4
1a003a58:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a5c:	f840 3b04 	str.w	r3, [r0], #4
1a003a60:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a64:	f840 3b04 	str.w	r3, [r0], #4
1a003a68:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a6c:	f840 3b04 	str.w	r3, [r0], #4
1a003a70:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a74:	f840 3b04 	str.w	r3, [r0], #4
1a003a78:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a7c:	f840 3b04 	str.w	r3, [r0], #4
1a003a80:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a84:	f840 3b04 	str.w	r3, [r0], #4
1a003a88:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a8c:	f840 3b04 	str.w	r3, [r0], #4
1a003a90:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a94:	f840 3b04 	str.w	r3, [r0], #4
1a003a98:	f851 3b04 	ldr.w	r3, [r1], #4
1a003a9c:	f840 3b04 	str.w	r3, [r0], #4
1a003aa0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003aa4:	f840 3b04 	str.w	r3, [r0], #4
1a003aa8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003aac:	f840 3b04 	str.w	r3, [r0], #4
1a003ab0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ab4:	f840 3b04 	str.w	r3, [r0], #4
1a003ab8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003abc:	f840 3b04 	str.w	r3, [r0], #4
1a003ac0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ac4:	f840 3b04 	str.w	r3, [r0], #4
1a003ac8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003acc:	f840 3b04 	str.w	r3, [r0], #4
1a003ad0:	3a40      	subs	r2, #64	; 0x40
1a003ad2:	d2bd      	bcs.n	1a003a50 <memcpy+0x10>
1a003ad4:	3230      	adds	r2, #48	; 0x30
1a003ad6:	d311      	bcc.n	1a003afc <memcpy+0xbc>
1a003ad8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003adc:	f840 3b04 	str.w	r3, [r0], #4
1a003ae0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003ae4:	f840 3b04 	str.w	r3, [r0], #4
1a003ae8:	f851 3b04 	ldr.w	r3, [r1], #4
1a003aec:	f840 3b04 	str.w	r3, [r0], #4
1a003af0:	f851 3b04 	ldr.w	r3, [r1], #4
1a003af4:	f840 3b04 	str.w	r3, [r0], #4
1a003af8:	3a10      	subs	r2, #16
1a003afa:	d2ed      	bcs.n	1a003ad8 <memcpy+0x98>
1a003afc:	320c      	adds	r2, #12
1a003afe:	d305      	bcc.n	1a003b0c <memcpy+0xcc>
1a003b00:	f851 3b04 	ldr.w	r3, [r1], #4
1a003b04:	f840 3b04 	str.w	r3, [r0], #4
1a003b08:	3a04      	subs	r2, #4
1a003b0a:	d2f9      	bcs.n	1a003b00 <memcpy+0xc0>
1a003b0c:	3204      	adds	r2, #4
1a003b0e:	d008      	beq.n	1a003b22 <memcpy+0xe2>
1a003b10:	07d2      	lsls	r2, r2, #31
1a003b12:	bf1c      	itt	ne
1a003b14:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003b18:	f800 3b01 	strbne.w	r3, [r0], #1
1a003b1c:	d301      	bcc.n	1a003b22 <memcpy+0xe2>
1a003b1e:	880b      	ldrh	r3, [r1, #0]
1a003b20:	8003      	strh	r3, [r0, #0]
1a003b22:	4660      	mov	r0, ip
1a003b24:	4770      	bx	lr
1a003b26:	bf00      	nop
1a003b28:	2a08      	cmp	r2, #8
1a003b2a:	d313      	bcc.n	1a003b54 <memcpy+0x114>
1a003b2c:	078b      	lsls	r3, r1, #30
1a003b2e:	d08d      	beq.n	1a003a4c <memcpy+0xc>
1a003b30:	f010 0303 	ands.w	r3, r0, #3
1a003b34:	d08a      	beq.n	1a003a4c <memcpy+0xc>
1a003b36:	f1c3 0304 	rsb	r3, r3, #4
1a003b3a:	1ad2      	subs	r2, r2, r3
1a003b3c:	07db      	lsls	r3, r3, #31
1a003b3e:	bf1c      	itt	ne
1a003b40:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003b44:	f800 3b01 	strbne.w	r3, [r0], #1
1a003b48:	d380      	bcc.n	1a003a4c <memcpy+0xc>
1a003b4a:	f831 3b02 	ldrh.w	r3, [r1], #2
1a003b4e:	f820 3b02 	strh.w	r3, [r0], #2
1a003b52:	e77b      	b.n	1a003a4c <memcpy+0xc>
1a003b54:	3a04      	subs	r2, #4
1a003b56:	d3d9      	bcc.n	1a003b0c <memcpy+0xcc>
1a003b58:	3a01      	subs	r2, #1
1a003b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003b5e:	f800 3b01 	strb.w	r3, [r0], #1
1a003b62:	d2f9      	bcs.n	1a003b58 <memcpy+0x118>
1a003b64:	780b      	ldrb	r3, [r1, #0]
1a003b66:	7003      	strb	r3, [r0, #0]
1a003b68:	784b      	ldrb	r3, [r1, #1]
1a003b6a:	7043      	strb	r3, [r0, #1]
1a003b6c:	788b      	ldrb	r3, [r1, #2]
1a003b6e:	7083      	strb	r3, [r0, #2]
1a003b70:	4660      	mov	r0, ip
1a003b72:	4770      	bx	lr

1a003b74 <memset>:
1a003b74:	b4f0      	push	{r4, r5, r6, r7}
1a003b76:	0786      	lsls	r6, r0, #30
1a003b78:	d046      	beq.n	1a003c08 <memset+0x94>
1a003b7a:	1e54      	subs	r4, r2, #1
1a003b7c:	2a00      	cmp	r2, #0
1a003b7e:	d03c      	beq.n	1a003bfa <memset+0x86>
1a003b80:	b2ca      	uxtb	r2, r1
1a003b82:	4603      	mov	r3, r0
1a003b84:	e002      	b.n	1a003b8c <memset+0x18>
1a003b86:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a003b8a:	d336      	bcc.n	1a003bfa <memset+0x86>
1a003b8c:	f803 2b01 	strb.w	r2, [r3], #1
1a003b90:	079d      	lsls	r5, r3, #30
1a003b92:	d1f8      	bne.n	1a003b86 <memset+0x12>
1a003b94:	2c03      	cmp	r4, #3
1a003b96:	d929      	bls.n	1a003bec <memset+0x78>
1a003b98:	b2cd      	uxtb	r5, r1
1a003b9a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a003b9e:	2c0f      	cmp	r4, #15
1a003ba0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a003ba4:	d933      	bls.n	1a003c0e <memset+0x9a>
1a003ba6:	f1a4 0610 	sub.w	r6, r4, #16
1a003baa:	0936      	lsrs	r6, r6, #4
1a003bac:	f103 0720 	add.w	r7, r3, #32
1a003bb0:	eb07 1706 	add.w	r7, r7, r6, lsl #4
1a003bb4:	f103 0210 	add.w	r2, r3, #16
1a003bb8:	e942 5504 	strd	r5, r5, [r2, #-16]
1a003bbc:	e942 5502 	strd	r5, r5, [r2, #-8]
1a003bc0:	3210      	adds	r2, #16
1a003bc2:	42ba      	cmp	r2, r7
1a003bc4:	d1f8      	bne.n	1a003bb8 <memset+0x44>
1a003bc6:	1c72      	adds	r2, r6, #1
1a003bc8:	f014 0f0c 	tst.w	r4, #12
1a003bcc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a003bd0:	f004 060f 	and.w	r6, r4, #15
1a003bd4:	d013      	beq.n	1a003bfe <memset+0x8a>
1a003bd6:	1f33      	subs	r3, r6, #4
1a003bd8:	f023 0303 	bic.w	r3, r3, #3
1a003bdc:	3304      	adds	r3, #4
1a003bde:	4413      	add	r3, r2
1a003be0:	f842 5b04 	str.w	r5, [r2], #4
1a003be4:	4293      	cmp	r3, r2
1a003be6:	d1fb      	bne.n	1a003be0 <memset+0x6c>
1a003be8:	f006 0403 	and.w	r4, r6, #3
1a003bec:	b12c      	cbz	r4, 1a003bfa <memset+0x86>
1a003bee:	b2c9      	uxtb	r1, r1
1a003bf0:	441c      	add	r4, r3
1a003bf2:	f803 1b01 	strb.w	r1, [r3], #1
1a003bf6:	429c      	cmp	r4, r3
1a003bf8:	d1fb      	bne.n	1a003bf2 <memset+0x7e>
1a003bfa:	bcf0      	pop	{r4, r5, r6, r7}
1a003bfc:	4770      	bx	lr
1a003bfe:	4634      	mov	r4, r6
1a003c00:	4613      	mov	r3, r2
1a003c02:	2c00      	cmp	r4, #0
1a003c04:	d1f3      	bne.n	1a003bee <memset+0x7a>
1a003c06:	e7f8      	b.n	1a003bfa <memset+0x86>
1a003c08:	4614      	mov	r4, r2
1a003c0a:	4603      	mov	r3, r0
1a003c0c:	e7c2      	b.n	1a003b94 <memset+0x20>
1a003c0e:	461a      	mov	r2, r3
1a003c10:	4626      	mov	r6, r4
1a003c12:	e7e0      	b.n	1a003bd6 <memset+0x62>

1a003c14 <_free_r>:
1a003c14:	2900      	cmp	r1, #0
1a003c16:	d03c      	beq.n	1a003c92 <_free_r+0x7e>
1a003c18:	b538      	push	{r3, r4, r5, lr}
1a003c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a003c1e:	1f0c      	subs	r4, r1, #4
1a003c20:	2b00      	cmp	r3, #0
1a003c22:	bfb8      	it	lt
1a003c24:	18e4      	addlt	r4, r4, r3
1a003c26:	4605      	mov	r5, r0
1a003c28:	f001 f8ca 	bl	1a004dc0 <__malloc_lock>
1a003c2c:	4b23      	ldr	r3, [pc, #140]	; (1a003cbc <_free_r+0xa8>)
1a003c2e:	681a      	ldr	r2, [r3, #0]
1a003c30:	b12a      	cbz	r2, 1a003c3e <_free_r+0x2a>
1a003c32:	42a2      	cmp	r2, r4
1a003c34:	d90d      	bls.n	1a003c52 <_free_r+0x3e>
1a003c36:	6821      	ldr	r1, [r4, #0]
1a003c38:	1860      	adds	r0, r4, r1
1a003c3a:	4282      	cmp	r2, r0
1a003c3c:	d023      	beq.n	1a003c86 <_free_r+0x72>
1a003c3e:	6062      	str	r2, [r4, #4]
1a003c40:	4628      	mov	r0, r5
1a003c42:	601c      	str	r4, [r3, #0]
1a003c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003c48:	f001 b8bc 	b.w	1a004dc4 <__malloc_unlock>
1a003c4c:	42a3      	cmp	r3, r4
1a003c4e:	d803      	bhi.n	1a003c58 <_free_r+0x44>
1a003c50:	461a      	mov	r2, r3
1a003c52:	6853      	ldr	r3, [r2, #4]
1a003c54:	2b00      	cmp	r3, #0
1a003c56:	d1f9      	bne.n	1a003c4c <_free_r+0x38>
1a003c58:	6811      	ldr	r1, [r2, #0]
1a003c5a:	1850      	adds	r0, r2, r1
1a003c5c:	42a0      	cmp	r0, r4
1a003c5e:	d019      	beq.n	1a003c94 <_free_r+0x80>
1a003c60:	d824      	bhi.n	1a003cac <_free_r+0x98>
1a003c62:	6821      	ldr	r1, [r4, #0]
1a003c64:	1860      	adds	r0, r4, r1
1a003c66:	4283      	cmp	r3, r0
1a003c68:	d006      	beq.n	1a003c78 <_free_r+0x64>
1a003c6a:	6063      	str	r3, [r4, #4]
1a003c6c:	6054      	str	r4, [r2, #4]
1a003c6e:	4628      	mov	r0, r5
1a003c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003c74:	f001 b8a6 	b.w	1a004dc4 <__malloc_unlock>
1a003c78:	e9d3 0300 	ldrd	r0, r3, [r3]
1a003c7c:	4401      	add	r1, r0
1a003c7e:	6063      	str	r3, [r4, #4]
1a003c80:	6021      	str	r1, [r4, #0]
1a003c82:	6054      	str	r4, [r2, #4]
1a003c84:	e7f3      	b.n	1a003c6e <_free_r+0x5a>
1a003c86:	e9d2 0200 	ldrd	r0, r2, [r2]
1a003c8a:	4401      	add	r1, r0
1a003c8c:	6062      	str	r2, [r4, #4]
1a003c8e:	6021      	str	r1, [r4, #0]
1a003c90:	e7d6      	b.n	1a003c40 <_free_r+0x2c>
1a003c92:	4770      	bx	lr
1a003c94:	6820      	ldr	r0, [r4, #0]
1a003c96:	4401      	add	r1, r0
1a003c98:	1850      	adds	r0, r2, r1
1a003c9a:	4283      	cmp	r3, r0
1a003c9c:	6011      	str	r1, [r2, #0]
1a003c9e:	d1e6      	bne.n	1a003c6e <_free_r+0x5a>
1a003ca0:	e9d3 0300 	ldrd	r0, r3, [r3]
1a003ca4:	4401      	add	r1, r0
1a003ca6:	6053      	str	r3, [r2, #4]
1a003ca8:	6011      	str	r1, [r2, #0]
1a003caa:	e7e0      	b.n	1a003c6e <_free_r+0x5a>
1a003cac:	230c      	movs	r3, #12
1a003cae:	602b      	str	r3, [r5, #0]
1a003cb0:	4628      	mov	r0, r5
1a003cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a003cb6:	f001 b885 	b.w	1a004dc4 <__malloc_unlock>
1a003cba:	bf00      	nop
1a003cbc:	10002bb8 	.word	0x10002bb8

1a003cc0 <_malloc_r>:
1a003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003cc2:	1ccd      	adds	r5, r1, #3
1a003cc4:	f025 0503 	bic.w	r5, r5, #3
1a003cc8:	3508      	adds	r5, #8
1a003cca:	2d0c      	cmp	r5, #12
1a003ccc:	bf38      	it	cc
1a003cce:	250c      	movcc	r5, #12
1a003cd0:	2d00      	cmp	r5, #0
1a003cd2:	4606      	mov	r6, r0
1a003cd4:	db33      	blt.n	1a003d3e <_malloc_r+0x7e>
1a003cd6:	42a9      	cmp	r1, r5
1a003cd8:	d831      	bhi.n	1a003d3e <_malloc_r+0x7e>
1a003cda:	4f2a      	ldr	r7, [pc, #168]	; (1a003d84 <_malloc_r+0xc4>)
1a003cdc:	f001 f870 	bl	1a004dc0 <__malloc_lock>
1a003ce0:	683a      	ldr	r2, [r7, #0]
1a003ce2:	b152      	cbz	r2, 1a003cfa <_malloc_r+0x3a>
1a003ce4:	6813      	ldr	r3, [r2, #0]
1a003ce6:	1b5b      	subs	r3, r3, r5
1a003ce8:	d404      	bmi.n	1a003cf4 <_malloc_r+0x34>
1a003cea:	e03f      	b.n	1a003d6c <_malloc_r+0xac>
1a003cec:	6823      	ldr	r3, [r4, #0]
1a003cee:	1b5b      	subs	r3, r3, r5
1a003cf0:	d529      	bpl.n	1a003d46 <_malloc_r+0x86>
1a003cf2:	4622      	mov	r2, r4
1a003cf4:	6854      	ldr	r4, [r2, #4]
1a003cf6:	2c00      	cmp	r4, #0
1a003cf8:	d1f8      	bne.n	1a003cec <_malloc_r+0x2c>
1a003cfa:	6879      	ldr	r1, [r7, #4]
1a003cfc:	2900      	cmp	r1, #0
1a003cfe:	d03b      	beq.n	1a003d78 <_malloc_r+0xb8>
1a003d00:	4629      	mov	r1, r5
1a003d02:	4630      	mov	r0, r6
1a003d04:	f7fc fc1e 	bl	1a000544 <_sbrk_r>
1a003d08:	1c43      	adds	r3, r0, #1
1a003d0a:	d028      	beq.n	1a003d5e <_malloc_r+0x9e>
1a003d0c:	1cc4      	adds	r4, r0, #3
1a003d0e:	f024 0403 	bic.w	r4, r4, #3
1a003d12:	42a0      	cmp	r0, r4
1a003d14:	d005      	beq.n	1a003d22 <_malloc_r+0x62>
1a003d16:	1a21      	subs	r1, r4, r0
1a003d18:	4630      	mov	r0, r6
1a003d1a:	f7fc fc13 	bl	1a000544 <_sbrk_r>
1a003d1e:	3001      	adds	r0, #1
1a003d20:	d01d      	beq.n	1a003d5e <_malloc_r+0x9e>
1a003d22:	6025      	str	r5, [r4, #0]
1a003d24:	4630      	mov	r0, r6
1a003d26:	f001 f84d 	bl	1a004dc4 <__malloc_unlock>
1a003d2a:	f104 000b 	add.w	r0, r4, #11
1a003d2e:	f020 0007 	bic.w	r0, r0, #7
1a003d32:	1d23      	adds	r3, r4, #4
1a003d34:	1ac2      	subs	r2, r0, r3
1a003d36:	d001      	beq.n	1a003d3c <_malloc_r+0x7c>
1a003d38:	1a1b      	subs	r3, r3, r0
1a003d3a:	50a3      	str	r3, [r4, r2]
1a003d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003d3e:	220c      	movs	r2, #12
1a003d40:	6032      	str	r2, [r6, #0]
1a003d42:	2000      	movs	r0, #0
1a003d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003d46:	2b0b      	cmp	r3, #11
1a003d48:	d805      	bhi.n	1a003d56 <_malloc_r+0x96>
1a003d4a:	42a2      	cmp	r2, r4
1a003d4c:	6863      	ldr	r3, [r4, #4]
1a003d4e:	d011      	beq.n	1a003d74 <_malloc_r+0xb4>
1a003d50:	6053      	str	r3, [r2, #4]
1a003d52:	e7e7      	b.n	1a003d24 <_malloc_r+0x64>
1a003d54:	4614      	mov	r4, r2
1a003d56:	6023      	str	r3, [r4, #0]
1a003d58:	441c      	add	r4, r3
1a003d5a:	6025      	str	r5, [r4, #0]
1a003d5c:	e7e2      	b.n	1a003d24 <_malloc_r+0x64>
1a003d5e:	230c      	movs	r3, #12
1a003d60:	4630      	mov	r0, r6
1a003d62:	6033      	str	r3, [r6, #0]
1a003d64:	f001 f82e 	bl	1a004dc4 <__malloc_unlock>
1a003d68:	2000      	movs	r0, #0
1a003d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003d6c:	2b0b      	cmp	r3, #11
1a003d6e:	d8f1      	bhi.n	1a003d54 <_malloc_r+0x94>
1a003d70:	6853      	ldr	r3, [r2, #4]
1a003d72:	4614      	mov	r4, r2
1a003d74:	603b      	str	r3, [r7, #0]
1a003d76:	e7d5      	b.n	1a003d24 <_malloc_r+0x64>
1a003d78:	4630      	mov	r0, r6
1a003d7a:	f7fc fbe3 	bl	1a000544 <_sbrk_r>
1a003d7e:	6078      	str	r0, [r7, #4]
1a003d80:	e7be      	b.n	1a003d00 <_malloc_r+0x40>
1a003d82:	bf00      	nop
1a003d84:	10002bb8 	.word	0x10002bb8

1a003d88 <__sfputc_r>:
1a003d88:	6893      	ldr	r3, [r2, #8]
1a003d8a:	3b01      	subs	r3, #1
1a003d8c:	2b00      	cmp	r3, #0
1a003d8e:	6093      	str	r3, [r2, #8]
1a003d90:	da11      	bge.n	1a003db6 <__sfputc_r+0x2e>
1a003d92:	b410      	push	{r4}
1a003d94:	6994      	ldr	r4, [r2, #24]
1a003d96:	42a3      	cmp	r3, r4
1a003d98:	db09      	blt.n	1a003dae <__sfputc_r+0x26>
1a003d9a:	290a      	cmp	r1, #10
1a003d9c:	d007      	beq.n	1a003dae <__sfputc_r+0x26>
1a003d9e:	6813      	ldr	r3, [r2, #0]
1a003da0:	1c58      	adds	r0, r3, #1
1a003da2:	6010      	str	r0, [r2, #0]
1a003da4:	7019      	strb	r1, [r3, #0]
1a003da6:	4608      	mov	r0, r1
1a003da8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003dac:	4770      	bx	lr
1a003dae:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003db2:	f000 bc6d 	b.w	1a004690 <__swbuf_r>
1a003db6:	6813      	ldr	r3, [r2, #0]
1a003db8:	1c58      	adds	r0, r3, #1
1a003dba:	6010      	str	r0, [r2, #0]
1a003dbc:	7019      	strb	r1, [r3, #0]
1a003dbe:	4608      	mov	r0, r1
1a003dc0:	4770      	bx	lr
1a003dc2:	bf00      	nop

1a003dc4 <__sfputs_r>:
1a003dc4:	b19b      	cbz	r3, 1a003dee <__sfputs_r+0x2a>
1a003dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a003dc8:	4413      	add	r3, r2
1a003dca:	460f      	mov	r7, r1
1a003dcc:	4606      	mov	r6, r0
1a003dce:	1e5d      	subs	r5, r3, #1
1a003dd0:	1e54      	subs	r4, r2, #1
1a003dd2:	e001      	b.n	1a003dd8 <__sfputs_r+0x14>
1a003dd4:	42ac      	cmp	r4, r5
1a003dd6:	d008      	beq.n	1a003dea <__sfputs_r+0x26>
1a003dd8:	463a      	mov	r2, r7
1a003dda:	f814 1f01 	ldrb.w	r1, [r4, #1]!
1a003dde:	4630      	mov	r0, r6
1a003de0:	f7ff ffd2 	bl	1a003d88 <__sfputc_r>
1a003de4:	1c43      	adds	r3, r0, #1
1a003de6:	d1f5      	bne.n	1a003dd4 <__sfputs_r+0x10>
1a003de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003dea:	2000      	movs	r0, #0
1a003dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003dee:	2000      	movs	r0, #0
1a003df0:	4770      	bx	lr
1a003df2:	bf00      	nop

1a003df4 <__sprint_r>:
1a003df4:	6893      	ldr	r3, [r2, #8]
1a003df6:	b510      	push	{r4, lr}
1a003df8:	4614      	mov	r4, r2
1a003dfa:	b913      	cbnz	r3, 1a003e02 <__sprint_r+0xe>
1a003dfc:	6053      	str	r3, [r2, #4]
1a003dfe:	4618      	mov	r0, r3
1a003e00:	bd10      	pop	{r4, pc}
1a003e02:	f000 fd25 	bl	1a004850 <__sfvwrite_r>
1a003e06:	2300      	movs	r3, #0
1a003e08:	e9c4 3301 	strd	r3, r3, [r4, #4]
1a003e0c:	bd10      	pop	{r4, pc}
1a003e0e:	bf00      	nop

1a003e10 <_vfiprintf_r>:
1a003e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003e14:	b09f      	sub	sp, #124	; 0x7c
1a003e16:	468b      	mov	fp, r1
1a003e18:	4690      	mov	r8, r2
1a003e1a:	461c      	mov	r4, r3
1a003e1c:	9003      	str	r0, [sp, #12]
1a003e1e:	b118      	cbz	r0, 1a003e28 <_vfiprintf_r+0x18>
1a003e20:	6983      	ldr	r3, [r0, #24]
1a003e22:	2b00      	cmp	r3, #0
1a003e24:	f000 80b7 	beq.w	1a003f96 <_vfiprintf_r+0x186>
1a003e28:	4ba2      	ldr	r3, [pc, #648]	; (1a0040b4 <_vfiprintf_r+0x2a4>)
1a003e2a:	459b      	cmp	fp, r3
1a003e2c:	f000 80b9 	beq.w	1a003fa2 <_vfiprintf_r+0x192>
1a003e30:	4ba1      	ldr	r3, [pc, #644]	; (1a0040b8 <_vfiprintf_r+0x2a8>)
1a003e32:	459b      	cmp	fp, r3
1a003e34:	f000 80c7 	beq.w	1a003fc6 <_vfiprintf_r+0x1b6>
1a003e38:	4ba0      	ldr	r3, [pc, #640]	; (1a0040bc <_vfiprintf_r+0x2ac>)
1a003e3a:	459b      	cmp	fp, r3
1a003e3c:	bf04      	itt	eq
1a003e3e:	9b03      	ldreq	r3, [sp, #12]
1a003e40:	f8d3 b00c 	ldreq.w	fp, [r3, #12]
1a003e44:	f8bb 300c 	ldrh.w	r3, [fp, #12]
1a003e48:	0718      	lsls	r0, r3, #28
1a003e4a:	f140 80b2 	bpl.w	1a003fb2 <_vfiprintf_r+0x1a2>
1a003e4e:	f8db 3010 	ldr.w	r3, [fp, #16]
1a003e52:	2b00      	cmp	r3, #0
1a003e54:	f000 80ad 	beq.w	1a003fb2 <_vfiprintf_r+0x1a2>
1a003e58:	2330      	movs	r3, #48	; 0x30
1a003e5a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
1a003e5e:	f898 3000 	ldrb.w	r3, [r8]
1a003e62:	9405      	str	r4, [sp, #20]
1a003e64:	2100      	movs	r1, #0
1a003e66:	2220      	movs	r2, #32
1a003e68:	910b      	str	r1, [sp, #44]	; 0x2c
1a003e6a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
1a003e6e:	4e94      	ldr	r6, [pc, #592]	; (1a0040c0 <_vfiprintf_r+0x2b0>)
1a003e70:	2701      	movs	r7, #1
1a003e72:	2b00      	cmp	r3, #0
1a003e74:	f000 8087 	beq.w	1a003f86 <_vfiprintf_r+0x176>
1a003e78:	2b25      	cmp	r3, #37	; 0x25
1a003e7a:	f000 8115 	beq.w	1a0040a8 <_vfiprintf_r+0x298>
1a003e7e:	4645      	mov	r5, r8
1a003e80:	e003      	b.n	1a003e8a <_vfiprintf_r+0x7a>
1a003e82:	2b25      	cmp	r3, #37	; 0x25
1a003e84:	f000 80a3 	beq.w	1a003fce <_vfiprintf_r+0x1be>
1a003e88:	4625      	mov	r5, r4
1a003e8a:	786b      	ldrb	r3, [r5, #1]
1a003e8c:	1c6c      	adds	r4, r5, #1
1a003e8e:	2b00      	cmp	r3, #0
1a003e90:	d1f7      	bne.n	1a003e82 <_vfiprintf_r+0x72>
1a003e92:	ebb4 0a08 	subs.w	sl, r4, r8
1a003e96:	d076      	beq.n	1a003f86 <_vfiprintf_r+0x176>
1a003e98:	4642      	mov	r2, r8
1a003e9a:	4653      	mov	r3, sl
1a003e9c:	4659      	mov	r1, fp
1a003e9e:	9803      	ldr	r0, [sp, #12]
1a003ea0:	f7ff ff90 	bl	1a003dc4 <__sfputs_r>
1a003ea4:	3001      	adds	r0, #1
1a003ea6:	d06e      	beq.n	1a003f86 <_vfiprintf_r+0x176>
1a003ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a003eaa:	786a      	ldrb	r2, [r5, #1]
1a003eac:	4453      	add	r3, sl
1a003eae:	930b      	str	r3, [sp, #44]	; 0x2c
1a003eb0:	2a00      	cmp	r2, #0
1a003eb2:	d068      	beq.n	1a003f86 <_vfiprintf_r+0x176>
1a003eb4:	2300      	movs	r3, #0
1a003eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003eba:	3401      	adds	r4, #1
1a003ebc:	9306      	str	r3, [sp, #24]
1a003ebe:	e9cd 3308 	strd	r3, r3, [sp, #32]
1a003ec2:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
1a003ec6:	931c      	str	r3, [sp, #112]	; 0x70
1a003ec8:	9207      	str	r2, [sp, #28]
1a003eca:	e005      	b.n	1a003ed8 <_vfiprintf_r+0xc8>
1a003ecc:	9a06      	ldr	r2, [sp, #24]
1a003ece:	fa07 f303 	lsl.w	r3, r7, r3
1a003ed2:	4313      	orrs	r3, r2
1a003ed4:	462c      	mov	r4, r5
1a003ed6:	9306      	str	r3, [sp, #24]
1a003ed8:	4625      	mov	r5, r4
1a003eda:	2205      	movs	r2, #5
1a003edc:	f815 1b01 	ldrb.w	r1, [r5], #1
1a003ee0:	4630      	mov	r0, r6
1a003ee2:	f000 feb5 	bl	1a004c50 <memchr>
1a003ee6:	46aa      	mov	sl, r5
1a003ee8:	1b83      	subs	r3, r0, r6
1a003eea:	2800      	cmp	r0, #0
1a003eec:	d1ee      	bne.n	1a003ecc <_vfiprintf_r+0xbc>
1a003eee:	9b06      	ldr	r3, [sp, #24]
1a003ef0:	06d9      	lsls	r1, r3, #27
1a003ef2:	bf44      	itt	mi
1a003ef4:	2220      	movmi	r2, #32
1a003ef6:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
1a003efa:	7821      	ldrb	r1, [r4, #0]
1a003efc:	071a      	lsls	r2, r3, #28
1a003efe:	bf44      	itt	mi
1a003f00:	222b      	movmi	r2, #43	; 0x2b
1a003f02:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
1a003f06:	292a      	cmp	r1, #42	; 0x2a
1a003f08:	d166      	bne.n	1a003fd8 <_vfiprintf_r+0x1c8>
1a003f0a:	9a05      	ldr	r2, [sp, #20]
1a003f0c:	6811      	ldr	r1, [r2, #0]
1a003f0e:	3204      	adds	r2, #4
1a003f10:	2900      	cmp	r1, #0
1a003f12:	9205      	str	r2, [sp, #20]
1a003f14:	f2c0 809d 	blt.w	1a004052 <_vfiprintf_r+0x242>
1a003f18:	9109      	str	r1, [sp, #36]	; 0x24
1a003f1a:	7861      	ldrb	r1, [r4, #1]
1a003f1c:	1ca5      	adds	r5, r4, #2
1a003f1e:	292e      	cmp	r1, #46	; 0x2e
1a003f20:	d073      	beq.n	1a00400a <_vfiprintf_r+0x1fa>
1a003f22:	4c68      	ldr	r4, [pc, #416]	; (1a0040c4 <_vfiprintf_r+0x2b4>)
1a003f24:	2203      	movs	r2, #3
1a003f26:	4620      	mov	r0, r4
1a003f28:	f000 fe92 	bl	1a004c50 <memchr>
1a003f2c:	2800      	cmp	r0, #0
1a003f2e:	f000 8086 	beq.w	1a00403e <_vfiprintf_r+0x22e>
1a003f32:	1b00      	subs	r0, r0, r4
1a003f34:	9b06      	ldr	r3, [sp, #24]
1a003f36:	2440      	movs	r4, #64	; 0x40
1a003f38:	fa04 f000 	lsl.w	r0, r4, r0
1a003f3c:	4303      	orrs	r3, r0
1a003f3e:	9306      	str	r3, [sp, #24]
1a003f40:	f105 0801 	add.w	r8, r5, #1
1a003f44:	7829      	ldrb	r1, [r5, #0]
1a003f46:	4860      	ldr	r0, [pc, #384]	; (1a0040c8 <_vfiprintf_r+0x2b8>)
1a003f48:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
1a003f4c:	2206      	movs	r2, #6
1a003f4e:	f000 fe7f 	bl	1a004c50 <memchr>
1a003f52:	2800      	cmp	r0, #0
1a003f54:	f000 8083 	beq.w	1a00405e <_vfiprintf_r+0x24e>
1a003f58:	4b5c      	ldr	r3, [pc, #368]	; (1a0040cc <_vfiprintf_r+0x2bc>)
1a003f5a:	2b00      	cmp	r3, #0
1a003f5c:	d072      	beq.n	1a004044 <_vfiprintf_r+0x234>
1a003f5e:	ab05      	add	r3, sp, #20
1a003f60:	9300      	str	r3, [sp, #0]
1a003f62:	465a      	mov	r2, fp
1a003f64:	4b5a      	ldr	r3, [pc, #360]	; (1a0040d0 <_vfiprintf_r+0x2c0>)
1a003f66:	9803      	ldr	r0, [sp, #12]
1a003f68:	a906      	add	r1, sp, #24
1a003f6a:	f3af 8000 	nop.w
1a003f6e:	4681      	mov	r9, r0
1a003f70:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a003f74:	d007      	beq.n	1a003f86 <_vfiprintf_r+0x176>
1a003f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a003f78:	444b      	add	r3, r9
1a003f7a:	930b      	str	r3, [sp, #44]	; 0x2c
1a003f7c:	f898 3000 	ldrb.w	r3, [r8]
1a003f80:	2b00      	cmp	r3, #0
1a003f82:	f47f af79 	bne.w	1a003e78 <_vfiprintf_r+0x68>
1a003f86:	f8bb 300c 	ldrh.w	r3, [fp, #12]
1a003f8a:	065b      	lsls	r3, r3, #25
1a003f8c:	d418      	bmi.n	1a003fc0 <_vfiprintf_r+0x1b0>
1a003f8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
1a003f90:	b01f      	add	sp, #124	; 0x7c
1a003f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003f96:	f7ff fcbf 	bl	1a003918 <__sinit>
1a003f9a:	4b46      	ldr	r3, [pc, #280]	; (1a0040b4 <_vfiprintf_r+0x2a4>)
1a003f9c:	459b      	cmp	fp, r3
1a003f9e:	f47f af47 	bne.w	1a003e30 <_vfiprintf_r+0x20>
1a003fa2:	9b03      	ldr	r3, [sp, #12]
1a003fa4:	f8d3 b004 	ldr.w	fp, [r3, #4]
1a003fa8:	f8bb 300c 	ldrh.w	r3, [fp, #12]
1a003fac:	0718      	lsls	r0, r3, #28
1a003fae:	f53f af4e 	bmi.w	1a003e4e <_vfiprintf_r+0x3e>
1a003fb2:	4659      	mov	r1, fp
1a003fb4:	9803      	ldr	r0, [sp, #12]
1a003fb6:	f000 fbcb 	bl	1a004750 <__swsetup_r>
1a003fba:	2800      	cmp	r0, #0
1a003fbc:	f43f af4c 	beq.w	1a003e58 <_vfiprintf_r+0x48>
1a003fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003fc4:	e7e4      	b.n	1a003f90 <_vfiprintf_r+0x180>
1a003fc6:	9b03      	ldr	r3, [sp, #12]
1a003fc8:	f8d3 b008 	ldr.w	fp, [r3, #8]
1a003fcc:	e73a      	b.n	1a003e44 <_vfiprintf_r+0x34>
1a003fce:	ebb4 0a08 	subs.w	sl, r4, r8
1a003fd2:	f43f af6f 	beq.w	1a003eb4 <_vfiprintf_r+0xa4>
1a003fd6:	e75f      	b.n	1a003e98 <_vfiprintf_r+0x88>
1a003fd8:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a003fdc:	2a09      	cmp	r2, #9
1a003fde:	bf88      	it	hi
1a003fe0:	46a2      	movhi	sl, r4
1a003fe2:	d89c      	bhi.n	1a003f1e <_vfiprintf_r+0x10e>
1a003fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003fe6:	e001      	b.n	1a003fec <_vfiprintf_r+0x1dc>
1a003fe8:	462c      	mov	r4, r5
1a003fea:	3501      	adds	r5, #1
1a003fec:	7829      	ldrb	r1, [r5, #0]
1a003fee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003ff2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a003ff6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a003ffa:	2a09      	cmp	r2, #9
1a003ffc:	46aa      	mov	sl, r5
1a003ffe:	d9f3      	bls.n	1a003fe8 <_vfiprintf_r+0x1d8>
1a004000:	292e      	cmp	r1, #46	; 0x2e
1a004002:	f104 0502 	add.w	r5, r4, #2
1a004006:	9309      	str	r3, [sp, #36]	; 0x24
1a004008:	d18b      	bne.n	1a003f22 <_vfiprintf_r+0x112>
1a00400a:	f89a 1001 	ldrb.w	r1, [sl, #1]
1a00400e:	292a      	cmp	r1, #42	; 0x2a
1a004010:	d12f      	bne.n	1a004072 <_vfiprintf_r+0x262>
1a004012:	9b05      	ldr	r3, [sp, #20]
1a004014:	f89a 1002 	ldrb.w	r1, [sl, #2]
1a004018:	681a      	ldr	r2, [r3, #0]
1a00401a:	9207      	str	r2, [sp, #28]
1a00401c:	3304      	adds	r3, #4
1a00401e:	2a00      	cmp	r2, #0
1a004020:	9305      	str	r3, [sp, #20]
1a004022:	f10a 0503 	add.w	r5, sl, #3
1a004026:	f10a 0302 	add.w	r3, sl, #2
1a00402a:	db38      	blt.n	1a00409e <_vfiprintf_r+0x28e>
1a00402c:	4c25      	ldr	r4, [pc, #148]	; (1a0040c4 <_vfiprintf_r+0x2b4>)
1a00402e:	2203      	movs	r2, #3
1a004030:	4620      	mov	r0, r4
1a004032:	469a      	mov	sl, r3
1a004034:	f000 fe0c 	bl	1a004c50 <memchr>
1a004038:	2800      	cmp	r0, #0
1a00403a:	f47f af7a 	bne.w	1a003f32 <_vfiprintf_r+0x122>
1a00403e:	46a8      	mov	r8, r5
1a004040:	4655      	mov	r5, sl
1a004042:	e77f      	b.n	1a003f44 <_vfiprintf_r+0x134>
1a004044:	9b05      	ldr	r3, [sp, #20]
1a004046:	3307      	adds	r3, #7
1a004048:	f023 0307 	bic.w	r3, r3, #7
1a00404c:	3308      	adds	r3, #8
1a00404e:	9305      	str	r3, [sp, #20]
1a004050:	e791      	b.n	1a003f76 <_vfiprintf_r+0x166>
1a004052:	4249      	negs	r1, r1
1a004054:	f043 0302 	orr.w	r3, r3, #2
1a004058:	9109      	str	r1, [sp, #36]	; 0x24
1a00405a:	9306      	str	r3, [sp, #24]
1a00405c:	e75d      	b.n	1a003f1a <_vfiprintf_r+0x10a>
1a00405e:	ab05      	add	r3, sp, #20
1a004060:	9300      	str	r3, [sp, #0]
1a004062:	465a      	mov	r2, fp
1a004064:	4b1a      	ldr	r3, [pc, #104]	; (1a0040d0 <_vfiprintf_r+0x2c0>)
1a004066:	9803      	ldr	r0, [sp, #12]
1a004068:	a906      	add	r1, sp, #24
1a00406a:	f000 f8d5 	bl	1a004218 <_printf_i>
1a00406e:	4681      	mov	r9, r0
1a004070:	e77e      	b.n	1a003f70 <_vfiprintf_r+0x160>
1a004072:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a004076:	2300      	movs	r3, #0
1a004078:	2a09      	cmp	r2, #9
1a00407a:	9307      	str	r3, [sp, #28]
1a00407c:	d901      	bls.n	1a004082 <_vfiprintf_r+0x272>
1a00407e:	e015      	b.n	1a0040ac <_vfiprintf_r+0x29c>
1a004080:	4655      	mov	r5, sl
1a004082:	7869      	ldrb	r1, [r5, #1]
1a004084:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004088:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a00408c:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
1a004090:	2a09      	cmp	r2, #9
1a004092:	f105 0a01 	add.w	sl, r5, #1
1a004096:	d9f3      	bls.n	1a004080 <_vfiprintf_r+0x270>
1a004098:	3502      	adds	r5, #2
1a00409a:	9307      	str	r3, [sp, #28]
1a00409c:	e741      	b.n	1a003f22 <_vfiprintf_r+0x112>
1a00409e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0040a2:	469a      	mov	sl, r3
1a0040a4:	9207      	str	r2, [sp, #28]
1a0040a6:	e73c      	b.n	1a003f22 <_vfiprintf_r+0x112>
1a0040a8:	4644      	mov	r4, r8
1a0040aa:	e703      	b.n	1a003eb4 <_vfiprintf_r+0xa4>
1a0040ac:	46aa      	mov	sl, r5
1a0040ae:	3501      	adds	r5, #1
1a0040b0:	e737      	b.n	1a003f22 <_vfiprintf_r+0x112>
1a0040b2:	bf00      	nop
1a0040b4:	1a0050ec 	.word	0x1a0050ec
1a0040b8:	1a0050cc 	.word	0x1a0050cc
1a0040bc:	1a0050ac 	.word	0x1a0050ac
1a0040c0:	1a005110 	.word	0x1a005110
1a0040c4:	1a005118 	.word	0x1a005118
1a0040c8:	1a00511c 	.word	0x1a00511c
1a0040cc:	00000000 	.word	0x00000000
1a0040d0:	1a003dc5 	.word	0x1a003dc5

1a0040d4 <vfiprintf>:
1a0040d4:	b410      	push	{r4}
1a0040d6:	4c04      	ldr	r4, [pc, #16]	; (1a0040e8 <vfiprintf+0x14>)
1a0040d8:	4613      	mov	r3, r2
1a0040da:	460a      	mov	r2, r1
1a0040dc:	4601      	mov	r1, r0
1a0040de:	6820      	ldr	r0, [r4, #0]
1a0040e0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0040e4:	f7ff be94 	b.w	1a003e10 <_vfiprintf_r>
1a0040e8:	1000003c 	.word	0x1000003c

1a0040ec <_printf_common>:
1a0040ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0040f0:	460c      	mov	r4, r1
1a0040f2:	4691      	mov	r9, r2
1a0040f4:	690a      	ldr	r2, [r1, #16]
1a0040f6:	6889      	ldr	r1, [r1, #8]
1a0040f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0040fc:	428a      	cmp	r2, r1
1a0040fe:	bfb8      	it	lt
1a004100:	460a      	movlt	r2, r1
1a004102:	f8c9 2000 	str.w	r2, [r9]
1a004106:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
1a00410a:	4606      	mov	r6, r0
1a00410c:	461f      	mov	r7, r3
1a00410e:	b111      	cbz	r1, 1a004116 <_printf_common+0x2a>
1a004110:	3201      	adds	r2, #1
1a004112:	f8c9 2000 	str.w	r2, [r9]
1a004116:	6823      	ldr	r3, [r4, #0]
1a004118:	0699      	lsls	r1, r3, #26
1a00411a:	d55c      	bpl.n	1a0041d6 <_printf_common+0xea>
1a00411c:	f8d9 2000 	ldr.w	r2, [r9]
1a004120:	3202      	adds	r2, #2
1a004122:	f8c9 2000 	str.w	r2, [r9]
1a004126:	6823      	ldr	r3, [r4, #0]
1a004128:	f013 0f06 	tst.w	r3, #6
1a00412c:	4619      	mov	r1, r3
1a00412e:	d11d      	bne.n	1a00416c <_printf_common+0x80>
1a004130:	68e1      	ldr	r1, [r4, #12]
1a004132:	1a8a      	subs	r2, r1, r2
1a004134:	2a00      	cmp	r2, #0
1a004136:	bfd8      	it	le
1a004138:	4619      	movle	r1, r3
1a00413a:	dd17      	ble.n	1a00416c <_printf_common+0x80>
1a00413c:	f104 0a19 	add.w	sl, r4, #25
1a004140:	2500      	movs	r5, #0
1a004142:	e005      	b.n	1a004150 <_printf_common+0x64>
1a004144:	68e3      	ldr	r3, [r4, #12]
1a004146:	f8d9 2000 	ldr.w	r2, [r9]
1a00414a:	1a9b      	subs	r3, r3, r2
1a00414c:	42ab      	cmp	r3, r5
1a00414e:	dd0c      	ble.n	1a00416a <_printf_common+0x7e>
1a004150:	2301      	movs	r3, #1
1a004152:	4652      	mov	r2, sl
1a004154:	4639      	mov	r1, r7
1a004156:	4630      	mov	r0, r6
1a004158:	47c0      	blx	r8
1a00415a:	3001      	adds	r0, #1
1a00415c:	f105 0501 	add.w	r5, r5, #1
1a004160:	d1f0      	bne.n	1a004144 <_printf_common+0x58>
1a004162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00416a:	6821      	ldr	r1, [r4, #0]
1a00416c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a004170:	3300      	adds	r3, #0
1a004172:	bf18      	it	ne
1a004174:	2301      	movne	r3, #1
1a004176:	068a      	lsls	r2, r1, #26
1a004178:	d50a      	bpl.n	1a004190 <_printf_common+0xa4>
1a00417a:	18e1      	adds	r1, r4, r3
1a00417c:	1c5a      	adds	r2, r3, #1
1a00417e:	2030      	movs	r0, #48	; 0x30
1a004180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a004184:	4422      	add	r2, r4
1a004186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00418a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00418e:	3302      	adds	r3, #2
1a004190:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a004194:	4639      	mov	r1, r7
1a004196:	4630      	mov	r0, r6
1a004198:	47c0      	blx	r8
1a00419a:	3001      	adds	r0, #1
1a00419c:	d0e1      	beq.n	1a004162 <_printf_common+0x76>
1a00419e:	6823      	ldr	r3, [r4, #0]
1a0041a0:	68a2      	ldr	r2, [r4, #8]
1a0041a2:	6921      	ldr	r1, [r4, #16]
1a0041a4:	f003 0306 	and.w	r3, r3, #6
1a0041a8:	2b04      	cmp	r3, #4
1a0041aa:	d01d      	beq.n	1a0041e8 <_printf_common+0xfc>
1a0041ac:	428a      	cmp	r2, r1
1a0041ae:	dd26      	ble.n	1a0041fe <_printf_common+0x112>
1a0041b0:	f04f 0900 	mov.w	r9, #0
1a0041b4:	1a52      	subs	r2, r2, r1
1a0041b6:	4491      	add	r9, r2
1a0041b8:	341a      	adds	r4, #26
1a0041ba:	2500      	movs	r5, #0
1a0041bc:	e001      	b.n	1a0041c2 <_printf_common+0xd6>
1a0041be:	454d      	cmp	r5, r9
1a0041c0:	da1d      	bge.n	1a0041fe <_printf_common+0x112>
1a0041c2:	2301      	movs	r3, #1
1a0041c4:	4622      	mov	r2, r4
1a0041c6:	4639      	mov	r1, r7
1a0041c8:	4630      	mov	r0, r6
1a0041ca:	47c0      	blx	r8
1a0041cc:	3001      	adds	r0, #1
1a0041ce:	f105 0501 	add.w	r5, r5, #1
1a0041d2:	d1f4      	bne.n	1a0041be <_printf_common+0xd2>
1a0041d4:	e7c5      	b.n	1a004162 <_printf_common+0x76>
1a0041d6:	f013 0f06 	tst.w	r3, #6
1a0041da:	d013      	beq.n	1a004204 <_printf_common+0x118>
1a0041dc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0041e0:	3300      	adds	r3, #0
1a0041e2:	bf18      	it	ne
1a0041e4:	2301      	movne	r3, #1
1a0041e6:	e7d3      	b.n	1a004190 <_printf_common+0xa4>
1a0041e8:	f8d9 0000 	ldr.w	r0, [r9]
1a0041ec:	68e3      	ldr	r3, [r4, #12]
1a0041ee:	428a      	cmp	r2, r1
1a0041f0:	eba3 0300 	sub.w	r3, r3, r0
1a0041f4:	ea23 79e3 	bic.w	r9, r3, r3, asr #31
1a0041f8:	dcdc      	bgt.n	1a0041b4 <_printf_common+0xc8>
1a0041fa:	2b00      	cmp	r3, #0
1a0041fc:	dcdc      	bgt.n	1a0041b8 <_printf_common+0xcc>
1a0041fe:	2000      	movs	r0, #0
1a004200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a004204:	68e1      	ldr	r1, [r4, #12]
1a004206:	f8d9 2000 	ldr.w	r2, [r9]
1a00420a:	1a8a      	subs	r2, r1, r2
1a00420c:	2a00      	cmp	r2, #0
1a00420e:	bfd8      	it	le
1a004210:	4619      	movle	r1, r3
1a004212:	dc93      	bgt.n	1a00413c <_printf_common+0x50>
1a004214:	e7aa      	b.n	1a00416c <_printf_common+0x80>
1a004216:	bf00      	nop

1a004218 <_printf_i>:
1a004218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00421c:	460c      	mov	r4, r1
1a00421e:	7e09      	ldrb	r1, [r1, #24]
1a004220:	b085      	sub	sp, #20
1a004222:	296e      	cmp	r1, #110	; 0x6e
1a004224:	4606      	mov	r6, r0
1a004226:	4617      	mov	r7, r2
1a004228:	980c      	ldr	r0, [sp, #48]	; 0x30
1a00422a:	4698      	mov	r8, r3
1a00422c:	f104 0e43 	add.w	lr, r4, #67	; 0x43
1a004230:	d06d      	beq.n	1a00430e <_printf_i+0xf6>
1a004232:	d939      	bls.n	1a0042a8 <_printf_i+0x90>
1a004234:	2973      	cmp	r1, #115	; 0x73
1a004236:	f000 80f6 	beq.w	1a004426 <_printf_i+0x20e>
1a00423a:	d944      	bls.n	1a0042c6 <_printf_i+0xae>
1a00423c:	2975      	cmp	r1, #117	; 0x75
1a00423e:	f000 8104 	beq.w	1a00444a <_printf_i+0x232>
1a004242:	2978      	cmp	r1, #120	; 0x78
1a004244:	f040 8111 	bne.w	1a00446a <_printf_i+0x252>
1a004248:	2378      	movs	r3, #120	; 0x78
1a00424a:	6822      	ldr	r2, [r4, #0]
1a00424c:	f8df c258 	ldr.w	ip, [pc, #600]	; 1a0044a8 <_printf_i+0x290>
1a004250:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a004254:	6801      	ldr	r1, [r0, #0]
1a004256:	0615      	lsls	r5, r2, #24
1a004258:	f851 3b04 	ldr.w	r3, [r1], #4
1a00425c:	6001      	str	r1, [r0, #0]
1a00425e:	f140 80a1 	bpl.w	1a0043a4 <_printf_i+0x18c>
1a004262:	07d1      	lsls	r1, r2, #31
1a004264:	bf44      	itt	mi
1a004266:	f042 0220 	orrmi.w	r2, r2, #32
1a00426a:	6022      	strmi	r2, [r4, #0]
1a00426c:	2b00      	cmp	r3, #0
1a00426e:	f000 8093 	beq.w	1a004398 <_printf_i+0x180>
1a004272:	2210      	movs	r2, #16
1a004274:	2100      	movs	r1, #0
1a004276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a00427a:	6860      	ldr	r0, [r4, #4]
1a00427c:	60a0      	str	r0, [r4, #8]
1a00427e:	2800      	cmp	r0, #0
1a004280:	f2c0 80c8 	blt.w	1a004414 <_printf_i+0x1fc>
1a004284:	6821      	ldr	r1, [r4, #0]
1a004286:	f021 0104 	bic.w	r1, r1, #4
1a00428a:	6021      	str	r1, [r4, #0]
1a00428c:	2b00      	cmp	r3, #0
1a00428e:	f040 80a3 	bne.w	1a0043d8 <_printf_i+0x1c0>
1a004292:	2800      	cmp	r0, #0
1a004294:	f040 80c0 	bne.w	1a004418 <_printf_i+0x200>
1a004298:	4675      	mov	r5, lr
1a00429a:	2a08      	cmp	r2, #8
1a00429c:	f000 80ac 	beq.w	1a0043f8 <_printf_i+0x1e0>
1a0042a0:	ebae 0305 	sub.w	r3, lr, r5
1a0042a4:	6123      	str	r3, [r4, #16]
1a0042a6:	e041      	b.n	1a00432c <_printf_i+0x114>
1a0042a8:	2963      	cmp	r1, #99	; 0x63
1a0042aa:	f000 80e5 	beq.w	1a004478 <_printf_i+0x260>
1a0042ae:	d81a      	bhi.n	1a0042e6 <_printf_i+0xce>
1a0042b0:	2900      	cmp	r1, #0
1a0042b2:	d038      	beq.n	1a004326 <_printf_i+0x10e>
1a0042b4:	2958      	cmp	r1, #88	; 0x58
1a0042b6:	f040 80d8 	bne.w	1a00446a <_printf_i+0x252>
1a0042ba:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0042be:	6822      	ldr	r2, [r4, #0]
1a0042c0:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 1a0044ac <_printf_i+0x294>
1a0042c4:	e7c6      	b.n	1a004254 <_printf_i+0x3c>
1a0042c6:	296f      	cmp	r1, #111	; 0x6f
1a0042c8:	f000 80bf 	beq.w	1a00444a <_printf_i+0x232>
1a0042cc:	2970      	cmp	r1, #112	; 0x70
1a0042ce:	f040 80cc 	bne.w	1a00446a <_printf_i+0x252>
1a0042d2:	6822      	ldr	r2, [r4, #0]
1a0042d4:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 1a0044a8 <_printf_i+0x290>
1a0042d8:	f042 0220 	orr.w	r2, r2, #32
1a0042dc:	2378      	movs	r3, #120	; 0x78
1a0042de:	6022      	str	r2, [r4, #0]
1a0042e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0042e4:	e7b6      	b.n	1a004254 <_printf_i+0x3c>
1a0042e6:	2964      	cmp	r1, #100	; 0x64
1a0042e8:	d002      	beq.n	1a0042f0 <_printf_i+0xd8>
1a0042ea:	2969      	cmp	r1, #105	; 0x69
1a0042ec:	f040 80bd 	bne.w	1a00446a <_printf_i+0x252>
1a0042f0:	6822      	ldr	r2, [r4, #0]
1a0042f2:	6803      	ldr	r3, [r0, #0]
1a0042f4:	0611      	lsls	r1, r2, #24
1a0042f6:	f103 0504 	add.w	r5, r3, #4
1a0042fa:	d557      	bpl.n	1a0043ac <_printf_i+0x194>
1a0042fc:	6819      	ldr	r1, [r3, #0]
1a0042fe:	6005      	str	r5, [r0, #0]
1a004300:	460b      	mov	r3, r1
1a004302:	2900      	cmp	r1, #0
1a004304:	db59      	blt.n	1a0043ba <_printf_i+0x1a2>
1a004306:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 1a0044ac <_printf_i+0x294>
1a00430a:	220a      	movs	r2, #10
1a00430c:	e7b5      	b.n	1a00427a <_printf_i+0x62>
1a00430e:	6803      	ldr	r3, [r0, #0]
1a004310:	6822      	ldr	r2, [r4, #0]
1a004312:	6961      	ldr	r1, [r4, #20]
1a004314:	1d1d      	adds	r5, r3, #4
1a004316:	6005      	str	r5, [r0, #0]
1a004318:	0615      	lsls	r5, r2, #24
1a00431a:	681b      	ldr	r3, [r3, #0]
1a00431c:	d402      	bmi.n	1a004324 <_printf_i+0x10c>
1a00431e:	0650      	lsls	r0, r2, #25
1a004320:	f100 80bd 	bmi.w	1a00449e <_printf_i+0x286>
1a004324:	6019      	str	r1, [r3, #0]
1a004326:	2300      	movs	r3, #0
1a004328:	4675      	mov	r5, lr
1a00432a:	6123      	str	r3, [r4, #16]
1a00432c:	f8cd 8000 	str.w	r8, [sp]
1a004330:	463b      	mov	r3, r7
1a004332:	aa03      	add	r2, sp, #12
1a004334:	4621      	mov	r1, r4
1a004336:	4630      	mov	r0, r6
1a004338:	f7ff fed8 	bl	1a0040ec <_printf_common>
1a00433c:	3001      	adds	r0, #1
1a00433e:	d020      	beq.n	1a004382 <_printf_i+0x16a>
1a004340:	462a      	mov	r2, r5
1a004342:	6923      	ldr	r3, [r4, #16]
1a004344:	4639      	mov	r1, r7
1a004346:	4630      	mov	r0, r6
1a004348:	47c0      	blx	r8
1a00434a:	3001      	adds	r0, #1
1a00434c:	d019      	beq.n	1a004382 <_printf_i+0x16a>
1a00434e:	6822      	ldr	r2, [r4, #0]
1a004350:	9803      	ldr	r0, [sp, #12]
1a004352:	68e3      	ldr	r3, [r4, #12]
1a004354:	0792      	lsls	r2, r2, #30
1a004356:	d519      	bpl.n	1a00438c <_printf_i+0x174>
1a004358:	1a1a      	subs	r2, r3, r0
1a00435a:	2a00      	cmp	r2, #0
1a00435c:	dd16      	ble.n	1a00438c <_printf_i+0x174>
1a00435e:	f104 0919 	add.w	r9, r4, #25
1a004362:	2500      	movs	r5, #0
1a004364:	e004      	b.n	1a004370 <_printf_i+0x158>
1a004366:	68e3      	ldr	r3, [r4, #12]
1a004368:	9803      	ldr	r0, [sp, #12]
1a00436a:	1a1a      	subs	r2, r3, r0
1a00436c:	42aa      	cmp	r2, r5
1a00436e:	dd0d      	ble.n	1a00438c <_printf_i+0x174>
1a004370:	2301      	movs	r3, #1
1a004372:	464a      	mov	r2, r9
1a004374:	4639      	mov	r1, r7
1a004376:	4630      	mov	r0, r6
1a004378:	47c0      	blx	r8
1a00437a:	3001      	adds	r0, #1
1a00437c:	f105 0501 	add.w	r5, r5, #1
1a004380:	d1f1      	bne.n	1a004366 <_printf_i+0x14e>
1a004382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004386:	b005      	add	sp, #20
1a004388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00438c:	4298      	cmp	r0, r3
1a00438e:	bfb8      	it	lt
1a004390:	4618      	movlt	r0, r3
1a004392:	b005      	add	sp, #20
1a004394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a004398:	6822      	ldr	r2, [r4, #0]
1a00439a:	f022 0220 	bic.w	r2, r2, #32
1a00439e:	6022      	str	r2, [r4, #0]
1a0043a0:	2210      	movs	r2, #16
1a0043a2:	e767      	b.n	1a004274 <_printf_i+0x5c>
1a0043a4:	0650      	lsls	r0, r2, #25
1a0043a6:	bf48      	it	mi
1a0043a8:	b29b      	uxthmi	r3, r3
1a0043aa:	e75a      	b.n	1a004262 <_printf_i+0x4a>
1a0043ac:	0651      	lsls	r1, r2, #25
1a0043ae:	d5a5      	bpl.n	1a0042fc <_printf_i+0xe4>
1a0043b0:	f9b3 3000 	ldrsh.w	r3, [r3]
1a0043b4:	6005      	str	r5, [r0, #0]
1a0043b6:	4619      	mov	r1, r3
1a0043b8:	e7a3      	b.n	1a004302 <_printf_i+0xea>
1a0043ba:	6861      	ldr	r1, [r4, #4]
1a0043bc:	60a1      	str	r1, [r4, #8]
1a0043be:	202d      	movs	r0, #45	; 0x2d
1a0043c0:	2900      	cmp	r1, #0
1a0043c2:	f1c3 0300 	rsb	r3, r3, #0
1a0043c6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
1a0043ca:	db02      	blt.n	1a0043d2 <_printf_i+0x1ba>
1a0043cc:	f022 0204 	bic.w	r2, r2, #4
1a0043d0:	6022      	str	r2, [r4, #0]
1a0043d2:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 1a0044ac <_printf_i+0x294>
1a0043d6:	220a      	movs	r2, #10
1a0043d8:	4675      	mov	r5, lr
1a0043da:	e000      	b.n	1a0043de <_printf_i+0x1c6>
1a0043dc:	460b      	mov	r3, r1
1a0043de:	fbb3 f1f2 	udiv	r1, r3, r2
1a0043e2:	fb02 3011 	mls	r0, r2, r1, r3
1a0043e6:	4293      	cmp	r3, r2
1a0043e8:	f81c 0000 	ldrb.w	r0, [ip, r0]
1a0043ec:	f805 0d01 	strb.w	r0, [r5, #-1]!
1a0043f0:	d2f4      	bcs.n	1a0043dc <_printf_i+0x1c4>
1a0043f2:	2a08      	cmp	r2, #8
1a0043f4:	f47f af54 	bne.w	1a0042a0 <_printf_i+0x88>
1a0043f8:	6823      	ldr	r3, [r4, #0]
1a0043fa:	07db      	lsls	r3, r3, #31
1a0043fc:	f57f af50 	bpl.w	1a0042a0 <_printf_i+0x88>
1a004400:	6862      	ldr	r2, [r4, #4]
1a004402:	6923      	ldr	r3, [r4, #16]
1a004404:	429a      	cmp	r2, r3
1a004406:	f73f af4b 	bgt.w	1a0042a0 <_printf_i+0x88>
1a00440a:	2330      	movs	r3, #48	; 0x30
1a00440c:	f805 3c01 	strb.w	r3, [r5, #-1]
1a004410:	3d01      	subs	r5, #1
1a004412:	e745      	b.n	1a0042a0 <_printf_i+0x88>
1a004414:	2b00      	cmp	r3, #0
1a004416:	d1df      	bne.n	1a0043d8 <_printf_i+0x1c0>
1a004418:	f89c 3000 	ldrb.w	r3, [ip]
1a00441c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a004420:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004424:	e739      	b.n	1a00429a <_printf_i+0x82>
1a004426:	6803      	ldr	r3, [r0, #0]
1a004428:	6862      	ldr	r2, [r4, #4]
1a00442a:	1d19      	adds	r1, r3, #4
1a00442c:	6001      	str	r1, [r0, #0]
1a00442e:	681d      	ldr	r5, [r3, #0]
1a004430:	2100      	movs	r1, #0
1a004432:	4628      	mov	r0, r5
1a004434:	f000 fc0c 	bl	1a004c50 <memchr>
1a004438:	2800      	cmp	r0, #0
1a00443a:	d032      	beq.n	1a0044a2 <_printf_i+0x28a>
1a00443c:	1b40      	subs	r0, r0, r5
1a00443e:	6060      	str	r0, [r4, #4]
1a004440:	6120      	str	r0, [r4, #16]
1a004442:	2300      	movs	r3, #0
1a004444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a004448:	e770      	b.n	1a00432c <_printf_i+0x114>
1a00444a:	6822      	ldr	r2, [r4, #0]
1a00444c:	6803      	ldr	r3, [r0, #0]
1a00444e:	f012 0f80 	tst.w	r2, #128	; 0x80
1a004452:	f103 0504 	add.w	r5, r3, #4
1a004456:	d01a      	beq.n	1a00448e <_printf_i+0x276>
1a004458:	681b      	ldr	r3, [r3, #0]
1a00445a:	6005      	str	r5, [r0, #0]
1a00445c:	296f      	cmp	r1, #111	; 0x6f
1a00445e:	bf0c      	ite	eq
1a004460:	2208      	moveq	r2, #8
1a004462:	220a      	movne	r2, #10
1a004464:	f8df c044 	ldr.w	ip, [pc, #68]	; 1a0044ac <_printf_i+0x294>
1a004468:	e704      	b.n	1a004274 <_printf_i+0x5c>
1a00446a:	2301      	movs	r3, #1
1a00446c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a004470:	6123      	str	r3, [r4, #16]
1a004472:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004476:	e7e4      	b.n	1a004442 <_printf_i+0x22a>
1a004478:	6803      	ldr	r3, [r0, #0]
1a00447a:	681a      	ldr	r2, [r3, #0]
1a00447c:	1d19      	adds	r1, r3, #4
1a00447e:	2301      	movs	r3, #1
1a004480:	6001      	str	r1, [r0, #0]
1a004482:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a004486:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
1a00448a:	6123      	str	r3, [r4, #16]
1a00448c:	e7d9      	b.n	1a004442 <_printf_i+0x22a>
1a00448e:	f012 0f40 	tst.w	r2, #64	; 0x40
1a004492:	bf0d      	iteet	eq
1a004494:	681b      	ldreq	r3, [r3, #0]
1a004496:	6005      	strne	r5, [r0, #0]
1a004498:	881b      	ldrhne	r3, [r3, #0]
1a00449a:	6005      	streq	r5, [r0, #0]
1a00449c:	e7de      	b.n	1a00445c <_printf_i+0x244>
1a00449e:	8019      	strh	r1, [r3, #0]
1a0044a0:	e741      	b.n	1a004326 <_printf_i+0x10e>
1a0044a2:	6860      	ldr	r0, [r4, #4]
1a0044a4:	e7cc      	b.n	1a004440 <_printf_i+0x228>
1a0044a6:	bf00      	nop
1a0044a8:	1a005138 	.word	0x1a005138
1a0044ac:	1a005124 	.word	0x1a005124

1a0044b0 <_iprintf_r>:
1a0044b0:	b40e      	push	{r1, r2, r3}
1a0044b2:	b510      	push	{r4, lr}
1a0044b4:	4604      	mov	r4, r0
1a0044b6:	b083      	sub	sp, #12
1a0044b8:	b108      	cbz	r0, 1a0044be <_iprintf_r+0xe>
1a0044ba:	6983      	ldr	r3, [r0, #24]
1a0044bc:	b163      	cbz	r3, 1a0044d8 <_iprintf_r+0x28>
1a0044be:	a806      	add	r0, sp, #24
1a0044c0:	4603      	mov	r3, r0
1a0044c2:	9001      	str	r0, [sp, #4]
1a0044c4:	9a05      	ldr	r2, [sp, #20]
1a0044c6:	68a1      	ldr	r1, [r4, #8]
1a0044c8:	4620      	mov	r0, r4
1a0044ca:	f7ff fca1 	bl	1a003e10 <_vfiprintf_r>
1a0044ce:	b003      	add	sp, #12
1a0044d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0044d4:	b003      	add	sp, #12
1a0044d6:	4770      	bx	lr
1a0044d8:	f7ff fa1e 	bl	1a003918 <__sinit>
1a0044dc:	e7ef      	b.n	1a0044be <_iprintf_r+0xe>
1a0044de:	bf00      	nop

1a0044e0 <iprintf>:
1a0044e0:	b40f      	push	{r0, r1, r2, r3}
1a0044e2:	b510      	push	{r4, lr}
1a0044e4:	4b0b      	ldr	r3, [pc, #44]	; (1a004514 <iprintf+0x34>)
1a0044e6:	681c      	ldr	r4, [r3, #0]
1a0044e8:	b082      	sub	sp, #8
1a0044ea:	b10c      	cbz	r4, 1a0044f0 <iprintf+0x10>
1a0044ec:	69a3      	ldr	r3, [r4, #24]
1a0044ee:	b163      	cbz	r3, 1a00450a <iprintf+0x2a>
1a0044f0:	a805      	add	r0, sp, #20
1a0044f2:	4603      	mov	r3, r0
1a0044f4:	9001      	str	r0, [sp, #4]
1a0044f6:	9a04      	ldr	r2, [sp, #16]
1a0044f8:	68a1      	ldr	r1, [r4, #8]
1a0044fa:	4620      	mov	r0, r4
1a0044fc:	f7ff fc88 	bl	1a003e10 <_vfiprintf_r>
1a004500:	b002      	add	sp, #8
1a004502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004506:	b004      	add	sp, #16
1a004508:	4770      	bx	lr
1a00450a:	4620      	mov	r0, r4
1a00450c:	f7ff fa04 	bl	1a003918 <__sinit>
1a004510:	e7ee      	b.n	1a0044f0 <iprintf+0x10>
1a004512:	bf00      	nop
1a004514:	1000003c 	.word	0x1000003c

1a004518 <_puts_r>:
1a004518:	6983      	ldr	r3, [r0, #24]
1a00451a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00451e:	4680      	mov	r8, r0
1a004520:	460e      	mov	r6, r1
1a004522:	b333      	cbz	r3, 1a004572 <_puts_r+0x5a>
1a004524:	6884      	ldr	r4, [r0, #8]
1a004526:	4b2f      	ldr	r3, [pc, #188]	; (1a0045e4 <_puts_r+0xcc>)
1a004528:	429c      	cmp	r4, r3
1a00452a:	d030      	beq.n	1a00458e <_puts_r+0x76>
1a00452c:	4b2e      	ldr	r3, [pc, #184]	; (1a0045e8 <_puts_r+0xd0>)
1a00452e:	429c      	cmp	r4, r3
1a004530:	d039      	beq.n	1a0045a6 <_puts_r+0x8e>
1a004532:	4b2e      	ldr	r3, [pc, #184]	; (1a0045ec <_puts_r+0xd4>)
1a004534:	429c      	cmp	r4, r3
1a004536:	bf08      	it	eq
1a004538:	f8d8 400c 	ldreq.w	r4, [r8, #12]
1a00453c:	89a3      	ldrh	r3, [r4, #12]
1a00453e:	071b      	lsls	r3, r3, #28
1a004540:	d52a      	bpl.n	1a004598 <_puts_r+0x80>
1a004542:	6923      	ldr	r3, [r4, #16]
1a004544:	b343      	cbz	r3, 1a004598 <_puts_r+0x80>
1a004546:	3e01      	subs	r6, #1
1a004548:	68a3      	ldr	r3, [r4, #8]
1a00454a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
1a00454e:	3b01      	subs	r3, #1
1a004550:	60a3      	str	r3, [r4, #8]
1a004552:	b39d      	cbz	r5, 1a0045bc <_puts_r+0xa4>
1a004554:	2b00      	cmp	r3, #0
1a004556:	da07      	bge.n	1a004568 <_puts_r+0x50>
1a004558:	69a7      	ldr	r7, [r4, #24]
1a00455a:	429f      	cmp	r7, r3
1a00455c:	4622      	mov	r2, r4
1a00455e:	4629      	mov	r1, r5
1a004560:	4640      	mov	r0, r8
1a004562:	dc23      	bgt.n	1a0045ac <_puts_r+0x94>
1a004564:	2d0a      	cmp	r5, #10
1a004566:	d021      	beq.n	1a0045ac <_puts_r+0x94>
1a004568:	6823      	ldr	r3, [r4, #0]
1a00456a:	1c5a      	adds	r2, r3, #1
1a00456c:	6022      	str	r2, [r4, #0]
1a00456e:	701d      	strb	r5, [r3, #0]
1a004570:	e7ea      	b.n	1a004548 <_puts_r+0x30>
1a004572:	f7ff f9d1 	bl	1a003918 <__sinit>
1a004576:	f8d8 3018 	ldr.w	r3, [r8, #24]
1a00457a:	f8d8 4008 	ldr.w	r4, [r8, #8]
1a00457e:	2b00      	cmp	r3, #0
1a004580:	d1d1      	bne.n	1a004526 <_puts_r+0xe>
1a004582:	4640      	mov	r0, r8
1a004584:	f7ff f9c8 	bl	1a003918 <__sinit>
1a004588:	4b16      	ldr	r3, [pc, #88]	; (1a0045e4 <_puts_r+0xcc>)
1a00458a:	429c      	cmp	r4, r3
1a00458c:	d1ce      	bne.n	1a00452c <_puts_r+0x14>
1a00458e:	f8d8 4004 	ldr.w	r4, [r8, #4]
1a004592:	89a3      	ldrh	r3, [r4, #12]
1a004594:	071b      	lsls	r3, r3, #28
1a004596:	d4d4      	bmi.n	1a004542 <_puts_r+0x2a>
1a004598:	4621      	mov	r1, r4
1a00459a:	4640      	mov	r0, r8
1a00459c:	f000 f8d8 	bl	1a004750 <__swsetup_r>
1a0045a0:	2800      	cmp	r0, #0
1a0045a2:	d0d0      	beq.n	1a004546 <_puts_r+0x2e>
1a0045a4:	e006      	b.n	1a0045b4 <_puts_r+0x9c>
1a0045a6:	f8d8 4008 	ldr.w	r4, [r8, #8]
1a0045aa:	e7c7      	b.n	1a00453c <_puts_r+0x24>
1a0045ac:	f000 f870 	bl	1a004690 <__swbuf_r>
1a0045b0:	3001      	adds	r0, #1
1a0045b2:	d1c9      	bne.n	1a004548 <_puts_r+0x30>
1a0045b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0045b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0045bc:	2b00      	cmp	r3, #0
1a0045be:	da09      	bge.n	1a0045d4 <_puts_r+0xbc>
1a0045c0:	4622      	mov	r2, r4
1a0045c2:	4640      	mov	r0, r8
1a0045c4:	210a      	movs	r1, #10
1a0045c6:	f000 f863 	bl	1a004690 <__swbuf_r>
1a0045ca:	3001      	adds	r0, #1
1a0045cc:	d0f2      	beq.n	1a0045b4 <_puts_r+0x9c>
1a0045ce:	200a      	movs	r0, #10
1a0045d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0045d4:	6823      	ldr	r3, [r4, #0]
1a0045d6:	220a      	movs	r2, #10
1a0045d8:	1c59      	adds	r1, r3, #1
1a0045da:	6021      	str	r1, [r4, #0]
1a0045dc:	701a      	strb	r2, [r3, #0]
1a0045de:	4610      	mov	r0, r2
1a0045e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0045e4:	1a0050ec 	.word	0x1a0050ec
1a0045e8:	1a0050cc 	.word	0x1a0050cc
1a0045ec:	1a0050ac 	.word	0x1a0050ac

1a0045f0 <puts>:
1a0045f0:	4b02      	ldr	r3, [pc, #8]	; (1a0045fc <puts+0xc>)
1a0045f2:	4601      	mov	r1, r0
1a0045f4:	6818      	ldr	r0, [r3, #0]
1a0045f6:	f7ff bf8f 	b.w	1a004518 <_puts_r>
1a0045fa:	bf00      	nop
1a0045fc:	1000003c 	.word	0x1000003c

1a004600 <__sread>:
1a004600:	b510      	push	{r4, lr}
1a004602:	460c      	mov	r4, r1
1a004604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004608:	f7fb ff60 	bl	1a0004cc <_read_r>
1a00460c:	2800      	cmp	r0, #0
1a00460e:	db03      	blt.n	1a004618 <__sread+0x18>
1a004610:	6d63      	ldr	r3, [r4, #84]	; 0x54
1a004612:	4403      	add	r3, r0
1a004614:	6563      	str	r3, [r4, #84]	; 0x54
1a004616:	bd10      	pop	{r4, pc}
1a004618:	89a3      	ldrh	r3, [r4, #12]
1a00461a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a00461e:	81a3      	strh	r3, [r4, #12]
1a004620:	bd10      	pop	{r4, pc}
1a004622:	bf00      	nop

1a004624 <__seofread>:
1a004624:	2000      	movs	r0, #0
1a004626:	4770      	bx	lr

1a004628 <__swrite>:
1a004628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00462c:	4616      	mov	r6, r2
1a00462e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a004632:	461f      	mov	r7, r3
1a004634:	05d3      	lsls	r3, r2, #23
1a004636:	460c      	mov	r4, r1
1a004638:	4605      	mov	r5, r0
1a00463a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00463e:	d409      	bmi.n	1a004654 <__swrite+0x2c>
1a004640:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a004644:	81a2      	strh	r2, [r4, #12]
1a004646:	463b      	mov	r3, r7
1a004648:	4632      	mov	r2, r6
1a00464a:	4628      	mov	r0, r5
1a00464c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a004650:	f7fb bf63 	b.w	1a00051a <_write_r>
1a004654:	2200      	movs	r2, #0
1a004656:	2302      	movs	r3, #2
1a004658:	f7fb ff33 	bl	1a0004c2 <_lseek_r>
1a00465c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004664:	e7ec      	b.n	1a004640 <__swrite+0x18>
1a004666:	bf00      	nop

1a004668 <__sseek>:
1a004668:	b510      	push	{r4, lr}
1a00466a:	460c      	mov	r4, r1
1a00466c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004670:	f7fb ff27 	bl	1a0004c2 <_lseek_r>
1a004674:	89a3      	ldrh	r3, [r4, #12]
1a004676:	1c42      	adds	r2, r0, #1
1a004678:	bf0e      	itee	eq
1a00467a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00467e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a004682:	6560      	strne	r0, [r4, #84]	; 0x54
1a004684:	81a3      	strh	r3, [r4, #12]
1a004686:	bd10      	pop	{r4, pc}

1a004688 <__sclose>:
1a004688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00468c:	f7fb bf06 	b.w	1a00049c <_close_r>

1a004690 <__swbuf_r>:
1a004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004692:	460d      	mov	r5, r1
1a004694:	4614      	mov	r4, r2
1a004696:	4606      	mov	r6, r0
1a004698:	b108      	cbz	r0, 1a00469e <__swbuf_r+0xe>
1a00469a:	6983      	ldr	r3, [r0, #24]
1a00469c:	b343      	cbz	r3, 1a0046f0 <__swbuf_r+0x60>
1a00469e:	4b25      	ldr	r3, [pc, #148]	; (1a004734 <__swbuf_r+0xa4>)
1a0046a0:	429c      	cmp	r4, r3
1a0046a2:	d02a      	beq.n	1a0046fa <__swbuf_r+0x6a>
1a0046a4:	4b24      	ldr	r3, [pc, #144]	; (1a004738 <__swbuf_r+0xa8>)
1a0046a6:	429c      	cmp	r4, r3
1a0046a8:	d029      	beq.n	1a0046fe <__swbuf_r+0x6e>
1a0046aa:	4b24      	ldr	r3, [pc, #144]	; (1a00473c <__swbuf_r+0xac>)
1a0046ac:	429c      	cmp	r4, r3
1a0046ae:	bf08      	it	eq
1a0046b0:	68f4      	ldreq	r4, [r6, #12]
1a0046b2:	89a3      	ldrh	r3, [r4, #12]
1a0046b4:	69a2      	ldr	r2, [r4, #24]
1a0046b6:	60a2      	str	r2, [r4, #8]
1a0046b8:	071a      	lsls	r2, r3, #28
1a0046ba:	d522      	bpl.n	1a004702 <__swbuf_r+0x72>
1a0046bc:	6923      	ldr	r3, [r4, #16]
1a0046be:	b303      	cbz	r3, 1a004702 <__swbuf_r+0x72>
1a0046c0:	6822      	ldr	r2, [r4, #0]
1a0046c2:	6961      	ldr	r1, [r4, #20]
1a0046c4:	1ad3      	subs	r3, r2, r3
1a0046c6:	b2ed      	uxtb	r5, r5
1a0046c8:	4299      	cmp	r1, r3
1a0046ca:	462f      	mov	r7, r5
1a0046cc:	dd29      	ble.n	1a004722 <__swbuf_r+0x92>
1a0046ce:	3301      	adds	r3, #1
1a0046d0:	68a1      	ldr	r1, [r4, #8]
1a0046d2:	1c50      	adds	r0, r2, #1
1a0046d4:	3901      	subs	r1, #1
1a0046d6:	60a1      	str	r1, [r4, #8]
1a0046d8:	6020      	str	r0, [r4, #0]
1a0046da:	7015      	strb	r5, [r2, #0]
1a0046dc:	6962      	ldr	r2, [r4, #20]
1a0046de:	429a      	cmp	r2, r3
1a0046e0:	d016      	beq.n	1a004710 <__swbuf_r+0x80>
1a0046e2:	89a3      	ldrh	r3, [r4, #12]
1a0046e4:	07db      	lsls	r3, r3, #31
1a0046e6:	d501      	bpl.n	1a0046ec <__swbuf_r+0x5c>
1a0046e8:	2d0a      	cmp	r5, #10
1a0046ea:	d011      	beq.n	1a004710 <__swbuf_r+0x80>
1a0046ec:	4638      	mov	r0, r7
1a0046ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0046f0:	f7ff f912 	bl	1a003918 <__sinit>
1a0046f4:	4b0f      	ldr	r3, [pc, #60]	; (1a004734 <__swbuf_r+0xa4>)
1a0046f6:	429c      	cmp	r4, r3
1a0046f8:	d1d4      	bne.n	1a0046a4 <__swbuf_r+0x14>
1a0046fa:	6874      	ldr	r4, [r6, #4]
1a0046fc:	e7d9      	b.n	1a0046b2 <__swbuf_r+0x22>
1a0046fe:	68b4      	ldr	r4, [r6, #8]
1a004700:	e7d7      	b.n	1a0046b2 <__swbuf_r+0x22>
1a004702:	4621      	mov	r1, r4
1a004704:	4630      	mov	r0, r6
1a004706:	f000 f823 	bl	1a004750 <__swsetup_r>
1a00470a:	b938      	cbnz	r0, 1a00471c <__swbuf_r+0x8c>
1a00470c:	6923      	ldr	r3, [r4, #16]
1a00470e:	e7d7      	b.n	1a0046c0 <__swbuf_r+0x30>
1a004710:	4621      	mov	r1, r4
1a004712:	4630      	mov	r0, r6
1a004714:	f7fe ffd6 	bl	1a0036c4 <_fflush_r>
1a004718:	2800      	cmp	r0, #0
1a00471a:	d0e7      	beq.n	1a0046ec <__swbuf_r+0x5c>
1a00471c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a004720:	e7e4      	b.n	1a0046ec <__swbuf_r+0x5c>
1a004722:	4621      	mov	r1, r4
1a004724:	4630      	mov	r0, r6
1a004726:	f7fe ffcd 	bl	1a0036c4 <_fflush_r>
1a00472a:	2800      	cmp	r0, #0
1a00472c:	d1f6      	bne.n	1a00471c <__swbuf_r+0x8c>
1a00472e:	6822      	ldr	r2, [r4, #0]
1a004730:	2301      	movs	r3, #1
1a004732:	e7cd      	b.n	1a0046d0 <__swbuf_r+0x40>
1a004734:	1a0050ec 	.word	0x1a0050ec
1a004738:	1a0050cc 	.word	0x1a0050cc
1a00473c:	1a0050ac 	.word	0x1a0050ac

1a004740 <__swbuf>:
1a004740:	4b02      	ldr	r3, [pc, #8]	; (1a00474c <__swbuf+0xc>)
1a004742:	460a      	mov	r2, r1
1a004744:	4601      	mov	r1, r0
1a004746:	6818      	ldr	r0, [r3, #0]
1a004748:	f7ff bfa2 	b.w	1a004690 <__swbuf_r>
1a00474c:	1000003c 	.word	0x1000003c

1a004750 <__swsetup_r>:
1a004750:	4b3b      	ldr	r3, [pc, #236]	; (1a004840 <__swsetup_r+0xf0>)
1a004752:	b570      	push	{r4, r5, r6, lr}
1a004754:	681d      	ldr	r5, [r3, #0]
1a004756:	4606      	mov	r6, r0
1a004758:	460c      	mov	r4, r1
1a00475a:	b10d      	cbz	r5, 1a004760 <__swsetup_r+0x10>
1a00475c:	69ab      	ldr	r3, [r5, #24]
1a00475e:	b1db      	cbz	r3, 1a004798 <__swsetup_r+0x48>
1a004760:	4b38      	ldr	r3, [pc, #224]	; (1a004844 <__swsetup_r+0xf4>)
1a004762:	429c      	cmp	r4, r3
1a004764:	d01e      	beq.n	1a0047a4 <__swsetup_r+0x54>
1a004766:	4b38      	ldr	r3, [pc, #224]	; (1a004848 <__swsetup_r+0xf8>)
1a004768:	429c      	cmp	r4, r3
1a00476a:	d04a      	beq.n	1a004802 <__swsetup_r+0xb2>
1a00476c:	4b37      	ldr	r3, [pc, #220]	; (1a00484c <__swsetup_r+0xfc>)
1a00476e:	429c      	cmp	r4, r3
1a004770:	bf08      	it	eq
1a004772:	68ec      	ldreq	r4, [r5, #12]
1a004774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004778:	b293      	uxth	r3, r2
1a00477a:	0719      	lsls	r1, r3, #28
1a00477c:	d518      	bpl.n	1a0047b0 <__swsetup_r+0x60>
1a00477e:	6920      	ldr	r0, [r4, #16]
1a004780:	b308      	cbz	r0, 1a0047c6 <__swsetup_r+0x76>
1a004782:	f013 0201 	ands.w	r2, r3, #1
1a004786:	d02c      	beq.n	1a0047e2 <__swsetup_r+0x92>
1a004788:	6963      	ldr	r3, [r4, #20]
1a00478a:	2200      	movs	r2, #0
1a00478c:	425b      	negs	r3, r3
1a00478e:	61a3      	str	r3, [r4, #24]
1a004790:	60a2      	str	r2, [r4, #8]
1a004792:	b360      	cbz	r0, 1a0047ee <__swsetup_r+0x9e>
1a004794:	2000      	movs	r0, #0
1a004796:	bd70      	pop	{r4, r5, r6, pc}
1a004798:	4628      	mov	r0, r5
1a00479a:	f7ff f8bd 	bl	1a003918 <__sinit>
1a00479e:	4b29      	ldr	r3, [pc, #164]	; (1a004844 <__swsetup_r+0xf4>)
1a0047a0:	429c      	cmp	r4, r3
1a0047a2:	d1e0      	bne.n	1a004766 <__swsetup_r+0x16>
1a0047a4:	686c      	ldr	r4, [r5, #4]
1a0047a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0047aa:	b293      	uxth	r3, r2
1a0047ac:	0719      	lsls	r1, r3, #28
1a0047ae:	d4e6      	bmi.n	1a00477e <__swsetup_r+0x2e>
1a0047b0:	06dd      	lsls	r5, r3, #27
1a0047b2:	d53c      	bpl.n	1a00482e <__swsetup_r+0xde>
1a0047b4:	0758      	lsls	r0, r3, #29
1a0047b6:	d426      	bmi.n	1a004806 <__swsetup_r+0xb6>
1a0047b8:	6920      	ldr	r0, [r4, #16]
1a0047ba:	f042 0308 	orr.w	r3, r2, #8
1a0047be:	81a3      	strh	r3, [r4, #12]
1a0047c0:	b29b      	uxth	r3, r3
1a0047c2:	2800      	cmp	r0, #0
1a0047c4:	d1dd      	bne.n	1a004782 <__swsetup_r+0x32>
1a0047c6:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a0047ca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a0047ce:	d0d8      	beq.n	1a004782 <__swsetup_r+0x32>
1a0047d0:	4630      	mov	r0, r6
1a0047d2:	4621      	mov	r1, r4
1a0047d4:	f000 f9ee 	bl	1a004bb4 <__smakebuf_r>
1a0047d8:	89a3      	ldrh	r3, [r4, #12]
1a0047da:	6920      	ldr	r0, [r4, #16]
1a0047dc:	f013 0201 	ands.w	r2, r3, #1
1a0047e0:	d1d2      	bne.n	1a004788 <__swsetup_r+0x38>
1a0047e2:	0799      	lsls	r1, r3, #30
1a0047e4:	bf58      	it	pl
1a0047e6:	6962      	ldrpl	r2, [r4, #20]
1a0047e8:	60a2      	str	r2, [r4, #8]
1a0047ea:	2800      	cmp	r0, #0
1a0047ec:	d1d2      	bne.n	1a004794 <__swsetup_r+0x44>
1a0047ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0047f2:	061a      	lsls	r2, r3, #24
1a0047f4:	d5cf      	bpl.n	1a004796 <__swsetup_r+0x46>
1a0047f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0047fa:	81a3      	strh	r3, [r4, #12]
1a0047fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004800:	bd70      	pop	{r4, r5, r6, pc}
1a004802:	68ac      	ldr	r4, [r5, #8]
1a004804:	e7b6      	b.n	1a004774 <__swsetup_r+0x24>
1a004806:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a004808:	b151      	cbz	r1, 1a004820 <__swsetup_r+0xd0>
1a00480a:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00480e:	4299      	cmp	r1, r3
1a004810:	d004      	beq.n	1a00481c <__swsetup_r+0xcc>
1a004812:	4630      	mov	r0, r6
1a004814:	f7ff f9fe 	bl	1a003c14 <_free_r>
1a004818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00481c:	2300      	movs	r3, #0
1a00481e:	6363      	str	r3, [r4, #52]	; 0x34
1a004820:	2300      	movs	r3, #0
1a004822:	6920      	ldr	r0, [r4, #16]
1a004824:	6063      	str	r3, [r4, #4]
1a004826:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a00482a:	6020      	str	r0, [r4, #0]
1a00482c:	e7c5      	b.n	1a0047ba <__swsetup_r+0x6a>
1a00482e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a004832:	2309      	movs	r3, #9
1a004834:	6033      	str	r3, [r6, #0]
1a004836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00483a:	81a2      	strh	r2, [r4, #12]
1a00483c:	bd70      	pop	{r4, r5, r6, pc}
1a00483e:	bf00      	nop
1a004840:	1000003c 	.word	0x1000003c
1a004844:	1a0050ec 	.word	0x1a0050ec
1a004848:	1a0050cc 	.word	0x1a0050cc
1a00484c:	1a0050ac 	.word	0x1a0050ac

1a004850 <__sfvwrite_r>:
1a004850:	6893      	ldr	r3, [r2, #8]
1a004852:	2b00      	cmp	r3, #0
1a004854:	f000 8102 	beq.w	1a004a5c <__sfvwrite_r+0x20c>
1a004858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00485c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a004860:	b29b      	uxth	r3, r3
1a004862:	460c      	mov	r4, r1
1a004864:	0719      	lsls	r1, r3, #28
1a004866:	b083      	sub	sp, #12
1a004868:	4682      	mov	sl, r0
1a00486a:	4690      	mov	r8, r2
1a00486c:	d535      	bpl.n	1a0048da <__sfvwrite_r+0x8a>
1a00486e:	6922      	ldr	r2, [r4, #16]
1a004870:	b39a      	cbz	r2, 1a0048da <__sfvwrite_r+0x8a>
1a004872:	f013 0202 	ands.w	r2, r3, #2
1a004876:	f8d8 6000 	ldr.w	r6, [r8]
1a00487a:	d03d      	beq.n	1a0048f8 <__sfvwrite_r+0xa8>
1a00487c:	2700      	movs	r7, #0
1a00487e:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
1a004882:	f8d4 c020 	ldr.w	ip, [r4, #32]
1a004886:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 1a004b54 <__sfvwrite_r+0x304>
1a00488a:	463d      	mov	r5, r7
1a00488c:	454d      	cmp	r5, r9
1a00488e:	462b      	mov	r3, r5
1a004890:	463a      	mov	r2, r7
1a004892:	bf28      	it	cs
1a004894:	464b      	movcs	r3, r9
1a004896:	4661      	mov	r1, ip
1a004898:	4650      	mov	r0, sl
1a00489a:	b1d5      	cbz	r5, 1a0048d2 <__sfvwrite_r+0x82>
1a00489c:	47d8      	blx	fp
1a00489e:	2800      	cmp	r0, #0
1a0048a0:	f340 80d2 	ble.w	1a004a48 <__sfvwrite_r+0x1f8>
1a0048a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a0048a8:	1a1b      	subs	r3, r3, r0
1a0048aa:	4407      	add	r7, r0
1a0048ac:	1a2d      	subs	r5, r5, r0
1a0048ae:	f8c8 3008 	str.w	r3, [r8, #8]
1a0048b2:	2b00      	cmp	r3, #0
1a0048b4:	f000 80b7 	beq.w	1a004a26 <__sfvwrite_r+0x1d6>
1a0048b8:	f8d4 c020 	ldr.w	ip, [r4, #32]
1a0048bc:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
1a0048c0:	454d      	cmp	r5, r9
1a0048c2:	462b      	mov	r3, r5
1a0048c4:	463a      	mov	r2, r7
1a0048c6:	bf28      	it	cs
1a0048c8:	464b      	movcs	r3, r9
1a0048ca:	4661      	mov	r1, ip
1a0048cc:	4650      	mov	r0, sl
1a0048ce:	2d00      	cmp	r5, #0
1a0048d0:	d1e4      	bne.n	1a00489c <__sfvwrite_r+0x4c>
1a0048d2:	e9d6 7500 	ldrd	r7, r5, [r6]
1a0048d6:	3608      	adds	r6, #8
1a0048d8:	e7d8      	b.n	1a00488c <__sfvwrite_r+0x3c>
1a0048da:	4621      	mov	r1, r4
1a0048dc:	4650      	mov	r0, sl
1a0048de:	f7ff ff37 	bl	1a004750 <__swsetup_r>
1a0048e2:	2800      	cmp	r0, #0
1a0048e4:	f040 8130 	bne.w	1a004b48 <__sfvwrite_r+0x2f8>
1a0048e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0048ec:	f8d8 6000 	ldr.w	r6, [r8]
1a0048f0:	b29b      	uxth	r3, r3
1a0048f2:	f013 0202 	ands.w	r2, r3, #2
1a0048f6:	d1c1      	bne.n	1a00487c <__sfvwrite_r+0x2c>
1a0048f8:	f013 0901 	ands.w	r9, r3, #1
1a0048fc:	f040 80b0 	bne.w	1a004a60 <__sfvwrite_r+0x210>
1a004900:	68a7      	ldr	r7, [r4, #8]
1a004902:	6820      	ldr	r0, [r4, #0]
1a004904:	464d      	mov	r5, r9
1a004906:	2d00      	cmp	r5, #0
1a004908:	d054      	beq.n	1a0049b4 <__sfvwrite_r+0x164>
1a00490a:	059a      	lsls	r2, r3, #22
1a00490c:	f140 80bc 	bpl.w	1a004a88 <__sfvwrite_r+0x238>
1a004910:	42af      	cmp	r7, r5
1a004912:	46bb      	mov	fp, r7
1a004914:	f200 80e7 	bhi.w	1a004ae6 <__sfvwrite_r+0x296>
1a004918:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a00491c:	d02f      	beq.n	1a00497e <__sfvwrite_r+0x12e>
1a00491e:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a004922:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a004926:	eba0 0b01 	sub.w	fp, r0, r1
1a00492a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a00492e:	1c68      	adds	r0, r5, #1
1a004930:	107f      	asrs	r7, r7, #1
1a004932:	4458      	add	r0, fp
1a004934:	42b8      	cmp	r0, r7
1a004936:	463a      	mov	r2, r7
1a004938:	bf84      	itt	hi
1a00493a:	4607      	movhi	r7, r0
1a00493c:	463a      	movhi	r2, r7
1a00493e:	055b      	lsls	r3, r3, #21
1a004940:	f140 80e9 	bpl.w	1a004b16 <__sfvwrite_r+0x2c6>
1a004944:	4611      	mov	r1, r2
1a004946:	4650      	mov	r0, sl
1a004948:	f7ff f9ba 	bl	1a003cc0 <_malloc_r>
1a00494c:	2800      	cmp	r0, #0
1a00494e:	f000 80f5 	beq.w	1a004b3c <__sfvwrite_r+0x2ec>
1a004952:	465a      	mov	r2, fp
1a004954:	6921      	ldr	r1, [r4, #16]
1a004956:	9001      	str	r0, [sp, #4]
1a004958:	f7ff f872 	bl	1a003a40 <memcpy>
1a00495c:	89a2      	ldrh	r2, [r4, #12]
1a00495e:	9b01      	ldr	r3, [sp, #4]
1a004960:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a004964:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a004968:	81a2      	strh	r2, [r4, #12]
1a00496a:	eba7 020b 	sub.w	r2, r7, fp
1a00496e:	eb03 000b 	add.w	r0, r3, fp
1a004972:	6167      	str	r7, [r4, #20]
1a004974:	6123      	str	r3, [r4, #16]
1a004976:	6020      	str	r0, [r4, #0]
1a004978:	60a2      	str	r2, [r4, #8]
1a00497a:	462f      	mov	r7, r5
1a00497c:	46ab      	mov	fp, r5
1a00497e:	465a      	mov	r2, fp
1a004980:	4649      	mov	r1, r9
1a004982:	f000 f9b5 	bl	1a004cf0 <memmove>
1a004986:	68a2      	ldr	r2, [r4, #8]
1a004988:	6823      	ldr	r3, [r4, #0]
1a00498a:	1bd2      	subs	r2, r2, r7
1a00498c:	445b      	add	r3, fp
1a00498e:	462f      	mov	r7, r5
1a004990:	60a2      	str	r2, [r4, #8]
1a004992:	6023      	str	r3, [r4, #0]
1a004994:	2500      	movs	r5, #0
1a004996:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00499a:	1bdb      	subs	r3, r3, r7
1a00499c:	44b9      	add	r9, r7
1a00499e:	f8c8 3008 	str.w	r3, [r8, #8]
1a0049a2:	2b00      	cmp	r3, #0
1a0049a4:	d03f      	beq.n	1a004a26 <__sfvwrite_r+0x1d6>
1a0049a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0049aa:	68a7      	ldr	r7, [r4, #8]
1a0049ac:	6820      	ldr	r0, [r4, #0]
1a0049ae:	b29b      	uxth	r3, r3
1a0049b0:	2d00      	cmp	r5, #0
1a0049b2:	d1aa      	bne.n	1a00490a <__sfvwrite_r+0xba>
1a0049b4:	e9d6 9500 	ldrd	r9, r5, [r6]
1a0049b8:	3608      	adds	r6, #8
1a0049ba:	e7a4      	b.n	1a004906 <__sfvwrite_r+0xb6>
1a0049bc:	f10b 0308 	add.w	r3, fp, #8
1a0049c0:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a0049c4:	469b      	mov	fp, r3
1a0049c6:	3308      	adds	r3, #8
1a0049c8:	2f00      	cmp	r7, #0
1a0049ca:	d0f9      	beq.n	1a0049c0 <__sfvwrite_r+0x170>
1a0049cc:	463a      	mov	r2, r7
1a0049ce:	210a      	movs	r1, #10
1a0049d0:	4630      	mov	r0, r6
1a0049d2:	f000 f93d 	bl	1a004c50 <memchr>
1a0049d6:	2800      	cmp	r0, #0
1a0049d8:	d053      	beq.n	1a004a82 <__sfvwrite_r+0x232>
1a0049da:	3001      	adds	r0, #1
1a0049dc:	eba0 0906 	sub.w	r9, r0, r6
1a0049e0:	464b      	mov	r3, r9
1a0049e2:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a0049e6:	6820      	ldr	r0, [r4, #0]
1a0049e8:	42bb      	cmp	r3, r7
1a0049ea:	bf28      	it	cs
1a0049ec:	463b      	movcs	r3, r7
1a0049ee:	4288      	cmp	r0, r1
1a0049f0:	d903      	bls.n	1a0049fa <__sfvwrite_r+0x1aa>
1a0049f2:	68a5      	ldr	r5, [r4, #8]
1a0049f4:	4415      	add	r5, r2
1a0049f6:	42ab      	cmp	r3, r5
1a0049f8:	dc19      	bgt.n	1a004a2e <__sfvwrite_r+0x1de>
1a0049fa:	429a      	cmp	r2, r3
1a0049fc:	dc7d      	bgt.n	1a004afa <__sfvwrite_r+0x2aa>
1a0049fe:	4613      	mov	r3, r2
1a004a00:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a004a02:	6a21      	ldr	r1, [r4, #32]
1a004a04:	4632      	mov	r2, r6
1a004a06:	4650      	mov	r0, sl
1a004a08:	47a8      	blx	r5
1a004a0a:	1e05      	subs	r5, r0, #0
1a004a0c:	dd1c      	ble.n	1a004a48 <__sfvwrite_r+0x1f8>
1a004a0e:	ebb9 0905 	subs.w	r9, r9, r5
1a004a12:	d06b      	beq.n	1a004aec <__sfvwrite_r+0x29c>
1a004a14:	2001      	movs	r0, #1
1a004a16:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a004a1a:	1b5b      	subs	r3, r3, r5
1a004a1c:	442e      	add	r6, r5
1a004a1e:	1b7f      	subs	r7, r7, r5
1a004a20:	f8c8 3008 	str.w	r3, [r8, #8]
1a004a24:	bb13      	cbnz	r3, 1a004a6c <__sfvwrite_r+0x21c>
1a004a26:	2000      	movs	r0, #0
1a004a28:	b003      	add	sp, #12
1a004a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004a2e:	4631      	mov	r1, r6
1a004a30:	462a      	mov	r2, r5
1a004a32:	f000 f95d 	bl	1a004cf0 <memmove>
1a004a36:	6823      	ldr	r3, [r4, #0]
1a004a38:	442b      	add	r3, r5
1a004a3a:	6023      	str	r3, [r4, #0]
1a004a3c:	4621      	mov	r1, r4
1a004a3e:	4650      	mov	r0, sl
1a004a40:	f7fe fe40 	bl	1a0036c4 <_fflush_r>
1a004a44:	2800      	cmp	r0, #0
1a004a46:	d0e2      	beq.n	1a004a0e <__sfvwrite_r+0x1be>
1a004a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004a54:	81a3      	strh	r3, [r4, #12]
1a004a56:	b003      	add	sp, #12
1a004a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004a5c:	2000      	movs	r0, #0
1a004a5e:	4770      	bx	lr
1a004a60:	4633      	mov	r3, r6
1a004a62:	4691      	mov	r9, r2
1a004a64:	4610      	mov	r0, r2
1a004a66:	4617      	mov	r7, r2
1a004a68:	464e      	mov	r6, r9
1a004a6a:	469b      	mov	fp, r3
1a004a6c:	2f00      	cmp	r7, #0
1a004a6e:	d0a5      	beq.n	1a0049bc <__sfvwrite_r+0x16c>
1a004a70:	2800      	cmp	r0, #0
1a004a72:	d1b5      	bne.n	1a0049e0 <__sfvwrite_r+0x190>
1a004a74:	463a      	mov	r2, r7
1a004a76:	210a      	movs	r1, #10
1a004a78:	4630      	mov	r0, r6
1a004a7a:	f000 f8e9 	bl	1a004c50 <memchr>
1a004a7e:	2800      	cmp	r0, #0
1a004a80:	d1ab      	bne.n	1a0049da <__sfvwrite_r+0x18a>
1a004a82:	1c7b      	adds	r3, r7, #1
1a004a84:	4699      	mov	r9, r3
1a004a86:	e7ac      	b.n	1a0049e2 <__sfvwrite_r+0x192>
1a004a88:	6923      	ldr	r3, [r4, #16]
1a004a8a:	4283      	cmp	r3, r0
1a004a8c:	d315      	bcc.n	1a004aba <__sfvwrite_r+0x26a>
1a004a8e:	6961      	ldr	r1, [r4, #20]
1a004a90:	42a9      	cmp	r1, r5
1a004a92:	d812      	bhi.n	1a004aba <__sfvwrite_r+0x26a>
1a004a94:	4b2e      	ldr	r3, [pc, #184]	; (1a004b50 <__sfvwrite_r+0x300>)
1a004a96:	6aa7      	ldr	r7, [r4, #40]	; 0x28
1a004a98:	429d      	cmp	r5, r3
1a004a9a:	bf94      	ite	ls
1a004a9c:	462b      	movls	r3, r5
1a004a9e:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a004aa2:	464a      	mov	r2, r9
1a004aa4:	fb93 f3f1 	sdiv	r3, r3, r1
1a004aa8:	4650      	mov	r0, sl
1a004aaa:	fb01 f303 	mul.w	r3, r1, r3
1a004aae:	6a21      	ldr	r1, [r4, #32]
1a004ab0:	47b8      	blx	r7
1a004ab2:	1e07      	subs	r7, r0, #0
1a004ab4:	ddc8      	ble.n	1a004a48 <__sfvwrite_r+0x1f8>
1a004ab6:	1bed      	subs	r5, r5, r7
1a004ab8:	e76d      	b.n	1a004996 <__sfvwrite_r+0x146>
1a004aba:	42af      	cmp	r7, r5
1a004abc:	bf28      	it	cs
1a004abe:	462f      	movcs	r7, r5
1a004ac0:	463a      	mov	r2, r7
1a004ac2:	4649      	mov	r1, r9
1a004ac4:	f000 f914 	bl	1a004cf0 <memmove>
1a004ac8:	68a3      	ldr	r3, [r4, #8]
1a004aca:	6822      	ldr	r2, [r4, #0]
1a004acc:	1bdb      	subs	r3, r3, r7
1a004ace:	443a      	add	r2, r7
1a004ad0:	60a3      	str	r3, [r4, #8]
1a004ad2:	6022      	str	r2, [r4, #0]
1a004ad4:	2b00      	cmp	r3, #0
1a004ad6:	d1ee      	bne.n	1a004ab6 <__sfvwrite_r+0x266>
1a004ad8:	4621      	mov	r1, r4
1a004ada:	4650      	mov	r0, sl
1a004adc:	f7fe fdf2 	bl	1a0036c4 <_fflush_r>
1a004ae0:	2800      	cmp	r0, #0
1a004ae2:	d0e8      	beq.n	1a004ab6 <__sfvwrite_r+0x266>
1a004ae4:	e7b0      	b.n	1a004a48 <__sfvwrite_r+0x1f8>
1a004ae6:	462f      	mov	r7, r5
1a004ae8:	46ab      	mov	fp, r5
1a004aea:	e748      	b.n	1a00497e <__sfvwrite_r+0x12e>
1a004aec:	4621      	mov	r1, r4
1a004aee:	4650      	mov	r0, sl
1a004af0:	f7fe fde8 	bl	1a0036c4 <_fflush_r>
1a004af4:	2800      	cmp	r0, #0
1a004af6:	d08e      	beq.n	1a004a16 <__sfvwrite_r+0x1c6>
1a004af8:	e7a6      	b.n	1a004a48 <__sfvwrite_r+0x1f8>
1a004afa:	461a      	mov	r2, r3
1a004afc:	4631      	mov	r1, r6
1a004afe:	9301      	str	r3, [sp, #4]
1a004b00:	f000 f8f6 	bl	1a004cf0 <memmove>
1a004b04:	9b01      	ldr	r3, [sp, #4]
1a004b06:	68a1      	ldr	r1, [r4, #8]
1a004b08:	6822      	ldr	r2, [r4, #0]
1a004b0a:	1ac9      	subs	r1, r1, r3
1a004b0c:	441a      	add	r2, r3
1a004b0e:	60a1      	str	r1, [r4, #8]
1a004b10:	6022      	str	r2, [r4, #0]
1a004b12:	461d      	mov	r5, r3
1a004b14:	e77b      	b.n	1a004a0e <__sfvwrite_r+0x1be>
1a004b16:	4650      	mov	r0, sl
1a004b18:	f000 f956 	bl	1a004dc8 <_realloc_r>
1a004b1c:	4603      	mov	r3, r0
1a004b1e:	2800      	cmp	r0, #0
1a004b20:	f47f af23 	bne.w	1a00496a <__sfvwrite_r+0x11a>
1a004b24:	6921      	ldr	r1, [r4, #16]
1a004b26:	4650      	mov	r0, sl
1a004b28:	f7ff f874 	bl	1a003c14 <_free_r>
1a004b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004b30:	220c      	movs	r2, #12
1a004b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a004b36:	f8ca 2000 	str.w	r2, [sl]
1a004b3a:	e787      	b.n	1a004a4c <__sfvwrite_r+0x1fc>
1a004b3c:	230c      	movs	r3, #12
1a004b3e:	f8ca 3000 	str.w	r3, [sl]
1a004b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004b46:	e781      	b.n	1a004a4c <__sfvwrite_r+0x1fc>
1a004b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004b4c:	e76c      	b.n	1a004a28 <__sfvwrite_r+0x1d8>
1a004b4e:	bf00      	nop
1a004b50:	7ffffffe 	.word	0x7ffffffe
1a004b54:	7ffffc00 	.word	0x7ffffc00

1a004b58 <__swhatbuf_r>:
1a004b58:	b570      	push	{r4, r5, r6, lr}
1a004b5a:	460c      	mov	r4, r1
1a004b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a004b60:	2900      	cmp	r1, #0
1a004b62:	b096      	sub	sp, #88	; 0x58
1a004b64:	4616      	mov	r6, r2
1a004b66:	461d      	mov	r5, r3
1a004b68:	db13      	blt.n	1a004b92 <__swhatbuf_r+0x3a>
1a004b6a:	466a      	mov	r2, sp
1a004b6c:	f7fb fc9b 	bl	1a0004a6 <_fstat_r>
1a004b70:	2800      	cmp	r0, #0
1a004b72:	db0e      	blt.n	1a004b92 <__swhatbuf_r+0x3a>
1a004b74:	9a01      	ldr	r2, [sp, #4]
1a004b76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a004b7a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
1a004b7e:	fab2 f282 	clz	r2, r2
1a004b82:	0952      	lsrs	r2, r2, #5
1a004b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004b88:	2000      	movs	r0, #0
1a004b8a:	602a      	str	r2, [r5, #0]
1a004b8c:	6033      	str	r3, [r6, #0]
1a004b8e:	b016      	add	sp, #88	; 0x58
1a004b90:	bd70      	pop	{r4, r5, r6, pc}
1a004b92:	89a3      	ldrh	r3, [r4, #12]
1a004b94:	2200      	movs	r2, #0
1a004b96:	061b      	lsls	r3, r3, #24
1a004b98:	602a      	str	r2, [r5, #0]
1a004b9a:	d504      	bpl.n	1a004ba6 <__swhatbuf_r+0x4e>
1a004b9c:	2340      	movs	r3, #64	; 0x40
1a004b9e:	2000      	movs	r0, #0
1a004ba0:	6033      	str	r3, [r6, #0]
1a004ba2:	b016      	add	sp, #88	; 0x58
1a004ba4:	bd70      	pop	{r4, r5, r6, pc}
1a004ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a004baa:	2000      	movs	r0, #0
1a004bac:	6033      	str	r3, [r6, #0]
1a004bae:	b016      	add	sp, #88	; 0x58
1a004bb0:	bd70      	pop	{r4, r5, r6, pc}
1a004bb2:	bf00      	nop

1a004bb4 <__smakebuf_r>:
1a004bb4:	898a      	ldrh	r2, [r1, #12]
1a004bb6:	0792      	lsls	r2, r2, #30
1a004bb8:	460b      	mov	r3, r1
1a004bba:	d506      	bpl.n	1a004bca <__smakebuf_r+0x16>
1a004bbc:	f101 0247 	add.w	r2, r1, #71	; 0x47
1a004bc0:	2101      	movs	r1, #1
1a004bc2:	601a      	str	r2, [r3, #0]
1a004bc4:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a004bc8:	4770      	bx	lr
1a004bca:	b570      	push	{r4, r5, r6, lr}
1a004bcc:	b082      	sub	sp, #8
1a004bce:	ab01      	add	r3, sp, #4
1a004bd0:	466a      	mov	r2, sp
1a004bd2:	460c      	mov	r4, r1
1a004bd4:	4606      	mov	r6, r0
1a004bd6:	f7ff ffbf 	bl	1a004b58 <__swhatbuf_r>
1a004bda:	9900      	ldr	r1, [sp, #0]
1a004bdc:	4605      	mov	r5, r0
1a004bde:	4630      	mov	r0, r6
1a004be0:	f7ff f86e 	bl	1a003cc0 <_malloc_r>
1a004be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004be8:	b170      	cbz	r0, 1a004c08 <__smakebuf_r+0x54>
1a004bea:	4916      	ldr	r1, [pc, #88]	; (1a004c44 <__smakebuf_r+0x90>)
1a004bec:	62b1      	str	r1, [r6, #40]	; 0x28
1a004bee:	9a01      	ldr	r2, [sp, #4]
1a004bf0:	9900      	ldr	r1, [sp, #0]
1a004bf2:	6020      	str	r0, [r4, #0]
1a004bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a004bf8:	81a3      	strh	r3, [r4, #12]
1a004bfa:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a004bfe:	b98a      	cbnz	r2, 1a004c24 <__smakebuf_r+0x70>
1a004c00:	432b      	orrs	r3, r5
1a004c02:	81a3      	strh	r3, [r4, #12]
1a004c04:	b002      	add	sp, #8
1a004c06:	bd70      	pop	{r4, r5, r6, pc}
1a004c08:	059a      	lsls	r2, r3, #22
1a004c0a:	d4fb      	bmi.n	1a004c04 <__smakebuf_r+0x50>
1a004c0c:	f023 0303 	bic.w	r3, r3, #3
1a004c10:	f104 0247 	add.w	r2, r4, #71	; 0x47
1a004c14:	f043 0302 	orr.w	r3, r3, #2
1a004c18:	2101      	movs	r1, #1
1a004c1a:	81a3      	strh	r3, [r4, #12]
1a004c1c:	6022      	str	r2, [r4, #0]
1a004c1e:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a004c22:	e7ef      	b.n	1a004c04 <__smakebuf_r+0x50>
1a004c24:	4630      	mov	r0, r6
1a004c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a004c2a:	f7fb fc41 	bl	1a0004b0 <_isatty_r>
1a004c2e:	b910      	cbnz	r0, 1a004c36 <__smakebuf_r+0x82>
1a004c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004c34:	e7e4      	b.n	1a004c00 <__smakebuf_r+0x4c>
1a004c36:	89a3      	ldrh	r3, [r4, #12]
1a004c38:	f023 0303 	bic.w	r3, r3, #3
1a004c3c:	f043 0301 	orr.w	r3, r3, #1
1a004c40:	b21b      	sxth	r3, r3
1a004c42:	e7dd      	b.n	1a004c00 <__smakebuf_r+0x4c>
1a004c44:	1a00374d 	.word	0x1a00374d
1a004c48:	ffffffff 	.word	0xffffffff
1a004c4c:	ffffffff 	.word	0xffffffff

1a004c50 <memchr>:
1a004c50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004c54:	2a10      	cmp	r2, #16
1a004c56:	db2b      	blt.n	1a004cb0 <memchr+0x60>
1a004c58:	f010 0f07 	tst.w	r0, #7
1a004c5c:	d008      	beq.n	1a004c70 <memchr+0x20>
1a004c5e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004c62:	3a01      	subs	r2, #1
1a004c64:	428b      	cmp	r3, r1
1a004c66:	d02d      	beq.n	1a004cc4 <memchr+0x74>
1a004c68:	f010 0f07 	tst.w	r0, #7
1a004c6c:	b342      	cbz	r2, 1a004cc0 <memchr+0x70>
1a004c6e:	d1f6      	bne.n	1a004c5e <memchr+0xe>
1a004c70:	b4f0      	push	{r4, r5, r6, r7}
1a004c72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a004c76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a004c7a:	f022 0407 	bic.w	r4, r2, #7
1a004c7e:	f07f 0700 	mvns.w	r7, #0
1a004c82:	2300      	movs	r3, #0
1a004c84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a004c88:	3c08      	subs	r4, #8
1a004c8a:	ea85 0501 	eor.w	r5, r5, r1
1a004c8e:	ea86 0601 	eor.w	r6, r6, r1
1a004c92:	fa85 f547 	uadd8	r5, r5, r7
1a004c96:	faa3 f587 	sel	r5, r3, r7
1a004c9a:	fa86 f647 	uadd8	r6, r6, r7
1a004c9e:	faa5 f687 	sel	r6, r5, r7
1a004ca2:	b98e      	cbnz	r6, 1a004cc8 <memchr+0x78>
1a004ca4:	d1ee      	bne.n	1a004c84 <memchr+0x34>
1a004ca6:	bcf0      	pop	{r4, r5, r6, r7}
1a004ca8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a004cac:	f002 0207 	and.w	r2, r2, #7
1a004cb0:	b132      	cbz	r2, 1a004cc0 <memchr+0x70>
1a004cb2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a004cb6:	3a01      	subs	r2, #1
1a004cb8:	ea83 0301 	eor.w	r3, r3, r1
1a004cbc:	b113      	cbz	r3, 1a004cc4 <memchr+0x74>
1a004cbe:	d1f8      	bne.n	1a004cb2 <memchr+0x62>
1a004cc0:	2000      	movs	r0, #0
1a004cc2:	4770      	bx	lr
1a004cc4:	3801      	subs	r0, #1
1a004cc6:	4770      	bx	lr
1a004cc8:	2d00      	cmp	r5, #0
1a004cca:	bf06      	itte	eq
1a004ccc:	4635      	moveq	r5, r6
1a004cce:	3803      	subeq	r0, #3
1a004cd0:	3807      	subne	r0, #7
1a004cd2:	f015 0f01 	tst.w	r5, #1
1a004cd6:	d107      	bne.n	1a004ce8 <memchr+0x98>
1a004cd8:	3001      	adds	r0, #1
1a004cda:	f415 7f80 	tst.w	r5, #256	; 0x100
1a004cde:	bf02      	ittt	eq
1a004ce0:	3001      	addeq	r0, #1
1a004ce2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a004ce6:	3001      	addeq	r0, #1
1a004ce8:	bcf0      	pop	{r4, r5, r6, r7}
1a004cea:	3801      	subs	r0, #1
1a004cec:	4770      	bx	lr
1a004cee:	bf00      	nop

1a004cf0 <memmove>:
1a004cf0:	4288      	cmp	r0, r1
1a004cf2:	b4f0      	push	{r4, r5, r6, r7}
1a004cf4:	d90d      	bls.n	1a004d12 <memmove+0x22>
1a004cf6:	188b      	adds	r3, r1, r2
1a004cf8:	4283      	cmp	r3, r0
1a004cfa:	d90a      	bls.n	1a004d12 <memmove+0x22>
1a004cfc:	1884      	adds	r4, r0, r2
1a004cfe:	b132      	cbz	r2, 1a004d0e <memmove+0x1e>
1a004d00:	4622      	mov	r2, r4
1a004d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a004d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a004d0a:	4299      	cmp	r1, r3
1a004d0c:	d1f9      	bne.n	1a004d02 <memmove+0x12>
1a004d0e:	bcf0      	pop	{r4, r5, r6, r7}
1a004d10:	4770      	bx	lr
1a004d12:	2a0f      	cmp	r2, #15
1a004d14:	d80e      	bhi.n	1a004d34 <memmove+0x44>
1a004d16:	4603      	mov	r3, r0
1a004d18:	1e54      	subs	r4, r2, #1
1a004d1a:	2a00      	cmp	r2, #0
1a004d1c:	d0f7      	beq.n	1a004d0e <memmove+0x1e>
1a004d1e:	3401      	adds	r4, #1
1a004d20:	440c      	add	r4, r1
1a004d22:	3b01      	subs	r3, #1
1a004d24:	f811 2b01 	ldrb.w	r2, [r1], #1
1a004d28:	f803 2f01 	strb.w	r2, [r3, #1]!
1a004d2c:	42a1      	cmp	r1, r4
1a004d2e:	d1f9      	bne.n	1a004d24 <memmove+0x34>
1a004d30:	bcf0      	pop	{r4, r5, r6, r7}
1a004d32:	4770      	bx	lr
1a004d34:	ea40 0301 	orr.w	r3, r0, r1
1a004d38:	079b      	lsls	r3, r3, #30
1a004d3a:	d13b      	bne.n	1a004db4 <memmove+0xc4>
1a004d3c:	f1a2 0710 	sub.w	r7, r2, #16
1a004d40:	093f      	lsrs	r7, r7, #4
1a004d42:	f101 0620 	add.w	r6, r1, #32
1a004d46:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a004d4a:	f101 0310 	add.w	r3, r1, #16
1a004d4e:	f100 0410 	add.w	r4, r0, #16
1a004d52:	f853 5c10 	ldr.w	r5, [r3, #-16]
1a004d56:	f844 5c10 	str.w	r5, [r4, #-16]
1a004d5a:	f853 5c0c 	ldr.w	r5, [r3, #-12]
1a004d5e:	f844 5c0c 	str.w	r5, [r4, #-12]
1a004d62:	f853 5c08 	ldr.w	r5, [r3, #-8]
1a004d66:	f844 5c08 	str.w	r5, [r4, #-8]
1a004d6a:	f853 5c04 	ldr.w	r5, [r3, #-4]
1a004d6e:	f844 5c04 	str.w	r5, [r4, #-4]
1a004d72:	3310      	adds	r3, #16
1a004d74:	42b3      	cmp	r3, r6
1a004d76:	f104 0410 	add.w	r4, r4, #16
1a004d7a:	d1ea      	bne.n	1a004d52 <memmove+0x62>
1a004d7c:	1c7b      	adds	r3, r7, #1
1a004d7e:	011b      	lsls	r3, r3, #4
1a004d80:	f012 0f0c 	tst.w	r2, #12
1a004d84:	4419      	add	r1, r3
1a004d86:	f002 050f 	and.w	r5, r2, #15
1a004d8a:	4403      	add	r3, r0
1a004d8c:	d015      	beq.n	1a004dba <memmove+0xca>
1a004d8e:	3d04      	subs	r5, #4
1a004d90:	08ad      	lsrs	r5, r5, #2
1a004d92:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
1a004d96:	1f1c      	subs	r4, r3, #4
1a004d98:	460e      	mov	r6, r1
1a004d9a:	f856 7b04 	ldr.w	r7, [r6], #4
1a004d9e:	f844 7f04 	str.w	r7, [r4, #4]!
1a004da2:	4564      	cmp	r4, ip
1a004da4:	d1f9      	bne.n	1a004d9a <memmove+0xaa>
1a004da6:	3501      	adds	r5, #1
1a004da8:	00ad      	lsls	r5, r5, #2
1a004daa:	442b      	add	r3, r5
1a004dac:	4429      	add	r1, r5
1a004dae:	f002 0203 	and.w	r2, r2, #3
1a004db2:	e7b1      	b.n	1a004d18 <memmove+0x28>
1a004db4:	1e54      	subs	r4, r2, #1
1a004db6:	4603      	mov	r3, r0
1a004db8:	e7b1      	b.n	1a004d1e <memmove+0x2e>
1a004dba:	462a      	mov	r2, r5
1a004dbc:	e7ac      	b.n	1a004d18 <memmove+0x28>
1a004dbe:	bf00      	nop

1a004dc0 <__malloc_lock>:
1a004dc0:	4770      	bx	lr
1a004dc2:	bf00      	nop

1a004dc4 <__malloc_unlock>:
1a004dc4:	4770      	bx	lr
1a004dc6:	bf00      	nop

1a004dc8 <_realloc_r>:
1a004dc8:	b309      	cbz	r1, 1a004e0e <_realloc_r+0x46>
1a004dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004dcc:	4614      	mov	r4, r2
1a004dce:	b1ca      	cbz	r2, 1a004e04 <_realloc_r+0x3c>
1a004dd0:	4606      	mov	r6, r0
1a004dd2:	460d      	mov	r5, r1
1a004dd4:	f000 f81e 	bl	1a004e14 <_malloc_usable_size_r>
1a004dd8:	42a0      	cmp	r0, r4
1a004dda:	d302      	bcc.n	1a004de2 <_realloc_r+0x1a>
1a004ddc:	462f      	mov	r7, r5
1a004dde:	4638      	mov	r0, r7
1a004de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004de2:	4621      	mov	r1, r4
1a004de4:	4630      	mov	r0, r6
1a004de6:	f7fe ff6b 	bl	1a003cc0 <_malloc_r>
1a004dea:	4607      	mov	r7, r0
1a004dec:	2800      	cmp	r0, #0
1a004dee:	d0f6      	beq.n	1a004dde <_realloc_r+0x16>
1a004df0:	4622      	mov	r2, r4
1a004df2:	4629      	mov	r1, r5
1a004df4:	f7fe fe24 	bl	1a003a40 <memcpy>
1a004df8:	4630      	mov	r0, r6
1a004dfa:	4629      	mov	r1, r5
1a004dfc:	f7fe ff0a 	bl	1a003c14 <_free_r>
1a004e00:	4638      	mov	r0, r7
1a004e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004e04:	4627      	mov	r7, r4
1a004e06:	f7fe ff05 	bl	1a003c14 <_free_r>
1a004e0a:	4638      	mov	r0, r7
1a004e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a004e0e:	4611      	mov	r1, r2
1a004e10:	f7fe bf56 	b.w	1a003cc0 <_malloc_r>

1a004e14 <_malloc_usable_size_r>:
1a004e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a004e18:	1f18      	subs	r0, r3, #4
1a004e1a:	2b00      	cmp	r3, #0
1a004e1c:	bfbc      	itt	lt
1a004e1e:	580b      	ldrlt	r3, [r1, r0]
1a004e20:	18c0      	addlt	r0, r0, r3
1a004e22:	4770      	bx	lr
1a004e24:	65726154 	.word	0x65726154
1a004e28:	0d312061 	.word	0x0d312061
1a004e2c:	ffffff00 	.word	0xffffff00
1a004e30:	65726154 	.word	0x65726154
1a004e34:	0d332061 	.word	0x0d332061
1a004e38:	ffffff00 	.word	0xffffff00
1a004e3c:	72656a45 	.word	0x72656a45
1a004e40:	69636963 	.word	0x69636963
1a004e44:	2033206f 	.word	0x2033206f
1a004e48:	5452202d 	.word	0x5452202d
1a004e4c:	3220534f 	.word	0x3220534f
1a004e50:	0000000d 	.word	0x0000000d
1a004e54:	65726174 	.word	0x65726174
1a004e58:	00003161 	.word	0x00003161
1a004e5c:	65726174 	.word	0x65726174
1a004e60:	00003261 	.word	0x00003261
1a004e64:	65726174 	.word	0x65726174
1a004e68:	ff003361 	.word	0xff003361
1a004e6c:	41760a0d 	.word	0x41760a0d
1a004e70:	72657373 	.word	0x72657373
1a004e74:	6c614374 	.word	0x6c614374
1a004e78:	2864656c 	.word	0x2864656c
1a004e7c:	200a0d29 	.word	0x200a0d29
1a004e80:	4c4c2020 	.word	0x4c4c2020
1a004e84:	20656e69 	.word	0x20656e69
1a004e88:	626d754e 	.word	0x626d754e
1a004e8c:	3d207265 	.word	0x3d207265
1a004e90:	0d642520 	.word	0x0d642520
1a004e94:	2020200a 	.word	0x2020200a
1a004e98:	656c6946 	.word	0x656c6946
1a004e9c:	6d614e20 	.word	0x6d614e20
1a004ea0:	203d2065 	.word	0x203d2065
1a004ea4:	0a0d7325 	.word	0x0a0d7325
1a004ea8:	ff000a0d 	.word	0xff000a0d
1a004eac:	6c707041 	.word	0x6c707041
1a004eb0:	74616369 	.word	0x74616369
1a004eb4:	206e6f69 	.word	0x206e6f69
1a004eb8:	6c6c614d 	.word	0x6c6c614d
1a004ebc:	4620636f 	.word	0x4620636f
1a004ec0:	656c6961 	.word	0x656c6961
1a004ec4:	6f482064 	.word	0x6f482064
1a004ec8:	0d216b6f 	.word	0x0d216b6f
1a004ecc:	00000000 	.word	0x00000000
1a004ed0:	7362696c 	.word	0x7362696c
1a004ed4:	6572662f 	.word	0x6572662f
1a004ed8:	6f747265 	.word	0x6f747265
1a004edc:	6f732f73 	.word	0x6f732f73
1a004ee0:	65637275 	.word	0x65637275
1a004ee4:	6f6f682f 	.word	0x6f6f682f
1a004ee8:	632e736b 	.word	0x632e736b
1a004eec:	ffffff00 	.word	0xffffff00
1a004ef0:	70410a0d 	.word	0x70410a0d
1a004ef4:	63696c70 	.word	0x63696c70
1a004ef8:	6f697461 	.word	0x6f697461
1a004efc:	7453206e 	.word	0x7453206e
1a004f00:	206b6361 	.word	0x206b6361
1a004f04:	7265764f 	.word	0x7265764f
1a004f08:	776f6c66 	.word	0x776f6c66
1a004f0c:	6f202121 	.word	0x6f202121
1a004f10:	6154206e 	.word	0x6154206e
1a004f14:	203a6b73 	.word	0x203a6b73
1a004f18:	0a0d7325 	.word	0x0a0d7325
1a004f1c:	ffffff00 	.word	0xffffff00
1a004f20:	454c4449 	.word	0x454c4449
1a004f24:	ffffff00 	.word	0xffffff00
1a004f28:	51726d54 	.word	0x51726d54
1a004f2c:	ffffff00 	.word	0xffffff00
1a004f30:	20726d54 	.word	0x20726d54
1a004f34:	00637653 	.word	0x00637653

1a004f38 <ExtRateIn>:
1a004f38:	00000000                                ....

1a004f3c <GpioButtons>:
1a004f3c:	08000400 09010900                       ........

1a004f44 <GpioLeds>:
1a004f44:	01050005 0e000205 0c010b01              ............

1a004f50 <GpioPorts>:
1a004f50:	03030003 0f050403 05031005 07030603     ................
1a004f60:	ffff0802                                ....

1a004f64 <OscRateIn>:
1a004f64:	00b71b00                                ....

1a004f68 <InitClkStates>:
1a004f68:	01010f01                                ....

1a004f6c <pinmuxing>:
1a004f6c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a004f7c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a004f8c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a004f9c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a004fac:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a004fbc:	00d50301 00d50401 00160107 00560207     ..............V.
1a004fcc:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a004fdc:	00570206                                ..W.

1a004fe0 <UART_BClock>:
1a004fe0:	01a201c2 01620182                       ......b.

1a004fe8 <UART_PClock>:
1a004fe8:	00820081 00a200a1 0f0f0f03 ffff00ff     ................

1a004ff8 <periph_to_base>:
1a004ff8:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a005008:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a005018:	000100e0 01000100 01200003 00060120     .......... . ...
1a005028:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a005038:	01820013 00120182 01a201a2 01c20011     ................
1a005048:	001001c2 01e201e2 0202000f 000e0202     ................
1a005058:	02220222 0223000d 001c0223              "."...#.#...

1a005064 <InitClkStates>:
1a005064:	00010100 00010909 0001090a 01010701     ................
1a005074:	00010902 00010906 0101090c 0001090d     ................
1a005084:	0001090e 0001090f 00010910 00010911     ................
1a005094:	00010912 00010913 00011114 00011119     ................
1a0050a4:	0001111a 0001111b                       ........

1a0050ac <__sf_fake_stderr>:
	...

1a0050cc <__sf_fake_stdout>:
	...

1a0050ec <__sf_fake_stdin>:
	...

1a00510c <_global_impure_ptr>:
1a00510c:	10000040 2b302d23 00000020 004c6c68     @...#-0+ ...hlL.
1a00511c:	45676665 ff004746 33323130 37363534     efgEFG..01234567
1a00512c:	42413938 46454443 00000000 33323130     89ABCDEF....0123
1a00513c:	37363534 62613938 66656463 ffffff00     456789abcdef....
